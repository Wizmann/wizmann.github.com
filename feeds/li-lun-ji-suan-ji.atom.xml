<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Maerlyn's Rainbow - 理论计算机</title><link href="https://wizmann.top/" rel="alternate"/><link href="https://wizmann.top/feeds/li-lun-ji-suan-ji.atom.xml" rel="self"/><id>https://wizmann.top/</id><updated>2025-10-01T10:00:00+08:00</updated><entry><title>从字符串替换到图灵机：A=B 的完备性构造</title><link href="https://wizmann.top/ab-turing-completeness.html" rel="alternate"/><published>2025-10-01T10:00:00+08:00</published><updated>2025-10-01T10:00:00+08:00</updated><author><name>Wizmann</name></author><id>tag:wizmann.top,2025-10-01:/ab-turing-completeness.html</id><summary type="html">&lt;h2 id="0-ab"&gt;0. 背景：A=B 是什么&lt;/h2&gt;
&lt;p&gt;A=B 是在一款&lt;a href="https://store.steampowered.com/app/1720850/AB/"&gt;解谜游戏&lt;/a&gt;中引入的一种极简编程语言。它的语法只有一种形式：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;A = B
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;含义是“在字符串中 …&lt;/p&gt;</summary><content type="html">&lt;h2 id="0-ab"&gt;0. 背景：A=B 是什么&lt;/h2&gt;
&lt;p&gt;A=B 是在一款&lt;a href="https://store.steampowered.com/app/1720850/AB/"&gt;解谜游戏&lt;/a&gt;中引入的一种极简编程语言。它的语法只有一种形式：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;A = B
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;含义是“在字符串中找到子串 &lt;code&gt;A&lt;/code&gt;，并把它替换为 &lt;code&gt;B&lt;/code&gt;”。程序运行过程如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;从输入串开始；&lt;/li&gt;
&lt;li&gt;逐条检查规则，从&lt;strong&gt;第一条规则&lt;/strong&gt;开始，寻找&lt;strong&gt;第一个匹配的左部&lt;/strong&gt;；&lt;/li&gt;
&lt;li&gt;一旦找到，就立即执行替换；&lt;/li&gt;
&lt;li&gt;然后从头再来（回到规则表开头）；&lt;/li&gt;
&lt;li&gt;如果没有任何规则可用，则程序停机，并输出当前字符串。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在游戏后期，会出现扩展关键字（如 &lt;code&gt;(start)&lt;/code&gt; 匹配开头、&lt;code&gt;(end)&lt;/code&gt; 匹配结尾、&lt;code&gt;(once)&lt;/code&gt; 限制只替换一次、&lt;code&gt;(return)&lt;/code&gt; 表示立即输出并停机），它们能让表达力更强。但关键是：&lt;strong&gt;即使完全不依赖这些扩展，A=B 也已经足够强大，可以达到图灵完备性&lt;/strong&gt;。&lt;/p&gt;
&lt;h3 id="_1"&gt;什么是“图灵完备”？&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;图灵完备&lt;/strong&gt;表示该系统能模拟任意图灵机：只要时间与存储足够，任何可计算的算法都能实现。直观地，它意味着：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;能够存储和操作任意量的信息；&lt;/li&gt;
&lt;li&gt;能够分支（条件判断）；&lt;/li&gt;
&lt;li&gt;能够循环（无限计算，直到停机）。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;证明 A=B 图灵完备，就是证明它并非“替换小游戏”，而是具备通用计算能力的编程语言。&lt;/p&gt;
&lt;h2 id="1"&gt;1. 理论背景：字符串重写系统为何图灵完备？&lt;/h2&gt;
&lt;p&gt;早在 20 世纪初，数学家 &lt;strong&gt;Axel Thue&lt;/strong&gt; 就提出了&lt;strong&gt;字符串重写系统&lt;/strong&gt;（Thue system），研究如何通过规则替换来生成和变换字符串。后来，&lt;strong&gt;Emil Post&lt;/strong&gt; 进一步发展出 &lt;strong&gt;Post 规范系统&lt;/strong&gt;，并证明这类系统足以表达任意可计算过程。&lt;/p&gt;
&lt;p&gt;核心结论是：&lt;strong&gt;半 Thue 系统（Semi-Thue system，即字符串重写系统）能够模拟任意图灵机&lt;/strong&gt;。其思路是将“图灵机的一个配置（状态 + 带子内容）”编码成一个字符串，再用重写规则逐步执行机器的转移函数。&lt;/p&gt;
&lt;p&gt;下面是维基百科条目给出的一个&lt;strong&gt;标准构造&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;用字母表中的若干符号表示带子符号（&lt;span class="math"&gt;\(S_k\)&lt;/span&gt;）；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;用一个&lt;strong&gt;唯一的&lt;/strong&gt;状态标记（&lt;span class="math"&gt;\(q_i\)&lt;/span&gt;）表示当前机内状态，并保证它在配置中&lt;strong&gt;恰好出现一次&lt;/strong&gt;。其右侧符号即为当前读头所在位置的带子符号；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;向右移动的转移&lt;/strong&gt;&lt;br&gt;
在图灵机里，&lt;em&gt;“向右移动”&lt;/em&gt; 的意思是：读写头在处理完当前位置后，&lt;strong&gt;把读写位置移动到右边的一个格子&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="math"&gt;$$
  \delta(q_i, S_k) = (q_j, S_l, \rightarrow)
  $$&lt;/div&gt;
&lt;p&gt;对应的重写规则是&lt;/p&gt;
&lt;div class="math"&gt;$$
  q_i S_k \to S_l q_j
  $$&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;解释：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class="math"&gt;\(\delta\)&lt;/span&gt;：转移函数；&lt;/li&gt;
&lt;li&gt;&lt;span class="math"&gt;\(q_i\)&lt;/span&gt;：当前状态；&lt;/li&gt;
&lt;li&gt;&lt;span class="math"&gt;\(S_k\)&lt;/span&gt;：当前读到的符号；&lt;/li&gt;
&lt;li&gt;&lt;span class="math"&gt;\(S_l\)&lt;/span&gt;：要写回去的新符号；&lt;/li&gt;
&lt;li&gt;&lt;span class="math"&gt;\(q_j\)&lt;/span&gt;：更新后的状态；&lt;/li&gt;
&lt;li&gt;&lt;span class="math"&gt;\(\rightarrow\)&lt;/span&gt;：表示读头右移；&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;规则的含义是：把「状态 + 符号」替换为「新符号 + 新状态」，等价于完成写入并把状态标记移动到右边。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;向左移动的转移&lt;/strong&gt;&lt;br&gt;
  在图灵机里，&lt;em&gt;“向左移动”&lt;/em&gt; 的意思是：读写头在处理完当前位置后，&lt;strong&gt;把读写位置移动到左边的一个格子&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="math"&gt;$$
  \delta(q_i, S_k) = (q_j, S_l, \leftarrow)
  $$&lt;/div&gt;
&lt;p&gt;对应一簇规则（需对左邻符号 &lt;span class="math"&gt;\(S_p\)&lt;/span&gt; 枚举）：&lt;/p&gt;
&lt;div class="math"&gt;$$
  S_p q_i S_k \to q_j S_p S_l
  $$&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;解释：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当读头左移时，必须知道左边的符号 &lt;span class="math"&gt;\(S_p\)&lt;/span&gt;；&lt;/li&gt;
&lt;li&gt;左邻符号 + 状态标记 + 当前符号，一起被替换成「新状态 + 左邻符号 + 新符号」；&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;这使得状态标记成功左移，同时完成写入操作。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;无限带子的处理&lt;/strong&gt;&lt;br&gt;
为了模拟“无限长”的带子，需要在两端加哨兵符号 &lt;span class="math"&gt;\(h\)&lt;/span&gt;，并加入特殊的延展规则，使得机器在靠近边界时可以“创造”新的空白格子，从而对应无限内存的假设。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;由于&lt;strong&gt;每次重写都必须包含且仅包含一个 &lt;span class="math"&gt;\(q_i\)&lt;/span&gt;&lt;/strong&gt;，所以在任意时刻都只有&lt;strong&gt;唯一可用的匹配位置&lt;/strong&gt;。整个替换过程严格对应图灵机的一步步执行。因此，字符串重写系统具备完整的计算能力，也就是&lt;strong&gt;图灵完备&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id="2-ab"&gt;2. 核心命题与证明纲要（把任意图灵机编译成 A=B 程序）&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;命题.&lt;/strong&gt; A=B（即使不用任何关键字）也是图灵完备的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;证明思路（构造式归约）&lt;/strong&gt;&lt;br&gt;
给定任意一台&lt;strong&gt;确定性的&lt;/strong&gt;单带图灵机：&lt;/p&gt;
&lt;div class="math"&gt;$$
M = (Q, \Gamma, \sqcup, \delta, q_0, q_{\text{halt}})
$$&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;解释：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class="math"&gt;\(Q\)&lt;/span&gt;：有限的状态集合；&lt;/li&gt;
&lt;li&gt;&lt;span class="math"&gt;\(\Gamma\)&lt;/span&gt;：带子符号集合；&lt;/li&gt;
&lt;li&gt;&lt;span class="math"&gt;\(\sqcup\)&lt;/span&gt;：空白符；&lt;/li&gt;
&lt;li&gt;&lt;span class="math"&gt;\(\delta\)&lt;/span&gt;：转移函数，定义“遇到某符号时怎么写、状态怎么变、头怎么动”；&lt;/li&gt;
&lt;li&gt;&lt;span class="math"&gt;\(q_0\)&lt;/span&gt;：初始状态；&lt;/li&gt;
&lt;li&gt;&lt;span class="math"&gt;\(q_{\text{halt}}\)&lt;/span&gt;：停机状态。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;构造一组 A=B 规则，使其在任意初始输入编码上&lt;strong&gt;逐步等价&lt;/strong&gt;地重写到 &lt;span class="math"&gt;\(M\)&lt;/span&gt; 的后续配置，直到停机。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;编码配置&lt;/strong&gt;&lt;br&gt;
   用字符串来编码一台机器的状态：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="math"&gt;$$
   h , L , q_i , R , h
   $$&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;解释：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class="math"&gt;\(L\)&lt;/span&gt;：读头左边的带内容；&lt;/li&gt;
&lt;li&gt;&lt;span class="math"&gt;\(R\)&lt;/span&gt;：读头当前位置以及右边的内容；&lt;/li&gt;
&lt;li&gt;&lt;span class="math"&gt;\(q_i\)&lt;/span&gt;：当前状态，只出现一次；&lt;/li&gt;
&lt;li&gt;两端的 &lt;span class="math"&gt;\(h\)&lt;/span&gt; 是哨兵，确保机器永远不会“掉出带子”。&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start="2"&gt;
&lt;li&gt;&lt;strong&gt;生成规则&lt;/strong&gt;&lt;br&gt;
   对每条转移 &lt;span class="math"&gt;\(\delta(q_i,S_k) = (q_j,S_l,\text{dir})\)&lt;/span&gt;，生成对应的 A=B 规则：&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;右移：&lt;br&gt;
&lt;div class="math"&gt;$$
    q_i S_k \to S_l q_j
    $$&lt;/div&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;左移（对所有 &lt;span class="math"&gt;\(S_p \in \Gamma\)&lt;/span&gt;）：&lt;br&gt;
&lt;div class="math"&gt;$$
    S_p q_i S_k \to q_j S_p S_l
    $$&lt;/div&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;遇到带子右端（&lt;span class="math"&gt;\(S_0=\sqcup\)&lt;/span&gt;）：&lt;br&gt;
&lt;div class="math"&gt;$$
    h q_i S_k \to h q_j S_0 S_l
    $$&lt;/div&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果进入停机状态 &lt;span class="math"&gt;\(q_{\text{halt}}\)&lt;/span&gt;，没有进一步规则匹配，程序就自然停机。即使没有 &lt;code&gt;(return)&lt;/code&gt;，停机时当前字符串就是输出。&lt;/p&gt;
&lt;ol start="3"&gt;
&lt;li&gt;&lt;strong&gt;正确性&lt;/strong&gt;&lt;br&gt;
  * &lt;strong&gt;唯一匹配位置&lt;/strong&gt;：每个串里只有一个 &lt;span class="math"&gt;\(q_i\)&lt;/span&gt;，所以只有一个规则能触发；这与 A=B 的“从左到右、按顺序找”完全兼容。&lt;br&gt;
  * &lt;strong&gt;一步对应&lt;/strong&gt;：每条替换规则严格模拟图灵机的一步（写入、移动、更新状态）。&lt;br&gt;
  * &lt;strong&gt;停机&lt;/strong&gt;：进入 &lt;span class="math"&gt;\(q_{\text{halt}}\)&lt;/span&gt; 后没有规则匹配，A=B 程序停机。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;因此，A=B 可以模拟任意图灵机，所以它是&lt;strong&gt;图灵完备的&lt;/strong&gt;。 &lt;span class="math"&gt;\(\square\)&lt;/span&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id="3"&gt;3. 举例：计数器程序（用例证法说明完备性）&lt;/h2&gt;
&lt;p&gt;上节我们给出了严格的归约证明，这里再展示一个&lt;strong&gt;具体程序&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;把输入的二进制数（&lt;span class="math"&gt;\(1 \leq n  \leq 63\)&lt;/span&gt;）转换成对应数量的 &lt;code&gt;a&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id="_2"&gt;程序规则&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="mf"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;X$&lt;/span&gt;
&lt;span class="mf"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;Y$&lt;/span&gt;
&lt;span class="err"&gt;$$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;
&lt;span class="n"&gt;YXXXXX$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;XXXXX$aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa&lt;/span&gt;
&lt;span class="n"&gt;YXXXX$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;XXXX$aaaaaaaaaaaaaaaa&lt;/span&gt;
&lt;span class="n"&gt;YXXX$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;XXX$aaaaaaaa&lt;/span&gt;
&lt;span class="n"&gt;YXX$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;XX$aaaa&lt;/span&gt;
&lt;span class="n"&gt;YX$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;X$a&lt;/span&gt;
&lt;span class="n"&gt;Y$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;X$a&lt;/span&gt;
&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;
&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;hr&gt;
&lt;h3 id="_3"&gt;与图灵机构造的对应关系&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;字母表（Alphabet）&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;符号集合 &lt;span class="math"&gt;\(\Gamma\)&lt;/span&gt;：&lt;code&gt;0,1,X,Y,$,a&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;就像图灵机带子上的有限符号集。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;状态（States）&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;在一般构造中，状态由 &lt;span class="math"&gt;\(q_i\)&lt;/span&gt; 标记。&lt;/li&gt;
&lt;li&gt;在这里，「状态」由当前匹配的模式体现：&lt;ul&gt;
&lt;li&gt;匹配 &lt;code&gt;YXXX$&lt;/code&gt; = “状态 = 等待展开 8 个 a”；&lt;/li&gt;
&lt;li&gt;匹配 &lt;code&gt;YX$&lt;/code&gt; = “状态 = 等待展开 2 个 a”。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;所以规则本身就扮演了转移函数 &lt;span class="math"&gt;\(\delta\)&lt;/span&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;读写头（Head）&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;在 A=B 里没有显式的“头”，但每次替换只能在&lt;strong&gt;一个匹配窗口&lt;/strong&gt;里发生：&lt;/li&gt;
&lt;li&gt;例如 &lt;code&gt;YXXX$ → XXX$aaaaaaaa&lt;/code&gt;：可以看成&lt;strong&gt;读写头在 Y 上&lt;/strong&gt;，读到右边 3 个 X 和 &lt;code&gt;$&lt;/code&gt;，然后写出 &lt;code&gt;a&lt;/code&gt; 并右移。&lt;/li&gt;
&lt;li&gt;例如 &lt;code&gt;YX$ → X$a&lt;/code&gt;：可以看成&lt;strong&gt;读写头在 Y 上&lt;/strong&gt;，它左边的 X 会被保留，头位置连带移动到右边继续展开。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;右移的体现&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;替换 &lt;code&gt;YXXX$ → XXX$aaaaaaaa&lt;/code&gt;：&lt;/li&gt;
&lt;li&gt;相当于图灵机在 Y 所在格写入若干 a；&lt;/li&gt;
&lt;li&gt;然后状态标记（匹配窗口）自动“滑到右边的 $”处，继续执行。&lt;/li&gt;
&lt;li&gt;这对应于「写入后头向右移」。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;左移的体现&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;在展开尾部规则 &lt;code&gt;Y$ → X$a&lt;/code&gt; 中：&lt;ul&gt;
&lt;li&gt;当 Y 已经贴近 &lt;code&gt;$&lt;/code&gt; 时，替换会把 &lt;code&gt;$&lt;/code&gt;左边的 X 替出来，并在 Y 的左边补上 a；&lt;/li&gt;
&lt;li&gt;这等价于&lt;strong&gt;把读写头往左看一格&lt;/strong&gt;，再进行展开。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;整个效果就和「写入后头左移」一致。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;带子与哨兵（Tape &amp;amp; Sentinel）&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;符号 &lt;code&gt;$&lt;/code&gt; 就是带子的边界标记；&lt;/li&gt;
&lt;li&gt;末尾两条规则会逐步清理辅助符号，等价于无限带的“空白格”处理。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$X =
$ =
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id="_4"&gt;为什么这个例子能说明图灵完备性？&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;存储&lt;/strong&gt;：输入二进制串被转写成 Y/X/$ 的带子配置。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;分支&lt;/strong&gt;：不同的规则（&lt;code&gt;YXXX$&lt;/code&gt;, &lt;code&gt;YXX$&lt;/code&gt;, &lt;code&gt;YX$&lt;/code&gt;, …）体现条件分支。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;循环&lt;/strong&gt;：展开过程需要不断触发相同的规则，直到消耗完所有 Y，体现迭代。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;左/右移动&lt;/strong&gt;：匹配窗口的替换效果对应于头在带子上左右移动。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;停机&lt;/strong&gt;：当所有符号都归约成 &lt;code&gt;a&lt;/code&gt;，再无规则可用时，程序自然停机。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所以，这个计数器程序已经在完整地模拟图灵机的运行：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;字母表&lt;/strong&gt; → &lt;code&gt;{0,1,X,Y,$,a}&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;状态&lt;/strong&gt; → 匹配模式决定；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;读写头&lt;/strong&gt; → 当前匹配窗口位置决定；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;左右移动&lt;/strong&gt; → 替换结果把窗口推到左/右；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;停机&lt;/strong&gt; → 无规则可用。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这说明 A=B 并非“看似字符串替换”，而是真正能模拟一台图灵机。&lt;/p&gt;
&lt;h2 id="4"&gt;4. 顺序/左端优先会不会削弱能力？&lt;/h2&gt;
&lt;p&gt;不会。因为在构造中我们保证了&lt;strong&gt;唯一状态标记 &lt;span class="math"&gt;\(q_i\)&lt;/span&gt;&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每条规则都包含且仅包含一个 &lt;span class="math"&gt;\(q_i\)&lt;/span&gt;；&lt;/li&gt;
&lt;li&gt;串中也只有一个 &lt;span class="math"&gt;\(q_i\)&lt;/span&gt;；&lt;/li&gt;
&lt;li&gt;因此始终只有唯一匹配。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所以，不管是左端优先还是其他策略，运行轨迹都是唯一的，能力不受影响。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id="5"&gt;5. 关系图（理论坐标系）&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;A=B&lt;/strong&gt;：一个带优先级与锚点关键字的字符串替换语言。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Semi-Thue / SRS&lt;/strong&gt;：字符串重写系统，图灵完备。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Post 规范系统&lt;/strong&gt;：可化归为 SRS，同样图灵完备。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Thue 语言&lt;/strong&gt;：非确定性重写为核心的怪诞语言，图灵完备。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id="6"&gt;6. 结语&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;形式化&lt;/strong&gt;：任意图灵机都能编译成 A=B 规则，逐步等价执行 → 图灵完备。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;直观例子&lt;/strong&gt;：A+B 展现了进位传播，A–B 展现了借位传播；它们分别是&lt;strong&gt;算术电路的基石&lt;/strong&gt;，而算术电路+控制逻辑=通用机。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因此，A=B 不只是一个小游戏，而是一个极简却&lt;strong&gt;图灵完备&lt;/strong&gt;的语言。&lt;/p&gt;
&lt;p&gt;p.s. &lt;a href="/A2B.html"&gt;一些参考解法&lt;/a&gt;&lt;/p&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML';

    var configscript = document.createElement('script');
    configscript.type = 'text/x-mathjax-config';
    configscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        availableFonts: ['STIX', 'TeX']," +
        "        preferredFont: 'STIX'," +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";

    (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript);
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="理论计算机"/><category term="图灵完备性"/><category term="字符串重写系统"/><category term="A=B"/><category term="Thue"/><category term="Post"/></entry></feed>