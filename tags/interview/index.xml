<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Interview on Maerlyn's Rainbow</title><link>https://wizmann.top/tags/interview/</link><description>Recent content in Interview on Maerlyn's Rainbow</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Sun, 16 Nov 2014 01:03:14 +0000</lastBuildDate><atom:link href="https://wizmann.top/tags/interview/index.xml" rel="self" type="application/rss+xml"/><item><title>Reasons They Recruit</title><link>https://wizmann.top/posts/reasons-they-recruit/</link><pubDate>Sun, 16 Nov 2014 01:03:14 +0000</pubDate><guid>https://wizmann.top/posts/reasons-they-recruit/</guid><description>&lt;blockquote>
&lt;p>From &lt;em>Ace of Programming Interview&lt;/em>, Cpt1 - Hiring Programmers: The Inside Story&lt;/p>&lt;/blockquote>
&lt;h2 id="establish-a-rapport">Establish a Rapport &lt;a href="#establish-a-rapport" class="anchor">🔗&lt;/a>&lt;/h2>&lt;p>For an interviewee, one the the most efficient way to build a rapport is to &lt;strong>try to see things in from the interviewer&amp;rsquo;s perspective&lt;/strong>.&lt;/p>
&lt;ul>
&lt;li>understand the motivation of the interviewer&lt;/li>
&lt;li>establishing a common ground&lt;/li>
&lt;li>adapting your responses appropritely&lt;/li>
&lt;/ul>
&lt;h2 id="reasons-they-recruit">Reasons They Recruit &lt;a href="#reasons-they-recruit" class="anchor">🔗&lt;/a>&lt;/h2>&lt;p>If you know what the reason is and understand the motivation for it, then you can optimize your approach accordingly.&lt;/p>
&lt;h3 id="planned-expansion">Planned Expansion &lt;a href="#planned-expansion" class="anchor">🔗&lt;/a>&lt;/h3>&lt;p>This is a common scenario that the company&amp;rsquo;s expansion require them to take on more programmers accordance with the comming business growth.&lt;/p>
&lt;h4 id="the-interviewer-vs-you">The Interviewer vs. You &lt;a href="#the-interviewer-vs-you" class="anchor">🔗&lt;/a>&lt;/h4>&lt;p>As the hiring is due to a long plan, so the interviewer is unlikely to feel a great sence of urgency. The interviewer will have a well prepared job description (a.k.a JD), or even a person profile. The interviewer are unlikely to compromise their pre-determined requirements. If you are deviate from their expectation, they will probable be less open to giving you the offer.&lt;/p>
&lt;p>Your approach is to &lt;strong>highlight&lt;/strong> these areas which matches to the job profile. That&amp;rsquo;s the easy part.&lt;/p>
&lt;p>If your skills are not a good fit, you can use these three tricks below to change the situation.&lt;/p>
&lt;ul>
&lt;li>Play it down&lt;/li>
&lt;/ul>
&lt;p>Your first choice is to downplay the perceived gap in skills &amp;ndash; including the option of substituting other experience as being of equivalent value.&lt;/p>
&lt;p>For example,&lt;/p>
&lt;blockquote>
&lt;p>“It’s been my experience that it never takes long to learn the basics of a new component library, since, as programmers, we face an endless supply of new components and frameworks both open source and from the major vendors.”&lt;/p>&lt;/blockquote>
&lt;p>or,&lt;/p>
&lt;blockquote>
&lt;p>“One thing I really like about programming is the experience of learning new
technologies and platforms. It’s part of the ongoing attraction of the job.”&lt;/p>&lt;/blockquote>
&lt;p>However, the biggest risk in taking this approach is that you might appear evasive, so be wary of overdoing it.&lt;/p>
&lt;ul>
&lt;li>Take it on the chin&lt;/li>
&lt;/ul>
&lt;p>If you decide to take it on the chin, simply agree with the interviewer&amp;rsquo;s observation and at the same time show your enthusiasm for learning something new.&lt;/p>
&lt;blockquote>
&lt;p>“I don’t have experience of that particular technology but I would really enjoy learning it.”&lt;/p>&lt;/blockquote>
&lt;p>If the interviewer persists, you might feel it appropriate to ask how other developers in the team might learn new things.&lt;/p>
&lt;blockquote>
&lt;p>“Could you describe how the developers in your team generally learn new skills?”&lt;/p>&lt;/blockquote>
&lt;p>Each example the interviewer gives you is an opportunity to show how, as a part of the team, you would &lt;strong>benefit the same approach&lt;/strong> and so acquire the necessary skill.&lt;/p>
&lt;ul>
&lt;li>Understand the requirement&lt;/li>
&lt;/ul>
&lt;p>Your third option is to gently probe the motives underpinning the requirement. The basic idea is that you explore the requirement looking to show that you understand and can meaningfully address the underlying requirement despite lacking a specific skill or experience.&lt;/p>
&lt;p>Whatever approach you take, keep in mind that you should not &lt;strong>dwell on any particular mismatch&lt;/strong>. In particular, keep you comment brief and to the point. The more you talk about it, the more prominence it will have in the interviewer&amp;rsquo;s memory of the interview when they reflect afterward.&lt;/p>
&lt;h3 id="specific-projet">Specific Projet &lt;a href="#specific-projet" class="anchor">🔗&lt;/a>&lt;/h3>&lt;p>When a company spots an opportunity in the market, it might scramble to put
together a development team focused on delivering a solution to capitalize on
the opportunity.&lt;/p>
&lt;h4 id="the-interviewer-vs-you-1">The Interviewer vs. You &lt;a href="#the-interviewer-vs-you-1" class="anchor">🔗&lt;/a>&lt;/h4>&lt;p>The interviewer wants to know that you can work under pressure, and that you are someone who finishes what you start. Sometimes that the pressure to hire can relax the strictness with which the interviewer will match your experience against the details of job specification, although of course you can&amp;rsquo;t assume that case.&lt;/p>
&lt;p>Be ware that although you have to demonstrate how your skills and experience are good match for the position, the interviewer also probable has the need of specific project in mind. You enthusiasm and ability to adapt might count for more than usual. Showing an ability of &lt;strong>grasp key aspect of project&lt;/strong> give you an advantage over others.&lt;/p>
&lt;p>If you are not sure of the motivation of hiring, there&amp;rsquo;s absolutely no harm to ask directly:&lt;/p>
&lt;blockquote>
&lt;p>Could I ask why you are recruiting? Is it for a specific project?&lt;/p>&lt;/blockquote>
&lt;h3 id="replacing-someone">Replacing Someone &lt;a href="#replacing-someone" class="anchor">🔗&lt;/a>&lt;/h3>&lt;p>This is another common reason for hiring simply to replace someone who is leaving or has left the company.&lt;/p>
&lt;h4 id="the-interviewer-vs-you-2">The Interviewer vs. You &lt;a href="#the-interviewer-vs-you-2" class="anchor">🔗&lt;/a>&lt;/h4>&lt;p>An interesting aspect of this situation is that they will probably have experience of a previous person i lling this role, for better or for worse, and will therefore have a list of things they want to ensure the next person will and won’t bring to the role.&lt;/p>
&lt;p>Unless you are very lucky, you can&amp;rsquo;t gather insight into what interviewer like or dislike prior to the interview. What you can do at the interview is ask about &lt;strong>unique challenge for the role&lt;/strong>, things for which you might to need to be on guard, and so on:&lt;/p>
&lt;blockquote>
&lt;p>“Could you tell me a bit about the challenges of this role that might make it different from the usual programming job?”&lt;/p>&lt;/blockquote>
&lt;p>If you ask right questions, you may get vatal clues about the things you need to highlight with regard to your experience and ability:&lt;/p>
&lt;blockquote>
&lt;p>“Can I ask whether there have been issues about how the team has been working together that make this ability particularly important?”&lt;/p>&lt;/blockquote></description></item><item><title>The Checklist of Steve Yegge</title><link>https://wizmann.top/posts/steve-yegge-interview-checklist/</link><pubDate>Sun, 26 Oct 2014 00:24:44 +0000</pubDate><guid>https://wizmann.top/posts/steve-yegge-interview-checklist/</guid><description>&lt;blockquote>
&lt;p>Hey man, I don&amp;rsquo;t know that stuff&lt;/p>&lt;/blockquote>
&lt;blockquote>
&lt;p>Stevey&amp;rsquo;s talking aboooooout&lt;/p>&lt;/blockquote>
&lt;blockquote>
&lt;p>If my boss thinks it&amp;rsquo;s important&lt;/p>&lt;/blockquote>
&lt;blockquote>
&lt;p>I&amp;rsquo;m gonna get fiiiiiiiiiired&lt;/p>&lt;/blockquote>
&lt;blockquote>
&lt;p>Oooh yeah baaaby baaaay-beeeeee&amp;hellip;.&lt;/p>&lt;/blockquote>
&lt;h2 id="非技术部分">非技术部分 &lt;a href="#%e9%9d%9e%e6%8a%80%e6%9c%af%e9%83%a8%e5%88%86" class="anchor">🔗&lt;/a>&lt;/h2>&lt;h3 id="热身">热身 &lt;a href="#%e7%83%ad%e8%ba%ab" class="anchor">🔗&lt;/a>&lt;/h3>&lt;h4 id="好好读一本讲数据结构和算法的书">好好读一本讲数据结构和算法的书 &lt;a href="#%e5%a5%bd%e5%a5%bd%e8%af%bb%e4%b8%80%e6%9c%ac%e8%ae%b2%e6%95%b0%e6%8d%ae%e7%bb%93%e6%9e%84%e5%92%8c%e7%ae%97%e6%b3%95%e7%9a%84%e4%b9%a6" class="anchor">🔗&lt;/a>&lt;/h4>&lt;p>熟悉一些“术语”，可以强化分辨问题的能力。&lt;/p>
&lt;p>Yegge推荐了 Steven S. Skiena 的&lt;a href="http://book.douban.com/subject/4048566/">《算法设计手册》&lt;/a>，而我推荐的是
Udi Manber 的&lt;a href="http://book.douban.com/subject/1436134/">《算法引论》&lt;/a>。&lt;/p>
&lt;p>每一本书都有它的长处短处。找一本评价不错的书，认真读完，肯定会有收获。&lt;/p>
&lt;h4 id="找个朋友来面试你尝试白板编程">找个朋友来面试你，尝试白板编程 &lt;a href="#%e6%89%be%e4%b8%aa%e6%9c%8b%e5%8f%8b%e6%9d%a5%e9%9d%a2%e8%af%95%e4%bd%a0%e5%b0%9d%e8%af%95%e7%99%bd%e6%9d%bf%e7%bc%96%e7%a8%8b" class="anchor">🔗&lt;/a>&lt;/h4>&lt;p>在白纸/白板上编程的体验和在计算机上大有不同。没有条件的情况下，试试Leetcode的“Pick one”，然后在白纸上练习吧！&lt;/p>
&lt;h4 id="在面试前保持警醒充分热身">在面试前保持警醒，充分热身 &lt;a href="#%e5%9c%a8%e9%9d%a2%e8%af%95%e5%89%8d%e4%bf%9d%e6%8c%81%e8%ad%a6%e9%86%92%e5%85%85%e5%88%86%e7%83%ad%e8%ba%ab" class="anchor">🔗&lt;/a>&lt;/h4>&lt;ul>
&lt;li>读读书记&lt;/li>
&lt;li>喝点咖啡，这可以让你的思路快一些&lt;/li>
&lt;/ul>
&lt;h3 id="心理准备">心理准备 &lt;a href="#%e5%bf%83%e7%90%86%e5%87%86%e5%a4%87" class="anchor">🔗&lt;/a>&lt;/h3>&lt;h4 id="保持谦逊开明专注的态度">保持谦逊、开明、专注的态度 &lt;a href="#%e4%bf%9d%e6%8c%81%e8%b0%a6%e9%80%8a%e5%bc%80%e6%98%8e%e4%b8%93%e6%b3%a8%e7%9a%84%e6%80%81%e5%ba%a6" class="anchor">🔗&lt;/a>&lt;/h4>&lt;p>不要质疑面试官的水平，但是也不要害怕问问题。问一个蠢问题总比沉默僵持半小时要好的多。况且，一个好问题也许还是一个加分项。&lt;/p>
&lt;p>并且，不要尝试去转移话题，把注意力放在问题本身。&lt;/p>
&lt;h4 id="了解面试官对代码的要求">了解面试官对代码的要求 &lt;a href="#%e4%ba%86%e8%a7%a3%e9%9d%a2%e8%af%95%e5%ae%98%e5%af%b9%e4%bb%a3%e7%a0%81%e7%9a%84%e8%a6%81%e6%b1%82" class="anchor">🔗&lt;/a>&lt;/h4>&lt;p>有的面试官不会要求你写代码，但是他们希望你在回答问题时写一点代码。如果你不能确定，不妨直接问一下。&lt;/p>
&lt;p>不同的面试官对于面试代码风格的要求是不一致的，对于苛刻的面试官，最好提高对代码的要求。并且仔细检查。&lt;/p>
&lt;h4 id="问问题的艺术">问问题的艺术 &lt;a href="#%e9%97%ae%e9%97%ae%e9%a2%98%e7%9a%84%e8%89%ba%e6%9c%af" class="anchor">🔗&lt;/a>&lt;/h4>&lt;p>在面试中的有不清楚的地方是可以问的（并且问问题是被鼓励的），有时候还可以去和面试官确认自己是不是在正确的方向上。&lt;/p>
&lt;p>什么都不问，直接冲到白板前开始写代码有可能会留下“设计无用”的坏印象。所以，即使你确定自己怎么做，也要先说说自己是怎么样的。但是，也不要说的太多。&lt;/p>
&lt;h4 id="自带高级装备">自带高级装备 &lt;a href="#%e8%87%aa%e5%b8%a6%e9%ab%98%e7%ba%a7%e8%a3%85%e5%a4%87" class="anchor">🔗&lt;/a>&lt;/h4>&lt;ul>
&lt;li>细头可擦马克笔&lt;/li>
&lt;li>铅笔和橡皮&lt;/li>
&lt;/ul>
&lt;p>在面试中要使用一切可以使用的资源，例如白板上的空间管理。&lt;/p>
&lt;h2 id="技术部分">技术部分 &lt;a href="#%e6%8a%80%e6%9c%af%e9%83%a8%e5%88%86" class="anchor">🔗&lt;/a>&lt;/h2>&lt;h3 id="算法">算法 &lt;a href="#%e7%ae%97%e6%b3%95" class="anchor">🔗&lt;/a>&lt;/h3>&lt;ul>
&lt;li>大O&lt;/li>
&lt;li>排序算法 —— 快速排序和归并排序&lt;/li>
&lt;li>哈希表&lt;/li>
&lt;li>树 —— 构造和遍历&lt;/li>
&lt;li>至少熟悉一种平衡二叉树 —— 必须掌握实现细节&lt;/li>
&lt;li>图 —— 存储与遍历，Dijkstra和A*&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>每次遇到问题，首先应当考虑的就是图算法。它们是任何关系最基本、最灵活的表示方法，任何有点意思的设计问题可以说有一半的机会涉及图算法。只有在你百分之百确定没办法用图算法来解的时候，才能去考虑其它方案。这条建议一定要牢记在心！&lt;/p>&lt;/blockquote>
&lt;ul>
&lt;li>NP问题 —— 应该知道NP完全问题是什么意思&lt;/li>
&lt;li>好好读数据结构书，&lt;strong>能记多少记多少&lt;/strong>&lt;/li>
&lt;li>离散数学 —— 计数问题、概率问题&lt;/li>
&lt;/ul>
&lt;h3 id="计算机基础知识">计算机基础知识 &lt;a href="#%e8%ae%a1%e7%ae%97%e6%9c%ba%e5%9f%ba%e7%a1%80%e7%9f%a5%e8%af%86" class="anchor">🔗&lt;/a>&lt;/h3>&lt;h4 id="操作系统">操作系统 &lt;a href="#%e6%93%8d%e4%bd%9c%e7%b3%bb%e7%bb%9f" class="anchor">🔗&lt;/a>&lt;/h4>&lt;ul>
&lt;li>进程、线程、并发&lt;/li>
&lt;li>锁、互斥锁、信号量，管程机制&lt;/li>
&lt;li>死锁和活锁&lt;/li>
&lt;li>进程和线程各需要什么资源、上下文切换、调度&lt;/li>
&lt;/ul>
&lt;p>作者推荐了 Doug Lea 的&lt;a href="http://book.douban.com/subject/1244021/">《Java并发编程》&lt;/a>，做为一个Java hater，我决定还是勉为其难的看一下吧。:)&lt;/p>
&lt;h4 id="语言">语言 &lt;a href="#%e8%af%ad%e8%a8%80" class="anchor">🔗&lt;/a>&lt;/h4>&lt;p>至少要熟练掌握一种编程语言，最好是C++或者Java。并且&lt;strong>一定要对那门语言的细节有相当程度的了解&lt;/strong>。&lt;/p>
&lt;h4 id="其它的基础知识">其它的基础知识 &lt;a href="#%e5%85%b6%e5%ae%83%e7%9a%84%e5%9f%ba%e7%a1%80%e7%9f%a5%e8%af%86" class="anchor">🔗&lt;/a>&lt;/h4>&lt;p>在作者的文章中没有提到的，但是也许比较重要的知识。&lt;/p>
&lt;ul>
&lt;li>CS专业第二重要的知识 —— 编译原理&lt;/li>
&lt;li>计算机网络 —— TCP/IP协议也许是个重点&lt;/li>
&lt;li>数据库的一些知识&lt;/li>
&lt;li>MapReduce？&lt;/li>
&lt;/ul>
&lt;h2 id="其它">其它 &lt;a href="#%e5%85%b6%e5%ae%83" class="anchor">🔗&lt;/a>&lt;/h2>&lt;p>剩下的基本就是看脸了。。。&lt;/p>
&lt;p>&lt;img src="https://github.com/Wizmann/assets/raw/master/wizmann-pic/fa4b0cfd335bae28abf23d34fc6e84ee" alt="puzzles">&lt;/p>
&lt;h2 id="总结">总结 &lt;a href="#%e6%80%bb%e7%bb%93" class="anchor">🔗&lt;/a>&lt;/h2>&lt;blockquote>
&lt;p>好好热身。实际工作只会让你反应迟钝！&lt;/p>&lt;/blockquote></description></item><item><title>System Design - 最热门的IP地址</title><link>https://wizmann.top/posts/hottest-ip-address/</link><pubDate>Fri, 08 Aug 2014 01:25:54 +0000</pubDate><guid>https://wizmann.top/posts/hottest-ip-address/</guid><description>&lt;h2 id="写在前面">写在前面 &lt;a href="#%e5%86%99%e5%9c%a8%e5%89%8d%e9%9d%a2" class="anchor">🔗&lt;/a>&lt;/h2>&lt;p>问题是非常流行的，也确实流行了一阵的system-design问题。在&lt;a href="http://www.zhihu.com/question/19805967">知乎&lt;/a>上再次被人提起。然后我非常欣赏&lt;a href="http://zhi.hu/3gJb">陈硕的回答&lt;/a>。所以要写一篇文章，记下自己的感想。&lt;/p>
&lt;h2 id="问题">问题 &lt;a href="#%e9%97%ae%e9%a2%98" class="anchor">🔗&lt;/a>&lt;/h2>&lt;p>海量数据算法:如何从超过10G的记录IP地址的日志中，较快的找出登录次数最多的一个IP？&lt;/p>
&lt;h2 id="银弹">银弹？ &lt;a href="#%e9%93%b6%e5%bc%b9" class="anchor">🔗&lt;/a>&lt;/h2>&lt;p>面对这种system-design问题，尤其是这种，&lt;strong>非高并发、非实时&lt;/strong>的问题，很多人会采用_map-reduce_ —— 解决system-design问题的银弹。&lt;/p>
&lt;p>我对map-reduce的理解非常肤浅，但是可以解释一下大概的流程。&lt;/p>
&lt;ol>
&lt;li>将日志进行分片。把hash(ip)相同的ip地址分到同一个片中。（注：这里的hash并不是签名函数，只是一个分片标示）&lt;/li>
&lt;li>分片后的日志的大小会小很多，可以方便的进行排序，记数。&lt;/li>
&lt;li>然后再从各个片中，统计出最热门的IP地址。（或TopK的IP地址）&lt;/li>
&lt;/ol>
&lt;p>如果不满意我的答案的话，推荐&lt;a href="http://book.douban.com/subject/19934150/">Mining of Massive Datasets&lt;/a>一书，其中对map-reduce算法做一番不错的介绍。&lt;/p>
&lt;h2 id="正确的分析姿势">正确的分析姿势 &lt;a href="#%e6%ad%a3%e7%a1%ae%e7%9a%84%e5%88%86%e6%9e%90%e5%a7%bf%e5%8a%bf" class="anchor">🔗&lt;/a>&lt;/h2>&lt;h3 id="业务实体">业务实体 &lt;a href="#%e4%b8%9a%e5%8a%a1%e5%ae%9e%e4%bd%93" class="anchor">🔗&lt;/a>&lt;/h3>&lt;blockquote>
&lt;p>业务实体拥有四种主要的组件： 信息模型、生命周期模型、访问策略以及通知。&lt;/p>&lt;/blockquote>
&lt;p>换句话说，业务实体就是题目中提到的“名词”。&lt;/p>
&lt;p>在本题中，业务实体有：&lt;/p>
&lt;ul>
&lt;li>IP地址（默认为ipv4）&lt;/li>
&lt;li>最热门IP地址&lt;/li>
&lt;/ul>
&lt;h3 id="业务应用">业务应用 &lt;a href="#%e4%b8%9a%e5%8a%a1%e5%ba%94%e7%94%a8" class="anchor">🔗&lt;/a>&lt;/h3>&lt;p>业务应用指的是当前场景的&lt;strong>特殊&lt;/strong>应用，以及业务实体的关联关系。&lt;/p>
&lt;p>在本问题中，业务应用指的是：&lt;/p>
&lt;ul>
&lt;li>找到&lt;strong>最热门&lt;/strong>的IP地址&lt;/li>
&lt;li>大数据量，10G的日志文件 —— 不方便在内存中进行操作
（在动辙上百G的服务器面前，10G的数据量真是弱爆了^_^)&lt;/li>
&lt;/ul>
&lt;h3 id="物理">物理 &lt;a href="#%e7%89%a9%e7%90%86" class="anchor">🔗&lt;/a>&lt;/h3>&lt;p>物理指的是数据的物理模型，包括数据结构、数据库表等。&lt;/p>
&lt;p>在本题中，指的是对IP地址存储和记数的数据结构。&lt;/p>
&lt;h3 id="让我们做一下分析">让我们做一下分析 &lt;a href="#%e8%ae%a9%e6%88%91%e4%bb%ac%e5%81%9a%e4%b8%80%e4%b8%8b%e5%88%86%e6%9e%90" class="anchor">🔗&lt;/a>&lt;/h3>&lt;p>本题中，业务实体的特点是：&lt;/p>
&lt;ul>
&lt;li>IPv4可以由一个uint32_t来表示&lt;/li>
&lt;li>ip地址是稀疏的
&lt;ul>
&lt;li>大部分ip地址的访问次数非常少（长尾）&lt;/li>
&lt;li>很多ip地址是保留地址，所以不可能出现在日志中&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>业务应用的特点是：&lt;/p>
&lt;ul>
&lt;li>“最热门”表示要求得精确解，而不是满意解&lt;/li>
&lt;li>内存限制&lt;/li>
&lt;/ul>
&lt;p>应用的物理结构的特点是： 支持存储与记数&lt;/p>
&lt;h2 id="无代码无真相">无代码无真相 &lt;a href="#%e6%97%a0%e4%bb%a3%e7%a0%81%e6%97%a0%e7%9c%9f%e7%9b%b8" class="anchor">🔗&lt;/a>&lt;/h2>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;assert.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;stdint.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;vector&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">static_assert&lt;/span>(&lt;span style="color:#66d9ef">sizeof&lt;/span>(&lt;span style="color:#66d9ef">void&lt;/span>&lt;span style="color:#f92672">*&lt;/span>) &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">8&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;64-bit only.&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>std&lt;span style="color:#f92672">::&lt;/span>vector&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">uint8_t&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> counts_;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">IPcount&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">uint32_t&lt;/span> ip;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">uint32_t&lt;/span> count;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">bool&lt;/span> &lt;span style="color:#66d9ef">operator&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>(IPcount rhs) &lt;span style="color:#66d9ef">const&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> { &lt;span style="color:#66d9ef">return&lt;/span> ip &lt;span style="color:#f92672">&amp;lt;&lt;/span> rhs.ip; }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>std&lt;span style="color:#f92672">::&lt;/span>vector&lt;span style="color:#f92672">&amp;lt;&lt;/span>IPcount&lt;span style="color:#f92672">&amp;gt;&lt;/span> overflows_;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>IPcount top;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">addOverflow&lt;/span>(&lt;span style="color:#66d9ef">uint32_t&lt;/span> ip)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> IPcount newItem &lt;span style="color:#f92672">=&lt;/span> { ip, &lt;span style="color:#ae81ff">256&lt;/span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">auto&lt;/span> it &lt;span style="color:#f92672">=&lt;/span> std&lt;span style="color:#f92672">::&lt;/span>lower_bound(overflows_.begin(), overflows_.end(), newItem);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (it &lt;span style="color:#f92672">!=&lt;/span> overflows_.end() &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> it&lt;span style="color:#f92672">-&amp;gt;&lt;/span>ip &lt;span style="color:#f92672">==&lt;/span> ip)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> it&lt;span style="color:#f92672">-&amp;gt;&lt;/span>count&lt;span style="color:#f92672">++&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> assert(it&lt;span style="color:#f92672">-&amp;gt;&lt;/span>count &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;you need larger count variable&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> newItem.count &lt;span style="color:#f92672">=&lt;/span> it&lt;span style="color:#f92672">-&amp;gt;&lt;/span>count;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> overflows_.insert(it, newItem);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (newItem.count &lt;span style="color:#f92672">&amp;gt;&lt;/span> top.count)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> top &lt;span style="color:#f92672">=&lt;/span> newItem;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">add&lt;/span>(&lt;span style="color:#66d9ef">uint32_t&lt;/span> ip)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (counts_[ip] &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">255&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> addOverflow(ip);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> counts_[ip]&lt;span style="color:#f92672">++&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (counts_[ip] &lt;span style="color:#f92672">&amp;gt;&lt;/span> top.count)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> top.ip &lt;span style="color:#f92672">=&lt;/span> ip;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> top.count &lt;span style="color:#f92672">=&lt;/span> counts_[ip];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">uint32_t&lt;/span> &lt;span style="color:#a6e22e">getMostFrequenntIP&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> top.ip;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> assert(counts_.max_size() &lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#ae81ff">0xFFFFFFFFUL&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> counts_.resize(&lt;span style="color:#ae81ff">1L&lt;/span> &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#ae81ff">32&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> printf(&lt;span style="color:#e6db74">&amp;#34;%zd&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, counts_.size());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> add(&lt;span style="color:#ae81ff">0x1&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> add(&lt;span style="color:#ae81ff">0x2&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> add(&lt;span style="color:#ae81ff">0x2&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> (size_t i &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>; i &lt;span style="color:#f92672">&amp;lt;&lt;/span> (&lt;span style="color:#ae81ff">1L&lt;/span> &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#ae81ff">32&lt;/span>)&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>; &lt;span style="color:#f92672">++&lt;/span>i)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> add(&lt;span style="color:#ae81ff">0x3&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> printf(&lt;span style="color:#e6db74">&amp;#34;%08x %u&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, top.ip, top.count);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="从代码说开来">从代码说开来 &lt;a href="#%e4%bb%8e%e4%bb%a3%e7%a0%81%e8%af%b4%e5%bc%80%e6%9d%a5" class="anchor">🔗&lt;/a>&lt;/h3>&lt;p>这段代码不算最漂亮，有几个小槽点，但也算是非常优雅的。&lt;/p>
&lt;p>从思路上说，这段代码注意到了我们刚才分析到的，这个问题的业务特点。&lt;/p>
&lt;ol>
&lt;li>ipv4地址可以存在uint32_t中，无需存储字符串&lt;/li>
&lt;li>ip地址是稀疏的，所以使用一层uint_8进行哈希记数，对于少数的热门ip再进行uint32_t计数
（同时考虑了ip地址的稀疏性以及内存的限制，并且对内存的优雅使用，可以提高缓存的命中率，提高效率）&lt;/li>
&lt;li>使用精确计数，获得正确解&lt;/li>
&lt;/ol>
&lt;h3 id="代码留给我们的思考题">代码留给我们的思考题 &lt;a href="#%e4%bb%a3%e7%a0%81%e7%95%99%e7%bb%99%e6%88%91%e4%bb%ac%e7%9a%84%e6%80%9d%e8%80%83%e9%a2%98" class="anchor">🔗&lt;/a>&lt;/h3>&lt;blockquote>
&lt;p>练习：找出 worse case，让运行时间长达几分钟甚至十几分钟，然后提出并实施改进措施&lt;/p>&lt;/blockquote>
&lt;p>由于我们拿不出real world中的data，所以很多分析都是纸上谈兵，不过一切的实践也都是从纸上谈兵开始。&lt;/p>
&lt;ul>
&lt;li>题目中的&lt;code>std::vector&amp;lt;IPcount&amp;gt; overflows_;&lt;/code>使用&lt;code>unordered_map&lt;/code>更好，减少查找的时间（O(logN) =&amp;gt; O(1)），并且减少插入的时间（O(N) =&amp;gt; O(1)）&lt;/li>
&lt;li>&lt;code>std::vector&amp;lt;uint8_t&amp;gt; counts_;&lt;/code>可以在适当的情况调整为&lt;code>uint16_t&lt;/code>，可以减少哈希节点生成对于内存的频繁申请。&lt;/li>
&lt;/ul>
&lt;h2 id="后记">后记 &lt;a href="#%e5%90%8e%e8%ae%b0" class="anchor">🔗&lt;/a>&lt;/h2>&lt;p>题目中的分析有很多是“执果索因”的成果，毕竟反推比正推要更容易一点。&lt;/p>
&lt;p>想要从反推提升为正推，真的需要良好的发散思维以及敏锐的洞察力。因为面试时，没人会把题目帮你写在纸上。&lt;/p>
&lt;p>话说，我才知道ipv6是128位的。那么当题目中的ip地址为ipv6时，又会有什么好方法呢？&lt;/p>
&lt;h2 id="参考链接">参考链接 &lt;a href="#%e5%8f%82%e8%80%83%e9%93%be%e6%8e%a5" class="anchor">🔗&lt;/a>&lt;/h2>&lt;ul>
&lt;li>&lt;a href="http://www.infoq.com/cn/news/2010/05/BEDL">介绍：业务实体和业务实体定义语言&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>玩玩算法题1：Sherlock and Queries</title><link>https://wizmann.top/posts/interview-problem-1-sherlock-and-queries/</link><pubDate>Sat, 19 Jul 2014 11:00:38 +0000</pubDate><guid>https://wizmann.top/posts/interview-problem-1-sherlock-and-queries/</guid><description>&lt;h2 id="题目大意">题目大意 &lt;a href="#%e9%a2%98%e7%9b%ae%e5%a4%a7%e6%84%8f" class="anchor">🔗&lt;/a>&lt;/h2>&lt;p>给你三个数组:A[N], B[M], C[M]。让你按如下pseudo-code给出的规则计算，求出最终A[N]每一项的值。&lt;/p>
&lt;pre tabindex="0">&lt;code>for i = 1 to M do
for j = 1 to N do
if j % B[i] == 0 then
A[j] = A[j] * C[i]
endif
end do
end do
&lt;/code>&lt;/pre>&lt;h2 id="数据范围">数据范围 &lt;a href="#%e6%95%b0%e6%8d%ae%e8%8c%83%e5%9b%b4" class="anchor">🔗&lt;/a>&lt;/h2>&lt;p>1≤ N,M ≤ 10^5&lt;/p>
&lt;p>1 ≤ B[i] ≤ N&lt;/p>
&lt;p>1 ≤ A[i],C[i] ≤10^5&lt;/p>
&lt;h2 id="brute-force解法">Brute-Force解法 &lt;a href="#brute-force%e8%a7%a3%e6%b3%95" class="anchor">🔗&lt;/a>&lt;/h2>&lt;p>暴力解法就是题目中给出的范例，时间复杂度为O(M * N)。那么有没有更优化的解法。&lt;/p>
&lt;h2 id="筛法">筛法 &lt;a href="#%e7%ad%9b%e6%b3%95" class="anchor">🔗&lt;/a>&lt;/h2>&lt;p>从&lt;code>j % B[i] == 0&lt;/code>这个关系我们可以很容易的联想到&lt;a href="https://zh.wikipedia.org/zh-cn/%E5%9F%83%E6%8B%89%E6%89%98%E6%96%AF%E7%89%B9%E5%B0%BC%E7%AD%9B%E6%B3%95">筛法&lt;/a>，我们不必要从1到N每次去尝试是否可以被B[i]整除，而是直接在数组A的第&lt;code>B[i], B[i] * 2 ... B[i] * k&lt;/code>项上直接乘上C[i]。&lt;/p>
&lt;p>此时，我们的时间复杂度为O(k)，k = sum(N / B[i])&lt;/p>
&lt;p>如果数组B中的值两两不等。那么k的最大值就是调和级数&lt;code>N + N / 2 + N / 3 + ... + N / N&lt;/code>，其值约为&lt;code>N * lnN&lt;/code>。&lt;/p>
&lt;p>但是如果数组B中的值有大量相等，并且值非常小（如1或2等），那么此时的时间复杂度仍然会退化到O(N * M)。&lt;/p>
&lt;h2 id="让我们再优化一小下">让我们再优化一小下 &lt;a href="#%e8%ae%a9%e6%88%91%e4%bb%ac%e5%86%8d%e4%bc%98%e5%8c%96%e4%b8%80%e5%b0%8f%e4%b8%8b" class="anchor">🔗&lt;/a>&lt;/h2>&lt;p>在上文我们分析到，如果数组B中的值有大量相等时，程序的时间复杂度会严重退化。那么我们的优化方法是什么呢？&lt;/p>
&lt;p>从上面的pseudo-code我们可以看出，如果B[i] == B[i&amp;rsquo;]，那么它们会对A的同一项进行操作，于是我们就把有着相同值的B[i]合并在一起，而操作数C[i]累乘。此时，我们的时间复杂度就会接近于最优值O(N * lnN)。&lt;/p>
&lt;h2 id="show-me-the-code">Show me the code &lt;a href="#show-me-the-code" class="anchor">🔗&lt;/a>&lt;/h2>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;cstdio&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;cstdlib&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;cstring&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;algorithm&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">using&lt;/span> &lt;span style="color:#66d9ef">namespace&lt;/span> std;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#define print(x) cout &amp;lt;&amp;lt; x &amp;lt;&amp;lt; endl
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#define input(x) cin &amp;gt;&amp;gt; x
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">typedef&lt;/span> &lt;span style="color:#66d9ef">long&lt;/span> &lt;span style="color:#66d9ef">long&lt;/span> llint;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> SIZE &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">100010&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> MOD &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1000000007&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">node&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> vb, vc;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">friend&lt;/span> &lt;span style="color:#66d9ef">bool&lt;/span> &lt;span style="color:#66d9ef">operator&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span> (&lt;span style="color:#66d9ef">const&lt;/span> node&lt;span style="color:#f92672">&amp;amp;&lt;/span> a, &lt;span style="color:#66d9ef">const&lt;/span> node&lt;span style="color:#f92672">&amp;amp;&lt;/span> b) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> a.vb &lt;span style="color:#f92672">&amp;lt;&lt;/span> b.vb;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>node nodes[SIZE];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int&lt;/span> A[SIZE];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int&lt;/span> n, m;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">solve&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> llint g &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> pre &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">int&lt;/span> i &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>; i &lt;span style="color:#f92672">&amp;lt;=&lt;/span> m &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>; i&lt;span style="color:#f92672">++&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (nodes[i].vb &lt;span style="color:#f92672">==&lt;/span> pre) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> g &lt;span style="color:#f92672">*=&lt;/span> nodes[i].vc;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> g &lt;span style="color:#f92672">%=&lt;/span> MOD;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (nodes[i].vb &lt;span style="color:#f92672">!=&lt;/span> pre &lt;span style="color:#f92672">||&lt;/span> i &lt;span style="color:#f92672">==&lt;/span> m &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> b &lt;span style="color:#f92672">=&lt;/span> pre;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">int&lt;/span> j &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>; b &lt;span style="color:#f92672">*&lt;/span> j &lt;span style="color:#f92672">&amp;lt;=&lt;/span> n &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> b &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>; j&lt;span style="color:#f92672">++&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> pa &lt;span style="color:#f92672">=&lt;/span> b &lt;span style="color:#f92672">*&lt;/span> j;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> A[pa] &lt;span style="color:#f92672">=&lt;/span> llint(A[pa]) &lt;span style="color:#f92672">*&lt;/span> g &lt;span style="color:#f92672">%&lt;/span> MOD;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> g &lt;span style="color:#f92672">=&lt;/span> nodes[i].vc;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pre &lt;span style="color:#f92672">=&lt;/span> nodes[i].vb;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> input(n &lt;span style="color:#f92672">&amp;gt;&amp;gt;&lt;/span> m);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">int&lt;/span> i &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>; i &lt;span style="color:#f92672">&amp;lt;=&lt;/span> n; i&lt;span style="color:#f92672">++&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> scanf(&lt;span style="color:#e6db74">&amp;#34;%d&amp;#34;&lt;/span>, &lt;span style="color:#f92672">&amp;amp;&lt;/span>A[i]);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">int&lt;/span> i &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>; i &lt;span style="color:#f92672">&amp;lt;=&lt;/span> m; i&lt;span style="color:#f92672">++&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> scanf(&lt;span style="color:#e6db74">&amp;#34;%d&amp;#34;&lt;/span>, &lt;span style="color:#f92672">&amp;amp;&lt;/span>(nodes[i].vb));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">int&lt;/span> i &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>; i &lt;span style="color:#f92672">&amp;lt;=&lt;/span> m; i&lt;span style="color:#f92672">++&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> scanf(&lt;span style="color:#e6db74">&amp;#34;%d&amp;#34;&lt;/span>, &lt;span style="color:#f92672">&amp;amp;&lt;/span>(nodes[i].vc));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sort(nodes &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>, nodes &lt;span style="color:#f92672">+&lt;/span> m &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> solve();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">int&lt;/span> i &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>; i &lt;span style="color:#f92672">&amp;lt;=&lt;/span> n; i&lt;span style="color:#f92672">++&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> printf(&lt;span style="color:#e6db74">&amp;#34;%d &amp;#34;&lt;/span>, A[i] &lt;span style="color:#f92672">%&lt;/span> MOD);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> puts(&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="关键点">关键点 &lt;a href="#%e5%85%b3%e9%94%ae%e7%82%b9" class="anchor">🔗&lt;/a>&lt;/h2>&lt;ul>
&lt;li>是否了解筛法，并且可以从题目的提示中联想到筛法&lt;/li>
&lt;li>是否了解调和级数估计时间复杂度的方法&lt;/li>
&lt;li>是否了解算法的best-case和worst-case&lt;/li>
&lt;li>是否可以了解算法的瓶颈，并优化自己的算法&lt;/li>
&lt;/ul>
&lt;h2 id="算法分析用到的一些近似公式">算法分析用到的一些近似公式 &lt;a href="#%e7%ae%97%e6%b3%95%e5%88%86%e6%9e%90%e7%94%a8%e5%88%b0%e7%9a%84%e4%b8%80%e4%ba%9b%e8%bf%91%e4%bc%bc%e5%85%ac%e5%bc%8f" class="anchor">🔗&lt;/a>&lt;/h2>&lt;p>&lt;img src="https://github.com/Wizmann/assets/raw/master/wizmann-tk-pic/book-algorithm-approximate-functions.png" alt="cheetsheet">&lt;/p>
&lt;ul>
&lt;li>本图来自《算法 第四版》&lt;/li>
&lt;/ul>
&lt;h2 id="原题链接">原题链接 &lt;a href="#%e5%8e%9f%e9%a2%98%e9%93%be%e6%8e%a5" class="anchor">🔗&lt;/a>&lt;/h2>&lt;p>&lt;a href="https://www.hackerrank.com/challenges/sherlock-and-queries">戳我么么哒&lt;/a>&lt;/p></description></item><item><title>A simple problem - World at War</title><link>https://wizmann.top/posts/world-at-war/</link><pubDate>Thu, 12 Jun 2014 17:42:51 +0000</pubDate><guid>https://wizmann.top/posts/world-at-war/</guid><description>&lt;h2 id="background">Background &lt;a href="#background" class="anchor">🔗&lt;/a>&lt;/h2>&lt;blockquote>
&lt;p>This problem is from the book &amp;ldquo;&lt;a href="http://book.douban.com/subject/19952400/">Algorithm 4th edition&lt;/a>&amp;rdquo; (Exersise 4.1.10)&lt;/p>&lt;/blockquote>
&lt;p>There are N cities and M undirected roads between those cities. People can travel to any city along the roads.&lt;/p>
&lt;p>One day, a war breaks out. Our cities are under attack! As we can&amp;rsquo;t defend all these N cities, the commander wants you to find the least important city, which means that if this city fell to the enemy, the traffic among other cities would not be affected.&lt;/p>
&lt;p>If there are multiple answers, print any one of them. If there&amp;rsquo;s no that kind of city, print -1.&lt;/p>
&lt;p>&lt;img src="https://github.com/Wizmann/assets/raw/master/wizmann-tk-pic/blog-world-at-war.png" alt="world-at-war">&lt;/p>
&lt;h2 id="the-spanning-tree-of-a-graph">The spanning tree of a graph &lt;a href="#the-spanning-tree-of-a-graph" class="anchor">🔗&lt;/a>&lt;/h2>&lt;blockquote>
&lt;p>It is a spanning tree of a graph G if it spans G (that is, it includes every vertex of G) and is a subgraph of G (every edge in the tree belongs to G).
&amp;ndash; wikipedia&lt;/p>&lt;/blockquote>
&lt;p>&lt;img src="https://github.com/Wizmann/assets/raw/master/wizmann-tk-pic/blog-spanning-tree.png" alt="spanning-tree">&lt;/p>
&lt;p>For example, there is a spanning tree of a graph. These nodes in green is leaf node. So it is easy to know that if we remove a leaf node, the graph won&amp;rsquo;t be affect. The rest of the graph (and the spanning tree) are still connected.&lt;/p>
&lt;p>So the answer is here.&lt;/p>
&lt;h2 id="how-to-generate-a-spanning-tree">How to generate a spanning tree &lt;a href="#how-to-generate-a-spanning-tree" class="anchor">🔗&lt;/a>&lt;/h2>&lt;p>There are multiple ways to generate a spanning three of a undirected graph. The most famous algorithm is &lt;strong>prim&lt;/strong>, which will generate a MST(minimum spanning tree) with O(n**2) time complexity.&lt;/p>
&lt;p>However, MST is not needed in this scenario, because an arbitrary spanning tree is enough to find one of the leaf nodes.&lt;/p>
&lt;p>Depth first search (a.k.a DFS) is one of the simplest way to generate the spanning tree. We just start from arbitrary node of the graph, and search through the graph until it comes to a dead-end &amp;ndash; the leaf node. Then print the answer.&lt;/p>
&lt;p>Problem solved.&lt;/p>
&lt;h2 id="show-me-the-code">Show me the code &lt;a href="#show-me-the-code" class="anchor">🔗&lt;/a>&lt;/h2>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Solution&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> least_important_city(vector&lt;span style="color:#f92672">&amp;lt;&lt;/span>vector&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">int&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#f92672">&amp;gt;&lt;/span> g) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (g.size() &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> n &lt;span style="color:#f92672">=&lt;/span> g.size();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> vector&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">bool&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> visit;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> visit.resize(n);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> fill(visit.begin(), visit.end(), false);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> now &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">while&lt;/span> (true) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">bool&lt;/span> flag &lt;span style="color:#f92672">=&lt;/span> false;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> visit[now] &lt;span style="color:#f92672">=&lt;/span> true;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">auto&lt;/span> iter &lt;span style="color:#f92672">=&lt;/span> g[now].begin();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> iter &lt;span style="color:#f92672">!=&lt;/span> g[now].end();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">++&lt;/span>iter) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> next &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">*&lt;/span>iter;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#f92672">!&lt;/span>visit[next]) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> now &lt;span style="color:#f92672">=&lt;/span> next;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> flag &lt;span style="color:#f92672">=&lt;/span> true;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#f92672">!&lt;/span>flag) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> now;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item></channel></rss>