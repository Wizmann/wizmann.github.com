<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Mosca on Maerlyn's Rainbow</title><link>https://wizmann.top/tags/mosca/</link><description>Recent content in Mosca on Maerlyn's Rainbow</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Fri, 11 Nov 2016 22:04:13 +0000</lastBuildDate><atom:link href="https://wizmann.top/tags/mosca/index.xml" rel="self" type="application/rss+xml"/><item><title>Mosca源码阅读</title><link>https://wizmann.top/posts/mosca/</link><pubDate>Fri, 11 Nov 2016 22:04:13 +0000</pubDate><guid>https://wizmann.top/posts/mosca/</guid><description>&lt;h2 id="先在前面">先在前面 &lt;a href="#%e5%85%88%e5%9c%a8%e5%89%8d%e9%9d%a2" class="anchor">🔗&lt;/a>&lt;/h2>&lt;p>最近心血来潮看了看一个比较有名的开源MQTT broker —— Mosca。不读不知道，读完才恍然大悟 —— 这是啥破玩意（哈哈）。&lt;/p>
&lt;p>由于我是nodejs的超级初学者，所以本文会比较浅显，并且只关注big picture，不陷入细节。&lt;/p>
&lt;p>这里先规定几个缩写，让后面行文时少打一点字：&lt;/p>
&lt;ul>
&lt;li>MQ - MessageQueue&lt;/li>
&lt;li>Asco - Ascoltatori&lt;/li>
&lt;/ul>
&lt;h2 id="ascoltatori---听者">Ascoltatori - 听者 &lt;a href="#ascoltatori---%e5%90%ac%e8%80%85" class="anchor">🔗&lt;/a>&lt;/h2>&lt;p>Ascoltatori是一个意大利语单词，翻译成英文就是listener。&lt;/p>
&lt;blockquote>
&lt;p>这里严重吐槽作者取名字的方式，mosca这种短小的外语单词我们是可以接受的，你说ascoltatori这么长的意大利语单词，你让我们怎么记。 &lt;br>
差评，退款，邮费也要退！&lt;/p>&lt;/blockquote>
&lt;p>Asco模块的作用是提供一个一致的MQ的抽象，供上层broker使用。&lt;/p>
&lt;p>这里我们只分析基于Redis的实现，原因是Redis我相对比较熟悉，功能也比较简单。&lt;/p>
&lt;h3 id="接口分析">接口分析 &lt;a href="#%e6%8e%a5%e5%8f%a3%e5%88%86%e6%9e%90" class="anchor">🔗&lt;/a>&lt;/h3>&lt;p>&lt;code>RedisAscoltatore&lt;/code>有三个半接口：&lt;/p>
&lt;ul>
&lt;li>subscribe&lt;/li>
&lt;li>unsubscribe&lt;/li>
&lt;li>publish&lt;/li>
&lt;/ul>
&lt;p>剩下的那半个是模块的构造函数。接下来我们分别分析接口的功能及其实现。&lt;/p>
&lt;h3 id="subscribe接口">Subscribe接口 &lt;a href="#subscribe%e6%8e%a5%e5%8f%a3" class="anchor">🔗&lt;/a>&lt;/h3>&lt;p>&lt;code>this._sub&lt;/code>是&lt;code>RedisAscoltatore&lt;/code>用来subscribe的连接。首先我们要向MQ订阅指定的topic。&lt;/p>
&lt;p>之后我们要在本地维护一个&lt;code>topic&lt;/code>到&lt;code>callback&lt;/code>s的映射关系。因为Mosca是一个broker，需要将end user订阅的topic的内容完整的发送到用户那里去，每一个用户在Asco里，用一个callback函数来代表。&lt;/p>
&lt;p>用户可以订阅一个特定的topic，也可以使用一个pattern来订阅一系列的topic。&lt;/p>
&lt;p>&lt;img src="https://github.com/Wizmann/assets/raw/master/wizmann-pic/public/16-11-10/27730251.jpg" alt="">&lt;/p>
&lt;p>从图中我们可以看出，右上方的client订阅了&lt;code>h?llo&lt;/code>（相当于regex中的&lt;code>h.llo&lt;/code>）。右下方的client订阅了&lt;code>h[abcde]llo&lt;/code>。而左边的client向&lt;code>hello&lt;/code> topic发布了一个消息。此时右边的两个client都收到了这条消息，其中pmessage代表这条消息是有pattern的，第二个参数代表了client订阅的pattern topic，而第三个参数代表了这条消息的实际topic，最后一个参数是消息的正文。&lt;/p>
&lt;p>所以我们在维护topic-client列表时，只需要维护pattern topic（没有pattern的topic可以视做只匹配当前topic的patter）。当有消息到来时，我们使用pattern topic映射到clients，之后再进行下一步操作。&lt;/p>
&lt;p>这里Asco使用了一个叫做&lt;a href="https://github.com/davedoesdev/qlobber">&lt;code>qlobber&lt;/code>&lt;/a>的库，它使用Trie树对topic进行匹配。我们在上文已经说到，Asco是一个统一化的MQ抽象层，所以在不同的MQ中所使用的不同的pattern，我们都需要将其统一成同一种语法进行匹配。而qlobber，在Asco中被封装成&lt;code>RedisAscoltatore&lt;/code>，就是用来统一不同的语法的。&lt;/p>
&lt;h3 id="unsubscribe接口">Unsubscribe接口 &lt;a href="#unsubscribe%e6%8e%a5%e5%8f%a3" class="anchor">🔗&lt;/a>&lt;/h3>&lt;p>有订阅就有退订，这个接口与上面的是对应的关系。我们只需要将订阅的顺序反过来做一遍就可以了。这个函数相对简单，就不多说了。&lt;/p>
&lt;h3 id="publish接口">Publish接口 &lt;a href="#publish%e6%8e%a5%e5%8f%a3" class="anchor">🔗&lt;/a>&lt;/h3>&lt;p>这里的publish，代表是用户的publish的操作。用户数据在“去MQ特色化”之后，会经由&lt;code>this._client&lt;/code>发布到相应的redis服务。最后调用用户的callback。&lt;/p>
&lt;p>这里再吐一个槽，为啥订阅连接叫&lt;code>this._sub&lt;/code>，发布连接叫&lt;code>this._client&lt;/code>。难道你不造pub/sub才是真正的对应吗？&lt;/p>
&lt;h3 id="构造函数">构造函数 &lt;a href="#%e6%9e%84%e9%80%a0%e5%87%bd%e6%95%b0" class="anchor">🔗&lt;/a>&lt;/h3>&lt;p>构造函数虽然说是“半个接口”，但是代码量和重要性，却高于上面的接口。因为redis的pub/sub模型是单工的，需要两个连接才可以完成。所以两条连接需要单独初始化。&lt;/p>
&lt;h4 id="this_startpub">this._startPub &lt;a href="#this_startpub" class="anchor">🔗&lt;/a>&lt;/h4>&lt;p>我们先从简单的开始。&lt;/p>
&lt;p>这个太简单了，没的可说。就是拉一条电话线，成功了之后改一下状态。&lt;/p>
&lt;p>没了。&lt;/p>
&lt;h4 id="this_startsub">this._startSub &lt;a href="#this_startsub" class="anchor">🔗&lt;/a>&lt;/h4>&lt;p>这个比pub要复杂一点。首先，我们还是要拉一条到redis的电话线（连接）。之后注册消息到来时的回调。&lt;/p>
&lt;p>我们来看一看这个回调是怎样的流程。&lt;/p>
&lt;p>首先还是“去MQ特色化”，将Redis的pattern语法化归成Asco的内部语法。再通过pattern取出相应的callbacks，将消息通过callbacks传递给相应的用户。&lt;/p>
&lt;p>这里补充一下，&lt;code>(sub, topic, payload)&lt;/code>三个参数如果命名为&lt;code>(pattern, topic, payload)&lt;/code>其实会更清晰。&lt;/p>
&lt;p>这个类其实原理上并不复杂，但是由于其需要将不同MQ的pattern转换为统一的语法，所以在中间加了一层，导致复杂性的提升。如果我们只做一个专用的broker，代码其实可以写的更明朗的。&lt;/p>
&lt;h2 id="mosca---苍蝇">Mosca - 苍蝇 &lt;a href="#mosca---%e8%8b%8d%e8%9d%87" class="anchor">🔗&lt;/a>&lt;/h2>&lt;p>与Mosquito相对，Mosca是苍蝇的意思。Mosca是Asco的上层封装，与其一起组成了一个MQTT broker，与end user直接交互。&lt;/p>
&lt;p>MQ的单一职责是负责消息的发布/订阅，Mosca在其上添加了：&lt;/p>
&lt;ol>
&lt;li>在线离线状态检测&lt;/li>
&lt;li>离线消息的支持&lt;/li>
&lt;li>客户端持久化&lt;/li>
&lt;li>一些权限检测接口&lt;/li>
&lt;/ol>
&lt;p>在这里，我们从Mosca的工作流程出发，主要关注离线消息和客户端持久化这两个broker中非常重要的特性。&lt;/p>
&lt;h3 id="持久化">持久化 &lt;a href="#%e6%8c%81%e4%b9%85%e5%8c%96" class="anchor">🔗&lt;/a>&lt;/h3>&lt;p>这里我们还是只看Redis的实现。其实Redis并不是真正的持久化，不过who cares。&lt;/p>
&lt;p>这里的持久化就包括了离线消息和客户端持久化两个概念。&lt;/p>
&lt;p>离线消息使用&lt;code>packet:{client_id}&lt;/code>为key进行保存，当用户离线时，broker会将消息先保存在redis中，当用户重新上线时，就将保存好的消息一口气推送过去。&lt;/p>
&lt;p>客户端持久化稍微复杂一点。客户端在broker中的状态是其订阅的topic，一般情况下，broker会一直保存用户所订阅的topic，以便保存用户的离线信息。当broker掉电或重启时，我们需要从持久化层将用户的状态重新load到内存。此时，我们使用&lt;code>client:sub:{client_id}&lt;/code>为key进行保存。&lt;/p>
&lt;h3 id="整体工作流程">整体工作流程 &lt;a href="#%e6%95%b4%e4%bd%93%e5%b7%a5%e4%bd%9c%e6%b5%81%e7%a8%8b" class="anchor">🔗&lt;/a>&lt;/h3>&lt;p>在Mosca启动时，先会注册一些事件，比如“用户登录”，“用户下线”，“用户订阅”等。这些消息由配置文件决定是否下发。&lt;/p>
&lt;p>这种设计是为了方便broker的scale out，我们可以在一个MQ上面部署多个broker，这些broker通过MQ的&lt;code>$SYS&lt;/code>信道进行通信。&lt;/p>
&lt;p>当Mosca启动完成后，我们像上面一样，重点关注broker的三个重要事件：&lt;/p>
&lt;ul>
&lt;li>subscribe&lt;/li>
&lt;li>publish&lt;/li>
&lt;li>unsubscribe&lt;/li>
&lt;/ul>
&lt;p>这些事件理论上是Asco的封装，添加了权限控制接口、更复杂的事件，当然还有持久化的支持。例如&lt;code>subscribe&lt;/code>事件，除了调用Asco之外，还将用户的这次订阅记录在了持久层里。&lt;/p>
&lt;p>&lt;code>publish&lt;/code>事件则是先将数据包存放在持久层，再调用Asco的publish函数。&lt;code>unsubscribe&lt;/code>也是同样的道理。&lt;/p>
&lt;h3 id="补一张结构图">补一张结构图 &lt;a href="#%e8%a1%a5%e4%b8%80%e5%bc%a0%e7%bb%93%e6%9e%84%e5%9b%be" class="anchor">🔗&lt;/a>&lt;/h3>&lt;p>&lt;img src="https://github.com/Wizmann/assets/raw/master/wizmann-pic/public/16-11-11/55787779.jpg" alt="">&lt;/p>
&lt;h3 id="mosca的可扩展性">Mosca的可扩展性 &lt;a href="#mosca%e7%9a%84%e5%8f%af%e6%89%a9%e5%b1%95%e6%80%a7" class="anchor">🔗&lt;/a>&lt;/h3>&lt;p>根据我浅薄的理解，Mosca是可以支持scale out的。也就是我们可以在同一个MQ（或同一个MQ抽象）上部署多个Mosca，以服务更多的用户。但是一个用户必须严格对应一个shard，否则会出现消息的重复。这个问题可以在Client端解决，但是不应该是一种常态，只应该在用户迁移或者比较大的系统变动的时候才出现。&lt;/p>
&lt;p>由于Mosca的持久化层是以Client为Key的，所以不支持多MQ的模式。MQ的扩展需要由MQ自己来完成，对外提供一个统一的抽象即可。不过这种功能，并不被所有MQ所支持。&lt;/p>
&lt;h2 id="disclaimer">Disclaimer &lt;a href="#disclaimer" class="anchor">🔗&lt;/a>&lt;/h2>&lt;p>真是nodejs小白以及MQ小白，上面说的哪里不对，请帮忙提出来。强烈建议不要以本文中的任何观点不加测试的应用到生产环境当中去。&lt;/p></description></item></channel></rss>