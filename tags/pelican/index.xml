<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Pelican on Maerlyn's Rainbow</title><link>https://wizmann.top/tags/pelican/</link><description>Recent content in Pelican on Maerlyn's Rainbow</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Thu, 09 Jan 2014 14:55:00 +0000</lastBuildDate><atom:link href="https://wizmann.top/tags/pelican/index.xml" rel="self" type="application/rss+xml"/><item><title>用Misaka做为pelican的Markdown解析器</title><link>https://wizmann.top/posts/misaka-pelican/</link><pubDate>Thu, 09 Jan 2014 14:55:00 +0000</pubDate><guid>https://wizmann.top/posts/misaka-pelican/</guid><description>&lt;h2 id="为啥">为啥？ &lt;a href="#%e4%b8%ba%e5%95%a5" class="anchor">🔗&lt;/a>&lt;/h2>&lt;p>Pelican内置&lt;a href="http://pythonhosted.org/Markdown/">python-markdown&lt;/a>做为默认解析器，用来将用户的&lt;code>Markdown&lt;/code>格式的文章转为网页格式展示。&lt;/p>
&lt;p>&lt;strong>然而&lt;/strong>，&lt;code>python-markdown&lt;/code>模块的解析逻辑有严重的Bug。例如一个&lt;code>未标明语言的代码块&lt;/code>会被标出很多莫名奇妙的错误；还有&lt;code>C++&lt;/code>中的指针符号&lt;code>*&lt;/code>会被解析为斜体的符号&lt;code>*SomeText*&lt;/code>，在代码块中会产生大量和语法高亮无关的斜体字。&lt;/p>
&lt;p>在网上寻找了很久的答案，终于找到了一篇&lt;a href="http://qiita.com/5t111111/items/4614b207f3942d05e55c">日文博客&lt;/a>，其中讲到了使用&lt;a href="http://misaka.61924.nl/">misaka&lt;/a>来替换&lt;code>python-markdown&lt;/code>来解析日志。&lt;/p>
&lt;h2 id="两难的metadata">两难的Metadata &lt;a href="#%e4%b8%a4%e9%9a%be%e7%9a%84metadata" class="anchor">🔗&lt;/a>&lt;/h2>&lt;p>我使用了上文提到的日志中的方法来替换解析器，效果拔群，日志中的解析问题完全解决了。但是日志中的&lt;code>Metadata&lt;/code>并没有被隐藏，而是显示在了日志的最前面，非常影响心情（强迫症？）。&lt;/p>
&lt;p>于是我分析了解析模块的代码。原来的解析模块使用了&lt;code>python-markdown&lt;/code>的一个处理&lt;code>Metadata&lt;/code>的&lt;a href="https://github.com/waylan/Python-Markdown/blob/master/markdown/extensions/meta.py">扩展&lt;/a>，用来解析&lt;code>Metadata&lt;/code>，并从正文中删除这一部分。&lt;/p>
&lt;p>但是&lt;code>Misaka&lt;/code>并不支持这种语法，同时也没有处理&lt;code>Metadata&lt;/code>的插件。&lt;/p>
&lt;p>于是我想可不可以把这两种&lt;code>Markdown&lt;/code>解析器的长处合并一下，从而实现最终的目标。&lt;/p>
&lt;h2 id="小小的改动">小小的改动 &lt;a href="#%e5%b0%8f%e5%b0%8f%e7%9a%84%e6%94%b9%e5%8a%a8" class="anchor">🔗&lt;/a>&lt;/h2>&lt;p>编辑&lt;code>pelican&lt;/code>的&lt;code>readers.py&lt;/code>文件。&lt;/p>
&lt;p>（我是直接改的&lt;code>/usr/local/lib/python2.7/dist-packages/pelican&lt;/code>下的文件，不太优雅，不过这个改动也是非常Dirty的，只是用来解决问题）&lt;/p>
&lt;p>首先引用&lt;code>Misaka&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">try&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">from&lt;/span> markdown &lt;span style="color:#f92672">import&lt;/span> Markdown
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">import&lt;/span> misaka
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">import&lt;/span> pygments
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">except&lt;/span> &lt;span style="color:#a6e22e">ImportError&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Markdown &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">False&lt;/span> &lt;span style="color:#75715e"># NOQA&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>再修改&lt;code>class MarkdownReader&lt;/code>，改变解析逻辑&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">read&lt;/span>(self, source_path):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&amp;#34;Parse content and metadata of markdown files&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">#提取Metadata&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>_md &lt;span style="color:#f92672">=&lt;/span> Markdown(extensions&lt;span style="color:#f92672">=&lt;/span>self&lt;span style="color:#f92672">.&lt;/span>extensions)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">with&lt;/span> pelican_open(source_path) &lt;span style="color:#66d9ef">as&lt;/span> text:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> content &lt;span style="color:#f92672">=&lt;/span> self&lt;span style="color:#f92672">.&lt;/span>_md&lt;span style="color:#f92672">.&lt;/span>convert(text)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> metadata &lt;span style="color:#f92672">=&lt;/span> self&lt;span style="color:#f92672">.&lt;/span>_parse_metadata(self&lt;span style="color:#f92672">.&lt;/span>_md&lt;span style="color:#f92672">.&lt;/span>Meta)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">#自定义Misaka解析器&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> renderer &lt;span style="color:#f92672">=&lt;/span> self&lt;span style="color:#f92672">.&lt;/span>BleepRenderer()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> misaka_md &lt;span style="color:#f92672">=&lt;/span> misaka&lt;span style="color:#f92672">.&lt;/span>Markdown(renderer,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> extensions&lt;span style="color:#f92672">=&lt;/span>misaka&lt;span style="color:#f92672">.&lt;/span>EXT_FENCED_CODE &lt;span style="color:#f92672">|&lt;/span> misaka&lt;span style="color:#f92672">.&lt;/span>EXT_NO_INTRA_EMPHASIS)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> misaka_content &lt;span style="color:#f92672">=&lt;/span> misaka_md&lt;span style="color:#f92672">.&lt;/span>render(text)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> misaka_content, metadata
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>然后我们写一个自定义的&lt;code>Misaka&lt;/code>解析器，用来去除&lt;code>Metadata&lt;/code>信息&lt;/p>
&lt;p>这段代码是基于上文说的那篇日志和&lt;code>Misaka&lt;/code>的官方文档，有问题的话可以去查阅。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">BleepRenderer&lt;/span>(misaka&lt;span style="color:#f92672">.&lt;/span>HtmlRenderer, misaka&lt;span style="color:#f92672">.&lt;/span>SmartyPants):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">#预处理函数&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">preprocess&lt;/span>(self, text):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">#使用一个FakeClass来骗过对象元素的检查&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">#同时我们只是删除Metadata，并不使用它，所以这样的修改是可以接受的&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">FakeClass&lt;/span>(object):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">__init__&lt;/span>(self):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>Meta &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">None&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">#调用Markdown的插件来处理Metadata&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">import&lt;/span> markdown
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> mp &lt;span style="color:#f92672">=&lt;/span> markdown&lt;span style="color:#f92672">.&lt;/span>extensions&lt;span style="color:#f92672">.&lt;/span>meta&lt;span style="color:#f92672">.&lt;/span>MetaPreprocessor()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> mp&lt;span style="color:#f92672">.&lt;/span>markdown &lt;span style="color:#f92672">=&lt;/span> FakeClass()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> lines &lt;span style="color:#f92672">=&lt;/span> mp&lt;span style="color:#f92672">.&lt;/span>run(text&lt;span style="color:#f92672">.&lt;/span>split(&lt;span style="color:#e6db74">&amp;#39;&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#e6db74">&amp;#39;&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span>&lt;span style="color:#f92672">.&lt;/span>join(lines)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">#告诉Misaka如何处理代码，使用pygments进行高亮处理&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">block_code&lt;/span>(self, text, lang):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#f92672">not&lt;/span> lang:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#e6db74">&amp;#39;&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;&lt;/span>&lt;span style="color:#e6db74">%s&lt;/span>&lt;span style="color:#e6db74">&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span> &lt;span style="color:#f92672">%&lt;/span> escape(text&lt;span style="color:#f92672">.&lt;/span>strip())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> lexer &lt;span style="color:#f92672">=&lt;/span> pygments&lt;span style="color:#f92672">.&lt;/span>lexers&lt;span style="color:#f92672">.&lt;/span>get_lexer_by_name(lang, stripall&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">True&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> formatter &lt;span style="color:#f92672">=&lt;/span> pygments&lt;span style="color:#f92672">.&lt;/span>formatters&lt;span style="color:#f92672">.&lt;/span>HtmlFormatter()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> pygments&lt;span style="color:#f92672">.&lt;/span>highlight(text, lexer, formatter)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="结语">结语 &lt;a href="#%e7%bb%93%e8%af%ad" class="anchor">🔗&lt;/a>&lt;/h2>&lt;p>这个修改真TMD&lt;strong>糙快猛&lt;/strong>啊！&lt;/p>
&lt;h2 id="文件下载">文件下载 &lt;a href="#%e6%96%87%e4%bb%b6%e4%b8%8b%e8%bd%bd" class="anchor">🔗&lt;/a>&lt;/h2>&lt;p>修改好的&lt;code>readers.py&lt;/code>文件：
&lt;a href="https://s.yunio.com/_Lt!Lb">戳我&lt;/a>&lt;/p></description></item></channel></rss>