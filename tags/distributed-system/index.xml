<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Distributed System on Maerlyn's Rainbow</title><link>https://wizmann.top/tags/distributed-system/</link><description>Recent content in Distributed System on Maerlyn's Rainbow</description><generator>Hugo</generator><language>zh-CN</language><lastBuildDate>Wed, 27 Dec 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://wizmann.top/tags/distributed-system/index.xml" rel="self" type="application/rss+xml"/><item><title>[tl;dr] 论文阅读：Borg - Large-scale cluster management at Google</title><link>https://wizmann.top/posts/tl-dr-borg/</link><pubDate>Wed, 27 Dec 2023 00:00:00 +0000</pubDate><guid>https://wizmann.top/posts/tl-dr-borg/</guid><description>&lt;ul>
&lt;li>
&lt;h2 id="系统概览">系统概览&lt;/h2>
&lt;ul>
&lt;li>Borg是谷歌开发的一种高效的集群管理系统，旨在优化资源利用率和提高系统的可靠性及可用性
&lt;ul>
&lt;li>隐藏资源管理细节与故障处理，允许用户专注于应用程序的开发&lt;/li>
&lt;li>保证非常高的可靠性和可用性，以支持用户应用程序的高可靠性和高可用性&lt;/li>
&lt;li>支持运行来自众多应用的数十万个作业，并高效运行于数以万计的机器上&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;h2 id="用户视角">用户视角&lt;/h2>
&lt;ul>
&lt;li>用户通过定义&lt;em>job&lt;/em>和&lt;em>task&lt;/em>与Borg进行交互
&lt;ul>
&lt;li>一个&lt;em>job&lt;/em>由运行相同程序的一个或多个&lt;em>task&lt;/em>组成&lt;/li>
&lt;li>每一个&lt;em>job&lt;/em>运行于一个&lt;em>Borg cell&lt;/em>（单元）之中，&lt;em>cell&lt;/em>是一组机器的集合，是Borg管理的基本单元&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Borg的工作负载
&lt;ul>
&lt;li>长期运行的时延敏感型服务&lt;/li>
&lt;li>批处理作业&lt;/li>
&lt;li>运行在实体机上，避免VM的虚拟化开销&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;em>Allocs&lt;/em>
&lt;ul>
&lt;li>预留给一项或多项任务的一组资源&lt;/li>
&lt;li>&lt;em>Alloc&lt;/em>可以将不同 &lt;em>jobs&lt;/em> 的 &lt;em>tasks&lt;/em> 聚集到同一台机器上&lt;/li>
&lt;li>如果一个 &lt;em>alloc&lt;/em> 必须重新分配到另外一台主机，属于它的 &lt;em>task(s)&lt;/em> 也会同它一起重新被调度&lt;/li>
&lt;li>一旦创建一个 &lt;em>alloc&lt;/em> 集合，就可以提交一个或多个 jobs 运行其中&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>命名服务和监控
&lt;ul>
&lt;li>Borg包含一个稳定的 &lt;em>Borg命名服务&lt;/em> (BNS)，包括 cell 名，job 名和 task id&lt;/li>
&lt;li>Borg将 &lt;em>task&lt;/em> 的主机名和端口写入 Chubby，用于 RPC 系统查找 task endpoint&lt;/li>
&lt;li>Borg还会将 &lt;em>job&lt;/em> size与其运行状态写入Chubby，便于load balancer平衡流量&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;h2 id="borg的架构">Borg的架构&lt;/h2>
&lt;ul>
&lt;li>&lt;em>Borgmaster&lt;/em>
&lt;ul>
&lt;li>主管理进程
&lt;ul>
&lt;li>逻辑上的“单点”，有5个在线备份，使用Paxos选举master&lt;/li>
&lt;li>状态存储在内存中，并且备份在高可靠性的Paxos存储中&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>调度进程
&lt;ul>
&lt;li>可行性检查
&lt;ul>
&lt;li>用于找到满足任务约束、具备足够可用资源的一组机器&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>打分（scoring）
&lt;ul>
&lt;li>在“可行机器”中根据用户偏好，为机器打分&lt;/li>
&lt;li>打分策略
&lt;ul>
&lt;li>worst fit（E-PVN的变种）会将任务分散到不同的机器上
&lt;ul>
&lt;li>有余量应对流量的尖峰&lt;/li>
&lt;li>会导致资源的碎片化，阻碍大型&lt;em>task&lt;/em>的部署&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>best fit，会尽量“紧凑”的使用机器，以减少资源碎片
&lt;ul>
&lt;li>便于大型&lt;em>task&lt;/em>的部署&lt;/li>
&lt;li>错误的资源估计会被“惩罚”，尤其影响突发的负载&lt;/li>
&lt;li>影响利于富裕计算资源的batch jobs&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>混合模型，尽量减少“受困资源”，即因为其它资源被完全占用而无法分配出去的资源&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>优化
&lt;ul>
&lt;li>启动时间优化
&lt;ul>
&lt;li>中位数启动时间为25s，80%用于安装相关依赖&lt;/li>
&lt;li>将相关&lt;em>task&lt;/em>优先分配到拥有相关依赖的机器上&lt;/li>
&lt;li>使用 &lt;em>tree-like&lt;/em> 或 &lt;em>torrent-like&lt;/em> 机制，并发的分发相关依赖&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>计算开销优化
&lt;ul>
&lt;li>使得Borg能管理更多的机器&lt;/li>
&lt;li>打分缓存：将可行性检查和打分结果缓存&lt;/li>
&lt;li>等价类：同一 &lt;em>job&lt;/em> 中的 &lt;em>task&lt;/em> 通常具有类似的约束，因此可以将多个任务视为一个等价类&lt;/li>
&lt;li>松弛随机化：计算所有机器的可行性和得分代价太高，可以随机取样一批机器，然后选择其中一个“足够好”的机器&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;em>Borglet&lt;/em>
&lt;ul>
&lt;li>&lt;em>Borglet&lt;/em> 是运行在每台机器上的本地代理，管理本地的任务和资源&lt;/li>
&lt;li>&lt;em>Borgmaster&lt;/em> 会周期性地向每一个Borglet拉取当前状态，易于控制通信速度，避免“恢复风暴”&lt;/li>
&lt;li>为了性能可扩展性，每个Borgmaster副本会运行无状态的 &lt;em>link shard&lt;/em> 去处理与部分Borglet通信
&lt;ul>
&lt;li>当 &lt;em>Borgmaster&lt;/em> 重新选举时，&lt;em>link shard&lt;/em> 会重新划分分区&lt;/li>
&lt;li>&lt;em>link shard&lt;/em> 会聚合和压缩信息，仅仅向被Borgmaster报告状态的更新，以此减少更新负载&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>如果 &lt;em>Borglet&lt;/em> 多轮没有响应资源查询，则会被标记为down。运行其上的任务会被重新调度到其他机器。如果恢复通信，则 &lt;em>Borgmaster&lt;/em> 会通知 &lt;em>Borglet&lt;/em> 杀死已经重新调度的任务，以此保证任务的唯一性&lt;/li>
&lt;li>Borglet与Borgmaster失去联系时，仍会继续处理相关任务。以应对 &lt;em>Borgmaster&lt;/em> 的暂时失效&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;h2 id="可靠性">可靠性&lt;/h2>
&lt;ul>
&lt;li>自动重新调度器被驱逐的任务&lt;/li>
&lt;li>将任务分散到不同的失败域中&lt;/li>
&lt;li>限制一个作业中同时失败任务的个数和中断率&lt;/li>
&lt;li>使用声明式的期望状态表示和幂等的变更操作，以便无害地重新提交请求&lt;/li>
&lt;li>对于机器级别的失效，限制其重新调度的速率，因为难以区分大规模机器故障和网络分区&lt;/li>
&lt;li>避免重试引发错误的&amp;lt;任务-机器&amp;gt;匹配对&lt;/li>
&lt;li>关键数据持久化，写入磁盘&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;h2 id="资源利用和效率">资源利用和效率&lt;/h2>
&lt;ul>
&lt;li>评估方法
&lt;ul>
&lt;li>&lt;em>cell compaction&lt;/em>：通过移除机器来找出给定工作负载能适应的最小的单元大小，然后反复从头开始重新打包工作负载，以确保不会因错误的配置而陷入困境&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>“单元共享”：在同一台机器上运行生产任务和非生产任务，以优化资源使用
&lt;ul>
&lt;li>实验表明，共享资源会影响实际的CPU计算性能&lt;/li>
&lt;li>但是在节约成本的巨大优势上面，CPU性能的退化是可以容忍的&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>“大型单元”：允许超大型计算任务，减少任务的碎片化&lt;/li>
&lt;li>细粒度资源请求
&lt;ul>
&lt;li>以千分之一的CPU核，和内存、磁盘的字节数为资源请求的最小单元&lt;/li>
&lt;li>相比预设资源分配（套餐），可以避免额外的资源开销&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>资源回收
&lt;ul>
&lt;li>对于可以容忍低质量资源的工作（例如批处理作业），Borg会评估任务将使用的资源，并回收空闲资源&lt;/li>
&lt;li>最初的预留值与其资源请求一致，然后300秒之后，会慢慢降低到实际使用率外加一个安全边缘&lt;/li>
&lt;li>如果利用率超过资源预留值，预留值会快速增长。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;h2 id="隔离与安全性">隔离与安全性：&lt;/h2>
&lt;ul>
&lt;li>安全隔离
&lt;ul>
&lt;li>使用Linux chroot jail在共享同一台机器的任务之间确保安全性&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>性能隔离
&lt;ul>
&lt;li>基于cgroup的资源容器，允许详细的资源核算并执行限制，防止任务相互干扰，确保稳定和可预测的性能&lt;/li>
&lt;li>使用&lt;em>appclass&lt;/em>，尽可能保证延迟敏感服务的资源使用&lt;/li>
&lt;li>区分&lt;em>可压缩资源&lt;/em> 和 &lt;em>不可压缩资源&lt;/em>
&lt;ul>
&lt;li>可压缩资源（compressiable） - CPU%和Disk IO，可以暂时限流&lt;/li>
&lt;li>不可压缩资源（non-compressible） - 内存、磁盘占用，需要清除优先级低的线程&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>内核的CPU调度器，允许根据每个资源容器的负载状况来动态决定是否要驱逐低优先级任务，同时避免多个高优先级任务在一个cpu上争抢
&lt;ul>
&lt;li>仍在尝试cpu调度时更好的考虑线程亲和、NUMA亲和等策略&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;h2 id="经验教训">经验教训：&lt;/h2>
&lt;ul>
&lt;li>
&lt;h3 id="负面经验">负面经验&lt;/h3>
&lt;ul>
&lt;li>&lt;em>Job&lt;/em>作为&lt;em>Task&lt;/em>的唯一分组机制的局限性
&lt;ul>
&lt;li>缺乏将整个多&lt;em>Job&lt;/em>服务作为单一实体进行管理，或引用服务相关&lt;em>Job&lt;/em>（如Canary与Prod滚动更新）的方式&lt;/li>
&lt;li>用户会在&lt;em>Job&lt;/em>名称中编入拓扑，并构建外部管理工具来解析这些名称，这导致了滚动更新和作业调整大小等问题的不灵活语义&lt;/li>
&lt;li>Kubernetes通过使用标签组织其调度单元（Pods），提供了更多灵活性&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>单个IP地址带来的复杂性
&lt;ul>
&lt;li>同一台机器上的所有任务共享该机器的单个IP地址和端口空间&lt;/li>
&lt;li>导致端口也成为一种资源，在调度时候需要被考虑&lt;/li>
&lt;li>Kubernetes采用了更友好的方法，每个Pod和服务都获取自己的IP地址，从而简化了这些复杂性。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>偏向于高级用户
&lt;ul>
&lt;li>Borg提供了一整套面向“高级用户”的功能，允许他们细致调整程序运行方式&lt;/li>
&lt;li>这种API的丰富性使得对于“普通”用户更加困难，并限制了其演变&lt;/li>
&lt;li>Google构建了自动化工具，对于允许“失败”的应用程序，通过实验来探测适当配置&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;h3 id="积极经验">积极经验&lt;/h3>
&lt;ul>
&lt;li>Allocs是有用的
&lt;ul>
&lt;li>Kubernetes中的Alloc等效物是Pod，它是一个资源包，用于一个或多个容器，总是被调度到同一台机器上并可以共享资源&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>集群管理不仅是任务管理
&lt;ul>
&lt;li>尽管Borg的主要角色是管理任务和机器的生命周期，但运行在Borg上的应用程序从许多其他集群服务中受益，包括命名和负载均衡&lt;/li>
&lt;li>Kubernetes使用服务抽象支持命名和负载均衡，服务有一个名称和一组由标签选择器定义的动态Pods。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>自省至关重要
&lt;ul>
&lt;li>尽管Borg几乎总是“运行良好”，但当出现问题时，找到根本原因可能具有挑战性&lt;/li>
&lt;li>Borg的重要设计决策之一是向所有用户展示调试信息&lt;/li>
&lt;li>Kubernetes旨在复制Borg的许多内省技术，例如，它配备了cAdvisor等工具进行资源监控和基于Elasticsearch/Kibana和Fluentd的日志聚合&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>主控节点是分布式系统的核心
&lt;ul>
&lt;li>Borgmaster最初被设计为一个单体系统，但随着时间的推移，它变得更像是一个内核，位于协作管理用户作业的一系列服务的中心&lt;/li>
&lt;li>Kubernetes架构更进一步，它有一个核心的API服务器，仅负责处理请求和操纵底层状态对象，集群管理逻辑被构建为小型可组合的微服务，这些服务是这个API服务器的客户端​​&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://research.google/pubs/large-scale-cluster-management-at-google-with-borg/" target="_blank" rel="noopener">论文&lt;/a>&lt;/li>
&lt;/ul>
&lt;div class="alert alert-info" role="alert">本文部分内容由ChatGPT4生成&lt;/div></description></item><item><title>[tl;dr] 论文阅读：Rarest First and Choke Algorithms Are Enough</title><link>https://wizmann.top/posts/tl-dr-rarest-first-and-choke-algorithms-are-enough/</link><pubDate>Fri, 08 Dec 2023 00:00:00 +0000</pubDate><guid>https://wizmann.top/posts/tl-dr-rarest-first-and-choke-algorithms-are-enough/</guid><description>&lt;ul>
&lt;li>
&lt;h2 id="基本概念">基本概念&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>Peer&lt;/strong>：BitTorrent P2P下载的参与者&lt;/li>
&lt;li>&lt;strong>Leecher&lt;/strong>：“吸血者”，仍在下载过程中的peer&lt;/li>
&lt;li>&lt;strong>Seeder&lt;/strong>：做种者，下载完成后还在继续做种的peer&lt;/li>
&lt;li>&lt;strong>Piece&lt;/strong>：Piece是文件的数据单元。当文件被分享时，它被分割成多个大小相等的片段，称为&amp;quot;pieces&amp;quot;。这些pieces是peer间传输的基本单位&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;h2 id="最稀有优先算法rarest-first-algorithm">&amp;ldquo;最稀有优先算法&amp;rdquo;（Rarest First Algorithm）&lt;/h2>
&lt;ul>
&lt;li>&amp;ldquo;最稀有优先算法&amp;rdquo;（Rarest First Algorithm）是BitTorrent协议中的一个关键策略，用于决定哪些数据块（piece）首先被下载和分享。这个算法的核心目标是优化整个网络中数据的分布，确保更快的下载速度和更高的效率。&lt;/li>
&lt;li>
&lt;h3 id="基本原理">基本原理&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>数据块的稀有度&lt;/strong>
&lt;ul>
&lt;li>在BitTorrent网络中，文件被分割成许多小的数据块。
&lt;ul>
&lt;li>“最稀有优先”算法的目的是优先下载那些网络中数量最少的数据块。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>选择下载的块&lt;/strong>：
&lt;ul>
&lt;li>当一个peer加入Torrent网络，并开始下载文件时，它首先会从所有连接的peer那里获取有关哪些数据块是稀有的信息。
&lt;ul>
&lt;li>然后，它优先请求下载那些最稀有的数据块。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>动态调整&lt;/strong>：
&lt;ul>
&lt;li>随着下载的进行，每个peer会不断更新和重新评估网络中每个数据块的稀有度，并相应地调整其下载优先级。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;h3 id="算法的重要性">算法的重要性&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>提高效率&lt;/strong>：通过优先下载最稀有的块，这个算法帮助加快了文件的整体下载速度。一旦最稀有的块被更多peer获取，它们就更容易被进一步分享和分发。&lt;/li>
&lt;li>&lt;strong>防止瓶颈&lt;/strong>：如果没有这个算法，某些数据块可能会变得很难获得，导致下载过程在接近完成时放慢，这被称为“最后一块问题”（Last Piece Problem）。&lt;/li>
&lt;li>&lt;strong>促进平等分享&lt;/strong>：这种方法鼓励peer分享它们拥有的稀有块，从而提高了整个网络中的合作和资源共享。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;h3 id="实际应用">实际应用&lt;/h3>
&lt;ul>
&lt;li>在BitTorrent网络中，这个算法对于确保高效的数据分发至关重要。它不仅提高了单个用户的下载速度，而且还提高了整个网络的效率，确保了资源在用户之间的均衡分配。通过这种方式，BitTorrent网络能够有效地避免瓶颈和提高数据的可用性，即使在面对大量用户的情况下也是如此。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;h3 id="结论">结论&lt;/h3>
&lt;ul>
&lt;li>最稀有优先算法是BitTorrent网络高效运行的关键组成部分。它通过智能地选择下载和分享网络中最稀有的数据块，提高了资源的整体分布和可用性，确保了快速、平衡的文件共享。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;h2 id="窒息算法choking-algorithm">&amp;ldquo;窒息算法&amp;rdquo;（Choking Algorithm）&lt;/h2>
&lt;ul>
&lt;li>&amp;ldquo;窒息算法&amp;rdquo;（Choking Algorithm）是BitTorrent协议中的一个关键组成部分，用于管理多个peer之间的数据传输。这个算法帮助优化带宽的使用，确保网络中的资源被高效合理地分配。其核心目的是促进peer间的合作和数据的快速分发。&lt;/li>
&lt;li>
&lt;h3 id="窒息算法的基本原理">窒息算法的基本原理&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>选择和窒息（Choking and Unchoking）&lt;/strong>
&lt;ul>
&lt;li>在BitTorrent网络中，每个peer同时维护着一组“窒息”（choked）和“未窒息”（unchoked）的peer名单。
&lt;ul>
&lt;li>被“窒息”的peer无法从窒息方接收文件数据，而“未窒息”的peer可以进行数据交换。&lt;/li>
&lt;li>这种状态是动态的，peer根据算法定期更新它们的窒息/未窒息peer名单。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>利益驱动的决策&lt;/strong>
&lt;ul>
&lt;li>算法核心是“利益驱动”（tit-for-tat）策略，即peer更倾向于向那些能给它提供数据的peer提供数据。
&lt;ul>
&lt;li>这种方法鼓励peer分享数据，因为分享越多，获得数据的机会也越大。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>优化器&lt;/strong>：
&lt;ul>
&lt;li>除了基于交换数据的量来决定窒息状态外，大多数BitTorrent客户端还实现了一个“优化器”（Optimizer），用于探索新的peer。
&lt;ul>
&lt;li>通常，这是通过定期“未窒息”一个随机选择的peer来实现的，即使它在过去的数据交换中表现不佳或没有数据交换。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>窒息周期&lt;/strong>：
&lt;ul>
&lt;li>peer定期评估其连接，并根据从其他peer接收到的数据速率来更新其窒息/未窒息名单&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;h3 id="窒息算法的重要性">窒息算法的重要性&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>合作促进&lt;/strong>：通过奖励那些分享资源的peer，窒息算法鼓励合作，提高了网络中的资源共享效率。&lt;/li>
&lt;li>&lt;strong>防止自私行为&lt;/strong>：算法减少了自私peer（只下载不上传的）的优势，因为这些peer不太可能被其他peer“未窒息”。&lt;/li>
&lt;li>&lt;strong>网络拥塞控制&lt;/strong>：它帮助控制网络拥塞，通过限制peer的连接数量和数据传输，优化带宽使用。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;h3 id="结论-1">结论&lt;/h3>
&lt;ul>
&lt;li>窒息算法是BitTorrent协议高效性的关键，它通过一种简单但有效的方式来鼓励数据共享和合作，保证了整个网络的健康和高效运行。通过这种动态的窒息/未窒息机制，BitTorrent网络能够有效地管理带宽和连接，确保资源在网络中的快速且公平的分配。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;h2 id="为什么说已经足够了">为什么说“已经足够了”&lt;/h2>
&lt;ul>
&lt;li>
&lt;blockquote>
&lt;p>因为这是一门实验科学&lt;/p></description></item><item><title>Introduction to Ceph</title><link>https://wizmann.top/posts/introduction-to-ceph/</link><pubDate>Sun, 29 Nov 2020 00:00:00 +0000</pubDate><guid>https://wizmann.top/posts/introduction-to-ceph/</guid><description>&lt;h2 id="什么是ceph">什么是Ceph&lt;/h2>
&lt;p>Ceph是一个可扩展的，高性能的分布式存储系统。提供了三种不同类型的接口以适应不同的应用场景：&lt;/p>
&lt;ul>
&lt;li>block-based: 块存储，可以用做VM的虚拟磁盘&lt;/li>
&lt;li>object-based: 对象存储，与Amazon S3等常用对象存储兼容&lt;/li>
&lt;li>file system: POSIX兼容的分布式文件系统，可以被本地系统挂载，并且能被多个客户端共享&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://raw.githubusercontent.com/Wizmann/assets/master/wizmann-pic/20-11-28/2020-11-28_22-04-49.png" alt="">&lt;/p></description></item><item><title>ZeroMQ启示录</title><link>https://wizmann.top/posts/inspiration-from-zeromq/</link><pubDate>Tue, 07 Apr 2015 10:01:34 +0000</pubDate><guid>https://wizmann.top/posts/inspiration-from-zeromq/</guid><description>&lt;h2 id="ømq是一个消息系统">ØMQ是一个消息系统&lt;/h2>
&lt;p>ZeroMQ是一个消息系统，也被称为“消息中间件”。它被广泛的用于经济、游戏、嵌入式等领域。&lt;/p>
&lt;h3 id="什么是消息系统">什么是消息系统&lt;/h3>
&lt;p>打个比方，消息系统就像我们使用的IM软件一样。首先，一方决定将消息发往何处（一对一或一对多）。然后将信息打包，点击发送按钮。之后，IM系统会帮你料理剩余的事务。&lt;/p></description></item></channel></rss>