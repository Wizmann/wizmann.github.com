<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>分布式系统 on Maerlyn's Rainbow</title><link>https://wizmann.top/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/</link><description>Recent content in 分布式系统 on Maerlyn's Rainbow</description><generator>Hugo</generator><language>zh-CN</language><lastBuildDate>Sat, 17 May 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://wizmann.top/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/index.xml" rel="self" type="application/rss+xml"/><item><title>为什么我不建议你阅读《数据密集型应用系统设计》（之一）</title><link>https://wizmann.top/posts/why-not-start-with-ddia-part-1/</link><pubDate>Sat, 17 May 2025 00:00:00 +0000</pubDate><guid>https://wizmann.top/posts/why-not-start-with-ddia-part-1/</guid><description>&lt;p>&lt;strong>因为我是标题党。&lt;/strong>&lt;/p>
&lt;p>这本书与我们常用来垫显示器的《算法导论》或《深入理解计算机系统》（如果你是大一大二的同学，可能还包括《算法竞赛入门经典》）并不属于同一类。它更接近《C++ Primer》或那本《算法》(Robert Sedgewick 著）——属于通识型读物。&lt;/p></description></item><item><title>6.824 Lab 2: Raft协议实现指南 （无剧透版）</title><link>https://wizmann.top/posts/raft-lab-mit-6.824/</link><pubDate>Thu, 02 May 2019 21:33:00 +0000</pubDate><guid>https://wizmann.top/posts/raft-lab-mit-6.824/</guid><description>&lt;h2 id="背景">背景&lt;/h2>
&lt;p>MIT6.824是一个用来学习分布式系统的非常好的资源。其中第二个课程作业就是关于&lt;a href="https://pdos.csail.mit.edu/6.824/labs/lab-raft.html">Raft算法&lt;/a>。&lt;/p>
&lt;p>由于在工作中涉及到分布一致性算法的调研，接触了paxos/raft算法。然后被@neutronest安利了一发，于是开始着手实现这个作业。&lt;/p></description></item><item><title>白话一致性协议 - Paxos、Raft和PacificA[2]</title><link>https://wizmann.top/posts/paxos-raft-pecifaca2/</link><pubDate>Mon, 18 Feb 2019 00:00:00 +0000</pubDate><guid>https://wizmann.top/posts/paxos-raft-pecifaca2/</guid><description>&lt;h2 id="pacifica是一个框架">PacificA是一个框架&lt;/h2>
&lt;p>虽然在题目中我们把Paxos、Raft和PacificA并列，但是Paxos和Raft在论文中称自己为一种“算法”（algorithm）；而PacificA对自己的定位是一种通用的，强一致的数据同步&lt;strong>框架&lt;/strong>。&lt;/p></description></item><item><title>白话一致性协议 - Paxos、Raft和PacificA[1]</title><link>https://wizmann.top/posts/paxos-raft-pecifaca1/</link><pubDate>Wed, 05 Dec 2018 00:00:00 +0000</pubDate><guid>https://wizmann.top/posts/paxos-raft-pecifaca1/</guid><description>&lt;h2 id="书接上文---multi-paxos">书接上文 - Multi Paxos&lt;/h2>
&lt;p>在上一篇文章中，我们提到了Basic Paxos和Multi Paxos的异同。在&lt;a href="https://lamport.azurewebsites.net/pubs/paxos-simple.pdf">Paxos Made Simple&lt;/a>论文中，作者提到了Multi Paxos的一种实现。这个实现允许我们对一个连续的数据流（也可以称为复制日志，replicated log）达成共识，从而实现节点状态的一致性复制。&lt;/p></description></item><item><title>白话一致性协议 - Paxos、Raft和PacificA[0]</title><link>https://wizmann.top/posts/paxos-raft-pecifaca0/</link><pubDate>Sun, 25 Nov 2018 00:00:00 +0000</pubDate><guid>https://wizmann.top/posts/paxos-raft-pecifaca0/</guid><description>&lt;h2 id="一致性协议---paxos">一致性协议 - Paxos&lt;/h2>
&lt;p>在分布式系统当中，我们往往需要保持节点之间的一致性。在绝大多数情况下，我们需要让系统中的节点相互协调通力合作，有可能的让系统正确的工作。但是，由于分布式系统本身的特性，需要我们在不可靠的硬件上尽可能的构建可靠的系统。所以，看似简单的一致性问题成为了分布式系统领域的一个重要的课题。&lt;/p></description></item><item><title>Windows Azure Storage Made Simple</title><link>https://wizmann.top/posts/azure-storage-made-simple/</link><pubDate>Wed, 11 Oct 2017 21:12:15 +0000</pubDate><guid>https://wizmann.top/posts/azure-storage-made-simple/</guid><description>&lt;h2 id="加机器就是一把梭">加机器就是一把梭&lt;/h2>
&lt;blockquote>
&lt;p>没有什么问题是加一千台机器解决不了的，如果有，就再加一千台。 &lt;br>
—— 《21天精通分布式系统》&lt;/p>&lt;/blockquote>
&lt;p>分布式系统在设计之初，是为了解决单机系统的可用性和可扩展性问题的。&lt;/p></description></item></channel></rss>