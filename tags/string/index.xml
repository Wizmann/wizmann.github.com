<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>String on Maerlyn's Rainbow</title><link>https://wizmann.top/tags/string/</link><description>Recent content in String on Maerlyn's Rainbow</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Wed, 17 Sep 2014 00:46:16 +0000</lastBuildDate><atom:link href="https://wizmann.top/tags/string/index.xml" rel="self" type="application/rss+xml"/><item><title>最小表示法及其证明</title><link>https://wizmann.top/posts/minimal-round-string/</link><pubDate>Wed, 17 Sep 2014 00:46:16 +0000</pubDate><guid>https://wizmann.top/posts/minimal-round-string/</guid><description>&lt;h2 id="问题">问题 &lt;a href="#%e9%97%ae%e9%a2%98" class="anchor">🔗&lt;/a>&lt;/h2>&lt;blockquote>
&lt;p>对于一个字符串S，求S的循环的同构字符串S’中字典序最小的一个。&lt;/p>&lt;/blockquote>
&lt;p>我们举例说明，字符串&amp;quot;abcd&amp;quot;的循环同构字符串有：&lt;code>[&amp;quot;abcd&amp;quot;, &amp;quot;bcda&amp;quot;, &amp;quot;cdab&amp;quot;, &amp;quot;dabc&amp;quot;]&lt;/code>。&lt;/p>
&lt;p>题目的目标是求这些字符串中字典序最小的那个。&lt;/p>
&lt;h2 id="暴力解法">暴力解法 &lt;a href="#%e6%9a%b4%e5%8a%9b%e8%a7%a3%e6%b3%95" class="anchor">🔗&lt;/a>&lt;/h2>&lt;p>暴力解法非常直观，直接枚举字符串的起点，然后找到构成最小字符串的那一个。&lt;/p>
&lt;p>代码就不在这里写了。&lt;/p>
&lt;h2 id="最小表示法">最小表示法 &lt;a href="#%e6%9c%80%e5%b0%8f%e8%a1%a8%e7%a4%ba%e6%b3%95" class="anchor">🔗&lt;/a>&lt;/h2>&lt;p>最小表示法是解决同构字符串最小表示的巧妙算法。&lt;/p>
&lt;p>其算法描述如下：&lt;/p>
&lt;pre tabindex="0">&lt;code>令i=0,j=1
如果S[i] &amp;gt; S[j] i=j, j=i+1
如果S[i] &amp;lt; S[j] j++
如果S[i] == S[j] 设指针k，分别从i和j位置向下比较，直到S[i] != S[j]
如果S[i+k] &amp;gt; S[j+k] i=j,j=i+1
否则j = j + k + 1
返回i
&lt;/code>&lt;/pre>&lt;p>初看这个算法，一般都会一头雾水：这TMD是嘛玩意儿？&lt;/p>
&lt;p>但是我们可以经过证明，来证实它的正确性。&lt;/p>
&lt;h3 id="最小表示法的正确性证明">最小表示法的正确性证明 &lt;a href="#%e6%9c%80%e5%b0%8f%e8%a1%a8%e7%a4%ba%e6%b3%95%e7%9a%84%e6%ad%a3%e7%a1%ae%e6%80%a7%e8%af%81%e6%98%8e" class="anchor">🔗&lt;/a>&lt;/h3>&lt;p>首先，&lt;code>S = S ++ S&lt;/code>&lt;/p>
&lt;p>设&lt;code>i &amp;lt; j&lt;/code>，且&lt;code>S[i] &amp;lt; S[i + 1 ... j - 1]&lt;/code>。&lt;/p>
&lt;p>并且以i为起点的字符串为&lt;code>RS[i]&lt;/code>，以j为起点的字符串为&lt;code>RS[j]&lt;/code>。&lt;/p>
&lt;p>且&lt;code>RS[i]&lt;/code>为&lt;code>RS[0...i-1]&lt;/code>字典序最小的。&lt;/p>
&lt;pre tabindex="0">&lt;code>RS[i] = S[i...i+k] ++ S[i+k+1 ... i+n-1]
RS[j] = S[j...j+k] ++ S[j+k+1 ... j+n-1]
&lt;/code>&lt;/pre>&lt;p>以上为我们的子问题。&lt;/p>
&lt;p>&lt;code>i = 0, j = 1&lt;/code>时，子问题即成立。&lt;/p>
&lt;h4 id="情况0">情况0 &lt;a href="#%e6%83%85%e5%86%b50" class="anchor">🔗&lt;/a>&lt;/h4>&lt;p>易得。&lt;/p>
&lt;p>当&lt;code>S[i] &amp;lt; S[j]&lt;/code>时，&lt;code>j++&lt;/code>。&lt;/p>
&lt;p>当&lt;code>S[i] &amp;gt; S[j]&lt;/code>时，&lt;code>i = j; j++&lt;/code>。&lt;/p>
&lt;h4 id="情况1">情况1 &lt;a href="#%e6%83%85%e5%86%b51" class="anchor">🔗&lt;/a>&lt;/h4>&lt;p>&lt;code>S[i+k+1 ... i+n-1] == S[j+k+1 ... j+n-1]&lt;/code>。&lt;/p>
&lt;p>此时易得，字符串S是由一个长度为k的子串循环复制生成。所有的同构子串只有&lt;code>RS[i ... j-1]&lt;/code>这k个，又由于&lt;code>RS[i + 1 ... j - 1]&lt;/code>的所有字符串都字典序大于&lt;code>RS[i]&lt;/code>。所以i即为最后的答案。&lt;/p>
&lt;h4 id="情况2">情况2 &lt;a href="#%e6%83%85%e5%86%b52" class="anchor">🔗&lt;/a>&lt;/h4>&lt;p>&lt;code>S[i+k+1 ... i+n-1] &amp;gt; S[j+k+1 ... j+n-1]&lt;/code>，那么此时&lt;code>RS[i] &amp;gt; RS[j]&lt;/code>。&lt;/p>
&lt;p>由于&lt;code>S[i...i+k] == S[j...j+k]&lt;/code>，且这两个前辍中，只有&lt;code>S[i] == S[j]&lt;/code>字典序最小。&lt;/p>
&lt;p>所以i指向j点，保持最小性质。而j则指向&lt;code>j + k + 1&lt;/code>。&lt;/p>
&lt;p>保持i &amp;lt; j，且S[i] &amp;lt;= S[j]的性质。使问题回到我们归纳的子问题上来。&lt;/p>
&lt;h4 id="情况3">情况3 &lt;a href="#%e6%83%85%e5%86%b53" class="anchor">🔗&lt;/a>&lt;/h4>&lt;p>&lt;code>S[i+k+1 ... i+n-1] &amp;lt; S[j+k+1 ... j+n-1]&lt;/code>，那么此时&lt;code>RS[i] &amp;lt; RS[j]&lt;/code>。&lt;/p>
&lt;p>由于&lt;code>S[i...i+k] == S[j...j+k]&lt;/code>，且这两个前辍中，只有&lt;code>S[i] == S[j]&lt;/code>字典序最小。&lt;/p>
&lt;p>所以i不变，保持最小性质。而j指向&lt;code>j + k + 1&lt;/code>。&lt;/p>
&lt;p>保持i &amp;lt; j，且S[i] &amp;lt;= S[j]的性质。使问题回到我们归纳的子问题上来。&lt;/p>
&lt;h2 id="代码">代码 &lt;a href="#%e4%bb%a3%e7%a0%81" class="anchor">🔗&lt;/a>&lt;/h2>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// Result: wizmann 1509 Accepted 272K 16MS C++ 1247B 2014-09-17 00:44:22
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;cstdio&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;cstdlib&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;cstring&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;algorithm&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;string&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">using&lt;/span> &lt;span style="color:#66d9ef">namespace&lt;/span> std;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#define print(x) cout &amp;lt;&amp;lt; x &amp;lt;&amp;lt; endl
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#define input(x) cin &amp;gt;&amp;gt; x
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> SIZE &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">12345&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">char&lt;/span> instr[SIZE];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">solve&lt;/span>(&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">char&lt;/span>&lt;span style="color:#f92672">*&lt;/span> str, &lt;span style="color:#66d9ef">int&lt;/span> n)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (n &lt;span style="color:#f92672">&amp;lt;=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> p &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>, q &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">while&lt;/span> (p &lt;span style="color:#f92672">&amp;lt;&lt;/span> n &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> q &lt;span style="color:#f92672">&amp;lt;&lt;/span> n) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (str[p] &lt;span style="color:#f92672">&amp;lt;&lt;/span> str[q]) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> q&lt;span style="color:#f92672">++&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#66d9ef">else&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> (str[p] &lt;span style="color:#f92672">&amp;gt;&lt;/span> str[q]) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> p &lt;span style="color:#f92672">=&lt;/span> q;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> q&lt;span style="color:#f92672">++&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#66d9ef">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> i, l &lt;span style="color:#f92672">=&lt;/span> p, r &lt;span style="color:#f92672">=&lt;/span> q;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> (i &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>; i &lt;span style="color:#f92672">&amp;lt;&lt;/span> n; i&lt;span style="color:#f92672">++&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> ll &lt;span style="color:#f92672">=&lt;/span> l &lt;span style="color:#f92672">%&lt;/span> n, rr &lt;span style="color:#f92672">=&lt;/span> r &lt;span style="color:#f92672">%&lt;/span> n;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (str[ll] &lt;span style="color:#f92672">&amp;lt;&lt;/span> str[rr]) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> q &lt;span style="color:#f92672">=&lt;/span> r;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#66d9ef">else&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> (str[ll] &lt;span style="color:#f92672">&amp;gt;&lt;/span> str[rr]) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> p &lt;span style="color:#f92672">=&lt;/span> q;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> q &lt;span style="color:#f92672">=&lt;/span> rr;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> l&lt;span style="color:#f92672">++&lt;/span>; r&lt;span style="color:#f92672">++&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (i &lt;span style="color:#f92672">==&lt;/span> n) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> p;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> T;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> input(T);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">while&lt;/span> (T&lt;span style="color:#f92672">--&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> scanf(&lt;span style="color:#e6db74">&amp;#34;%s&amp;#34;&lt;/span>, instr);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> u &lt;span style="color:#f92672">=&lt;/span> solve(instr, strlen(instr));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> printf(&lt;span style="color:#e6db74">&amp;#34;%d&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, &lt;span style="color:#f92672">++&lt;/span>u);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="后记">后记 &lt;a href="#%e5%90%8e%e8%ae%b0" class="anchor">🔗&lt;/a>&lt;/h2>&lt;ul>
&lt;li>证明的逻辑性不好，但是应该是对的。只是语言表达上问题很大。&lt;/li>
&lt;li>有一个好的子问题假设会大大提升做题效率啊！&lt;/li>
&lt;/ul>
&lt;h2 id="参考链接">参考链接 &lt;a href="#%e5%8f%82%e8%80%83%e9%93%be%e6%8e%a5" class="anchor">🔗&lt;/a>&lt;/h2>&lt;ul>
&lt;li>&lt;a href="http://blog.csdn.net/cclsoft/article/details/5467743">理解字符串循环同构的最小表示法&lt;/a>&lt;/li>
&lt;/ul></description></item></channel></rss>