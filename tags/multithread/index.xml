<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Multithread on Maerlyn's Rainbow</title><link>https://wizmann.top/tags/multithread/</link><description>Recent content in Multithread on Maerlyn's Rainbow</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Sun, 01 Sep 2024 00:24:00 +0000</lastBuildDate><atom:link href="https://wizmann.top/tags/multithread/index.xml" rel="self" type="application/rss+xml"/><item><title>CPU缓存一致性与内存一致性（第二部分-内存一致性）</title><link>https://wizmann.top/posts/cache-coherence-and-memory-order-2/</link><pubDate>Sun, 01 Sep 2024 00:24:00 +0000</pubDate><guid>https://wizmann.top/posts/cache-coherence-and-memory-order-2/</guid><description>&lt;h2 id="缓存一致性与内存一致性">缓存一致性与内存一致性 &lt;a href="#%e7%bc%93%e5%ad%98%e4%b8%80%e8%87%b4%e6%80%a7%e4%b8%8e%e5%86%85%e5%ad%98%e4%b8%80%e8%87%b4%e6%80%a7" class="anchor">🔗&lt;/a>&lt;/h2>&lt;p>缓存一致性和内存一致性是多处理器系统中的两个不同概念，它们解决的是不同类型的内存访问问题。&lt;/p>
&lt;p>缓存一致性协议（如 MESI 协议）用于解决多个处理器对相同内存位置进行访问和修改时的数据一致性问题。它确保各处理器的缓存中针对同一内存地址的副本保持一致，避免因缓存不同步而导致的数据错误。&lt;/p>
&lt;p>而内存一致性关注的是处理器对多个不同内存地址的访问顺序问题。当不同处理器的内存访问顺序与程序代码中的预期顺序不一致时，就会引发内存一致性问题。它要求各处理器按照一定的规则访问内存，以保持程序逻辑的正确性。&lt;/p>
&lt;p>简而言之，缓存一致性解决的是同一内存位置的数据同步问题，而内存一致性则涉及多个内存位置的访问顺序问题。&lt;/p>
&lt;h2 id="内存乱序访问产生的原因">内存乱序访问产生的原因 &lt;a href="#%e5%86%85%e5%ad%98%e4%b9%b1%e5%ba%8f%e8%ae%bf%e9%97%ae%e4%ba%a7%e7%94%9f%e7%9a%84%e5%8e%9f%e5%9b%a0" class="anchor">🔗&lt;/a>&lt;/h2>&lt;p>内存乱序访问的原因可以从两个方面来理解：程序顺序（Program Order, PO）和内存顺序（Memory Order, MO）。程序顺序是指程序代码中编写的内存访问序列，反映了程序员预期的指令执行顺序。按照程序顺序，指令应该依次被执行，以确保程序的逻辑正确性。然而，在实际执行中，系统中可能存在一种不同的顺序，即内存顺序。&lt;/p>
&lt;p>内存顺序是指系统中所有处理器对内存操作达成一致的访问顺序。由于现代计算机系统通常由多个处理器共同操作共享内存，为了提高整体性能，这些处理器可能会对内存操作进行重排序，从而产生与程序顺序不一致的内存顺序。&lt;/p>
&lt;p>这种内存乱序访问的现象主要是为了优化程序执行效率，通常发生在两个阶段：编译阶段和执行阶段。在编译阶段，编译器会对代码进行优化，这可能会导致指令的重排序，以提高执行效率。在执行阶段，多个 CPU 之间的交互也会引起内存访问顺序的不一致。&lt;/p>
&lt;p>在单处理器系统中，CPU 对指令的乱序执行和重排对于程序员来说是透明的，即程序的执行结果与顺序执行的结果是一致的。然而，在多处理器系统中，不同的处理器（或称为观察者）可能会观察到不同的内存执行顺序，这与指令的实际执行顺序不完全一致，从而导致潜在的同步问题和数据不一致性。&lt;/p>
&lt;h2 id="几种常见的一致性模型">几种常见的一致性模型 &lt;a href="#%e5%87%a0%e7%a7%8d%e5%b8%b8%e8%a7%81%e7%9a%84%e4%b8%80%e8%87%b4%e6%80%a7%e6%a8%a1%e5%9e%8b" class="anchor">🔗&lt;/a>&lt;/h2>&lt;p>在多处理器系统中，内存一致性模型决定了不同处理器之间如何观察和执行内存操作的顺序。以下介绍几种常见的一致性模型：&lt;/p>
&lt;h3 id="顺序一致性模型sequential-consistency-sc">顺序一致性模型（Sequential Consistency, SC） &lt;a href="#%e9%a1%ba%e5%ba%8f%e4%b8%80%e8%87%b4%e6%80%a7%e6%a8%a1%e5%9e%8bsequential-consistency-sc" class="anchor">🔗&lt;/a>&lt;/h3>&lt;p>顺序一致性模型的概念最早由 Leslie Lamport 在 1979 年的论文《如何构建正确执行多处理程序的多处理计算机》中提出。按照他的定义：&lt;/p>
&lt;p>任何执行的结果都与所有处理器的操作按照某种顺序依次执行的结果相同，并且每个处理器的操作在这个顺序中出现的顺序与其程序中指定的顺序一致。满足这一条件的多处理器被称为顺序一致性系统。&lt;/p>
&lt;p>顺序一致性模型保证了每个加载（Load）和存储（Store）指令按照程序中指定的严格顺序执行，确保了“读-&amp;gt;读”、“读-&amp;gt;写”、“写-&amp;gt;写”以及“写-&amp;gt;读”四种操作的顺序。这种模型提供了最强的内存一致性保证，但代价是较低的执行效率，因为它不允许任何形式的指令重排序。&lt;/p>
&lt;h3 id="处理器一致性模型processor-consistency-pc">处理器一致性模型（Processor Consistency, PC) &lt;a href="#%e5%a4%84%e7%90%86%e5%99%a8%e4%b8%80%e8%87%b4%e6%80%a7%e6%a8%a1%e5%9e%8bprocessor-consistency-pc" class="anchor">🔗&lt;/a>&lt;/h3>&lt;p>处理器一致性模型是顺序一致性模型的弱化版本，它放宽了对“写-&amp;gt;读”操作顺序的要求。该模型允许处理器在读取时从存储缓冲区（Store Buffer）中获取一个尚未写入缓存的值，即使这个值还没有被其他处理器看到。x86-64 实现的全序写（Total Store Ordering, TSO）模型就是处理器一致性的一种。TSO 允许一定程度的乱序执行，提高了系统的性能，同时仍然提供了较强的一致性保证。&lt;/p>
&lt;h3 id="弱一致性模型weak-consistency-wc">弱一致性模型（Weak Consistency, WC） &lt;a href="#%e5%bc%b1%e4%b8%80%e8%87%b4%e6%80%a7%e6%a8%a1%e5%9e%8bweak-consistency-wc" class="anchor">🔗&lt;/a>&lt;/h3>&lt;p>弱一致性模型进一步弱化了处理器一致性模型的要求，放宽了对“读-&amp;gt;读”、“读-&amp;gt;写”、“写-&amp;gt;写”以及“写-&amp;gt;读”四种操作顺序的约束。为了确保程序执行的正确性，程序员需要在合适的地方显式添加同步操作。在这种模型中，多处理器系统的内存访问满足以下三个条件时称为弱一致性内存访问：&lt;/p>
&lt;ul>
&lt;li>对全局同步变量的访问是顺序一致的&lt;/li>
&lt;li>在一个同步操作（如内存屏障指令）执行之前，所有先前的数据访问必须完成；&lt;/li>
&lt;li>在一个正常的数据访问（如数据访问指令）执行之前，所有先前的同步操作（如内存屏障指令）必须完成。&lt;/li>
&lt;/ul>
&lt;h3 id="释放一致性模型release-consistency-rc">释放一致性模型（Release Consistency, RC） &lt;a href="#%e9%87%8a%e6%94%be%e4%b8%80%e8%87%b4%e6%80%a7%e6%a8%a1%e5%9e%8brelease-consistency-rc" class="anchor">🔗&lt;/a>&lt;/h3>&lt;p>释放一致性模型是在弱一致性模型的基础上引入了“获取”（acquire）和“释放”（release）屏障原语，用于简化共享数据的互斥访问。&lt;/p>
&lt;p>在该模型中，“获取”屏障原语后面的读写操作不能被重排到该屏障之前，“释放”屏障原语前面的读写操作不能被重排到该屏障之后。这种机制能够更高效地管理多处理器系统中的共享数据访问，提高并行性能。&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/Wizmann/assets/38b192183bdefe1e658707d505a5263f12e4ba34/wizmann-pic/image_1724584827296_0.png" alt="">&lt;/p>
&lt;p>这些内存一致性模型提供了从严格到宽松的不同选择，适应不同的应用需求和性能要求。选择合适的一致性模型对多处理器系统的设计和优化至关重要。&lt;/p>
&lt;h2 id="四种内存乱序">四种内存乱序 &lt;a href="#%e5%9b%9b%e7%a7%8d%e5%86%85%e5%ad%98%e4%b9%b1%e5%ba%8f" class="anchor">🔗&lt;/a>&lt;/h2>&lt;p>在多处理器系统中，为了优化性能，处理器可能会对内存操作进行不同类型的乱序执行。这种乱序行为包括四种主要类型，每一种都会以不同的方式影响多线程程序的正确性和一致性。&lt;/p>
&lt;h3 id="loadload-乱序">LoadLoad 乱序 &lt;a href="#loadload-%e4%b9%b1%e5%ba%8f" class="anchor">🔗&lt;/a>&lt;/h3>&lt;p>LoadLoad 乱序指的是后续的加载（读取）操作可以在先前的加载操作完成之前开始，或者两个加载操作的完成顺序与它们的发起顺序不同。这意味着处理器可能会优先执行后发起的加载操作。这种乱序优化可能有助于提高程序的执行速度，但如果未加以控制，可能会导致某些线程读取到不一致的数据。&lt;/p>
&lt;h3 id="loadstore-乱序">LoadStore 乱序 &lt;a href="#loadstore-%e4%b9%b1%e5%ba%8f" class="anchor">🔗&lt;/a>&lt;/h3>&lt;p>LoadStore 乱序表示一个存储（写入）操作可以在之前发起的加载操作完成之前开始执行，或者写操作可能“超越”读操作。尽管这种优化可以提高处理器的性能，但在多线程程序中可能导致意外的行为。例如，一个线程可能会看到数据被写入之前的状态，导致逻辑错误或数据不一致。&lt;/p>
&lt;h3 id="storeload-乱序">StoreLoad 乱序 &lt;a href="#storeload-%e4%b9%b1%e5%ba%8f" class="anchor">🔗&lt;/a>&lt;/h3>&lt;p>StoreLoad 乱序是四种乱序类型中对编程模型影响最大的一种。它允许一个加载操作在之前的存储操作完成之前开始，或者读取操作可能看到写操作的结果，即使这个写操作在程序中的顺序上应该发生在读操作之后。这种乱序执行可能导致一个线程读取到另一个线程的“旧”值，而不是最新写入的值，从而引发数据同步问题。&lt;/p>
&lt;h3 id="storestore-乱序">StoreStore 乱序 &lt;a href="#storestore-%e4%b9%b1%e5%ba%8f" class="anchor">🔗&lt;/a>&lt;/h3>&lt;p>StoreStore 乱序涉及两个连续的存储操作，其中后一个存储操作可以在第一个操作完成之前开始，或者它们的完成顺序与它们被发起的顺序不同。这意味着，后一个写操作的结果可能在前一个写操作的结果对其他处理器可见之前就已经被观察到，从而造成数据顺序的不一致。&lt;/p>
&lt;h3 id="管理内存乱序的重要性">管理内存乱序的重要性 &lt;a href="#%e7%ae%a1%e7%90%86%e5%86%85%e5%ad%98%e4%b9%b1%e5%ba%8f%e7%9a%84%e9%87%8d%e8%a6%81%e6%80%a7" class="anchor">🔗&lt;/a>&lt;/h3>&lt;p>正确管理这些乱序行为对于并发编程至关重要，特别是在设计无锁数据结构和编写多线程程序时。如果不加以控制，这些乱序可能导致数据不一致、难以重现的错误和程序崩溃。为了避免这些问题，现代处理器和编程语言提供了各种内存屏障（Memory Barriers）或内存顺序（Memory Order）指令，确保在关键的程序点上强制执行所需的内存操作顺序。这些机制帮助程序员在优化性能的同时，维护数据的一致性和正确性。&lt;/p>
&lt;h2 id="使用litmus工具分析内存乱序---以x86-tso为例">使用Litmus工具分析内存乱序 - 以x86-TSO为例 &lt;a href="#%e4%bd%bf%e7%94%a8litmus%e5%b7%a5%e5%85%b7%e5%88%86%e6%9e%90%e5%86%85%e5%ad%98%e4%b9%b1%e5%ba%8f---%e4%bb%a5x86-tso%e4%b8%ba%e4%be%8b" class="anchor">🔗&lt;/a>&lt;/h2>&lt;p>在并发编程中，理解和验证内存模型的行为对于确保程序的正确性至关重要。以 x86 Total Store Order (x86-TSO) 为例，我们可以使用 Litmus 测试工具来分析内存乱序现象，并了解如何通过内存屏障来避免这种情况。&lt;/p>
&lt;blockquote>
&lt;p>Litmus工具可以在&lt;a href="https://developer.arm.com/herd7">这里&lt;/a>在线试用，也可以安装到本地环境&lt;/p>&lt;/blockquote>
&lt;h3 id="x86-total-store-order-x86-tso">x86 Total Store Order (x86-TSO) &lt;a href="#x86-total-store-order-x86-tso" class="anchor">🔗&lt;/a>&lt;/h3>&lt;p>&lt;img src="https://raw.githubusercontent.com/Wizmann/assets/master/wizmann-pic/24-09-01/1725159498577_mem-tso_1723970692408_0.png" alt="">&lt;/p>
&lt;p>在 x86 架构中，Store Buffer（存储缓冲区）用于暂时存放处理器的写操作，而不立即将其写入主存。这种机制提高了处理器的性能，因为它允许处理器在写操作尚未完成时继续执行后续指令。然而，Store Buffer 也导致了某些内存操作的可见性问题，特别是在多处理器环境中。&lt;/p>
&lt;p>x86 Total Store Order (x86-TSO) 模型的特性正是由这种 Store Buffer 机制决定的。由于写操作在 Store Buffer 中暂存，x86-TSO 模型保证了一些关键特性，同时也做出了一些基于性能的妥协：&lt;/p>
&lt;ul>
&lt;li>写操作顺序一致性：所有写操作按照程序的顺序执行，并对所有处理器可见，即写操作在 Store Buffer 刷新到主存之前，不会被其他处理器看到。&lt;/li>
&lt;li>读操作的自我可见性：处理器可以立即看到自己在 Store Buffer 中的最新写入，即本处理器的读操作可以从 Store Buffer 中读取未提交到主存的值。&lt;/li>
&lt;li>防止某些重排序：为了避免因 Store Buffer 导致的读写乱序，x86-TSO 禁止写操作与其后的读操作重排序，确保读写顺序一致。&lt;/li>
&lt;li>允许部分读操作重排序：为了进一步提升性能，处理器允许一些读操作的重排序，但仍然遵循严格的规则以保证程序的正确性。&lt;/li>
&lt;/ul>
&lt;h3 id="使用-litmus-验证-x86-的-storeload-乱序">使用 Litmus 验证 x86 的 StoreLoad 乱序 &lt;a href="#%e4%bd%bf%e7%94%a8-litmus-%e9%aa%8c%e8%af%81-x86-%e7%9a%84-storeload-%e4%b9%b1%e5%ba%8f" class="anchor">🔗&lt;/a>&lt;/h3>&lt;p>我们可以使用 Litmus 工具来验证在 x86-TSO 内存模型下的 StoreLoad 乱序行为。以下是一个示例代码：&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-litmus" data-lang="litmus">X86 SB
{ x = 0; y = 0; }
P0 | P1 ;
MOV [y],$1 | MOV [x],$1 ;
MOV EAX,[x] | MOV EAX,[y] ;
exists
(0:EAX=0 /\ 1:EAX=0)
&lt;/code>&lt;/pre>&lt;p>在执行该代码后，Litmus 会生成四种可能的结果，分别对应不同的执行顺序。&lt;/p>
&lt;h4 id="结果1">结果1 &lt;a href="#%e7%bb%93%e6%9e%9c1" class="anchor">🔗&lt;/a>&lt;/h4>&lt;p>&lt;img src="https://raw.githubusercontent.com/Wizmann/assets/master/wizmann-pic/24-09-01/1725159921512_graph3_1725095884015_0.png" alt="">&lt;/p>
&lt;p>在结果1中，程序按照严格的顺序执行，每个处理器的内存操作顺序与程序中的顺序一致。&lt;/p>
&lt;p>图中，po（Program Order）表示程序顺序，rf（Reads-From）表示每个读操作从哪个写操作中读取的值。由于内存操作按照预期顺序执行，这种情况没有进一步的乱序行为，因此不需要进一步分析&lt;/p>
&lt;h4 id="结果2结果3">结果2/结果3 &lt;a href="#%e7%bb%93%e6%9e%9c2%e7%bb%93%e6%9e%9c3" class="anchor">🔗&lt;/a>&lt;/h4>&lt;p>&lt;img src="https://raw.githubusercontent.com/Wizmann/assets/master/wizmann-pic/24-09-01/1725160079968_graph1_1725098202554_0.png" alt="">
&lt;img src="https://raw.githubusercontent.com/Wizmann/assets/master/wizmann-pic/24-09-01/1725160089725_graph2_1725098310293_0.png" alt="">&lt;/p>
&lt;p>结果2和结果3是对称的，表示在执行过程中，内存的读取发生了“乱序”，即读取操作被重排到了写入操作之前。在 Litmus 中，这种情况被标记为 fr（From-Read），表示一个写操作覆盖了一个读操作所读取的值，即这个写操作发生在读操作之后。这种“写读”操作的乱序可能是由于执行顺序的不同，也可能是内存模型的顺序造成的。&lt;/p>
&lt;h4 id="结果4">结果4 &lt;a href="#%e7%bb%93%e6%9e%9c4" class="anchor">🔗&lt;/a>&lt;/h4>&lt;p>&lt;img src="https://raw.githubusercontent.com/Wizmann/assets/master/wizmann-pic/24-09-01/1725160171251_graph0_1725099005660_0.png" alt="">&lt;/p>
&lt;p>结果4表示两个线程各自都发生了 fr，即每个线程的读操作都被重排到了写操作之前。这种情况展示了最复杂的乱序行为，其中两个线程的读操作分别“超越”了各自的写操作。&lt;/p>
&lt;h3 id="使用内存屏障mfence指令避免内存乱序">使用内存屏障（MFENCE）指令避免内存乱序 &lt;a href="#%e4%bd%bf%e7%94%a8%e5%86%85%e5%ad%98%e5%b1%8f%e9%9a%9cmfence%e6%8c%87%e4%bb%a4%e9%81%bf%e5%85%8d%e5%86%85%e5%ad%98%e4%b9%b1%e5%ba%8f" class="anchor">🔗&lt;/a>&lt;/h3>&lt;p>为了避免这种乱序情况，可以使用 MFENCE（Memory Fence） 指令。在 x86 架构中，MFENCE 是一种强制内存屏障，确保所有在 MFENCE 之前的内存操作（无论是读还是写）在所有 MFENCE 之后的内存操作之前完成。这意味着在同一线程内，MFENCE 保证了内存操作的顺序性：MFENCE 之前的操作对其他线程可见后，才可以执行 MFENCE 之后的操作。&lt;/p>
&lt;p>我们可以将 Litmus 代码修改如下，以插入 MFENCE 指令：&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-litmus" data-lang="litmus">X86 SB
{ x = 0; y = 0; }
P0 | P1 ;
MOV [y],$1 | MOV [x],$1 ;
MFENCE | MFENCE ;
MOV EAX,[x] | MOV EAX,[y] ;
exists
(0:EAX=0 /\ 1:EAX=0)
&lt;/code>&lt;/pre>&lt;p>在加入内存屏障后，我们看到结果1到结果3依然会出现，但结果4因 MFENCE 的存在而被避免。通过 MFENCE 确保了内存操作的顺序性，从而防止了某些类型的内存乱序，保证了多线程程序的正确性和一致性。&lt;/p>
&lt;h2 id="接下来">接下来&amp;hellip; &lt;a href="#%e6%8e%a5%e4%b8%8b%e6%9d%a5" class="anchor">🔗&lt;/a>&lt;/h2>&lt;p>下一篇文章中，我们会介绍C++的内存顺序模型，并且分析更复杂的内存乱序问题&lt;/p>
&lt;h2 id="references">References &lt;a href="#references" class="anchor">🔗&lt;/a>&lt;/h2>&lt;ul>
&lt;li>&lt;a href="https://colobu.com/2021/06/30/hwmm/">硬件内存模型&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://book.douban.com/subject/36240082/">RISC-V体系结构编程与实践&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.microsoft.com/en-us/research/publication/make-multiprocessor-computer-correctly-executes-multiprocess-programs/">How to Make a Multiprocessor Computer That Correctly Executes Multiprocess Programs&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://dl.acm.org/doi/10.1145/285930.285991">Memory access buffering in multiprocessors&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.cl.cam.ac.uk/~pes20/weakmemory/tacas11.pdf">Litmus: Running Tests Against Hardware&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://developer.arm.com/herd7">Herd7 Simulator&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/0voice/dpdk_engineer_manual/blob/main/%E5%A4%A7%E4%BC%9APPT/NA%202021-Memory%20Model%20Simulation%20Tool%20-%20Herd7.pdf">Memory Model Simulation Tool - Herd7&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://community.arm.com/arm-community-blogs/b/architectures-and-processors-blog/posts/how-to-use-the-memory-model-tool#intuitively">A working example of how to use the herd7 Memory Model Tool&lt;/a>&lt;/li>
&lt;/ul>
&lt;div class="alert alert-info" role="alert">本文大（划掉）部分内容由ChatGPT4生成&lt;/div></description></item><item><title>CPU缓存一致性与内存一致性（第一部分-MESI协议）</title><link>https://wizmann.top/posts/cache-coherence-and-memory-order/</link><pubDate>Mon, 18 Mar 2024 23:21:35 +0000</pubDate><guid>https://wizmann.top/posts/cache-coherence-and-memory-order/</guid><description>&lt;p>在对称多处理系统（Symmetric Multiprocessing, SMP）中，一个变量（或内存位置）可以同时存在于多个CPU的缓存行中。为了提供完美的用户级抽象，任何对一个或多个变量的修改都应该被强制同步，以确保其它CPU的缓存得到更新。
然而，在实现上，由于CPU之间通常通过总线互联，它们不能同时对多个缓存进行写操作。&lt;/p>
&lt;h3 id="缓存一致性">缓存一致性 &lt;a href="#%e7%bc%93%e5%ad%98%e4%b8%80%e8%87%b4%e6%80%a7" class="anchor">🔗&lt;/a>&lt;/h3>&lt;p>缓存一致性是指在一个多处理器系统中，确保当某个处理器修改了存储在共享资源（如主内存或缓存中的数据）时，其他处理器能够访问到最新的数据版本，从而保证数据的一致性。&lt;/p>
&lt;p>为了达到这一目标，缓存一致性机制必须处理两个主要问题：写传播（Write Propagation）和事务串行化（Transaction Serialization）。&lt;/p>
&lt;p>写传播确保一个处理器核心的写操作能被传播并被其他处理器核心所见。而事务串行化则确保所有处理器核心的写操作按照一定的顺序执行，对所有处理器核心而言这个顺序是一致的。这两个机制共同工作，确保了即使多个CPU可能并发地修改同一份数据，它们也能看到一致的数据视图。&lt;/p>
&lt;h3 id="mesi协议">MESI协议 &lt;a href="#mesi%e5%8d%8f%e8%ae%ae" class="anchor">🔗&lt;/a>&lt;/h3>&lt;p>为了实现缓存一致性，多种协议和机制被设计出来，其中MESI协议是最广泛使用的一种机制。&lt;/p>
&lt;blockquote>
&lt;p>实际上，AMD处理器使用的是MOESI协议，Intel处理器使用的是MESIF协议。这两种协议都是MESI协议的变种。这里不展开讨论。&lt;/p>&lt;/blockquote>
&lt;p>MESI 协议通过定义缓存行的四种状态——修改（Modified）、独占（Exclusive）、共享（Shared）和无效（Invalid），管理多个处理器缓存之间的一致性。状态之间的转换受到缓存协议控制，以确保数据的一致性和同步。&lt;/p>
&lt;ul>
&lt;li>独占（Exclusive, E）：缓存行仅存在于当前缓存中，并且是干净的（即缓存数据与主存数据一致）。当其他缓存尝试读取该数据时，状态转变为共享；当前缓存写入数据时，转变为已修改状态&lt;/li>
&lt;li>共享（Shared, S）：缓存行同时存在于其他缓存中，并且是干净的。该缓存行可以在任意时刻被抛弃&lt;/li>
&lt;li>已修改（Modified, M）：缓存行的数据是“脏”的（即与主存的值不同）。如果其他 CPU 核心需要读取这块数据，该缓存行必须先回写到主存，然后状态转变为共享&lt;/li>
&lt;li>无效（Invalid, I）：表示该缓存行无效，即为空。上文提到的缓存策略会优先填充无效行&lt;/li>
&lt;/ul>
&lt;p>简单来说，MESI的设计目标在于：&lt;/p>
&lt;ol>
&lt;li>防止多个处理器核心同时对共享数据进行修改。任何需要修改共享数据的核心都会先发出RFO（Read For Ownership）请求来获取该缓存块的所有权，并使其他处理器核心中的相应缓存块变为无效。&lt;/li>
&lt;li>通过推迟写回操作来减少对内存的频繁修改，确保只有在必要时才将缓存中的更改写回内存。&lt;/li>
&lt;/ol>
&lt;h3 id="mesi-的状态转移">MESI 的状态转移 &lt;a href="#mesi-%e7%9a%84%e7%8a%b6%e6%80%81%e8%bd%ac%e7%a7%bb" class="anchor">🔗&lt;/a>&lt;/h3>&lt;p>MESI 协议的状态转移如下：&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/Wizmann/assets/master/wizmann-pic/24-03-31/1711876193915_Diagrama_MESI.gif" alt="">&lt;/p>
&lt;ul>
&lt;li>从无效（I）到独占（E）：当 CPU 需要写入一个缓存行而该行当前状态为无效时，如果其他 CPU 缓存中没有该缓存行的副本，该行状态变为独占。这表明当前 CPU 缓存中的数据是最新的，且没有其他副本存在&lt;/li>
&lt;li>从无效（I）到共享（S）：当 CPU 需要读取一个缓存行而该行当前状态为无效时，如果其他 CPU 缓存中存在该缓存行的副本，则该行状态变为共享&lt;/li>
&lt;li>从共享（S）到独占（E）：当一个 CPU 想要写入一个处于共享状态的缓存行时，必须首先获取其他所有 CPU 上该缓存行的独占访问权，如果成功，该缓存行状态变为独占&lt;/li>
&lt;li>从独占（E）到修改（M）：当 CPU 对处于独占状态的缓存行进行写操作时，该缓存行状态变为修改。这表示数据已被当前 CPU 修改，且与主存不同步&lt;/li>
&lt;li>从修改（M）到共享（S）：当其他 CPU 请求读取处于修改状态的缓存行时，当前 CPU 必须将该缓存行的数据写回主存，并将缓存行状态改为共享，以便其他 CPU 可以读取最新数。&lt;/li>
&lt;li>从任何状态到无效（I）：当 CPU 接收到其他 CPU 发出的无效化请求时，如果当前 CPU 缓存中有该缓存行的副本，不论它处于何种状态，都必须将其标记为无效。这通常发生在其他 CPU 想要写入同一缓存行的情况下&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>可以使用这个&lt;a href="https://www.scss.tcd.ie/Jeremy.Jones/VivioJS/caches/MESI.htm">简单的模拟器&lt;/a>来模拟MESI协议的工作状态&lt;/p>&lt;/blockquote>
&lt;h3 id="mesi的优化">MESI的优化 &lt;a href="#mesi%e7%9a%84%e4%bc%98%e5%8c%96" class="anchor">🔗&lt;/a>&lt;/h3>&lt;p>随着多核处理器的普及和系统复杂度的增加，MESI协议面临着性能瓶颈和效率问题。因此，为了提高系统性能和缩短响应时间，对MESI协议的优化变得非常必要。&lt;/p>
&lt;h4 id="写缓冲区store-buffer机制">写缓冲区（Store Buffer）机制 &lt;a href="#%e5%86%99%e7%bc%93%e5%86%b2%e5%8c%bastore-buffer%e6%9c%ba%e5%88%b6" class="anchor">🔗&lt;/a>&lt;/h4>&lt;p>在进行写入操作时，一个CPU核心（例如核心1）首先需要广播一个读取为了写入（Read For Ownership，RFO）请求，以获得对应数据的独占访问权。在等待其他核心响应此请求并发送回确认信号（ACK）期间，核心1原本需要空闲等待，这无疑是对CPU资源的一种浪费。&lt;/p>
&lt;p>为了提高效率，现代CPU设计了“写缓冲区”机制。通过这种机制，当核心1发出RFO请求并将写入操作放入写缓冲区后，它可以立即继续执行其他任务，而不需要等待ACK的到来。一旦收到ACK，CPU再从写缓冲区中取出写入操作，实际写入到缓存中。这样不仅优化了CPU的工作流程，还提升了处理器的整体效能。&lt;/p>
&lt;h4 id="失效队列invalidation-queue">失效队列（Invalidation Queue） &lt;a href="#%e5%a4%b1%e6%95%88%e9%98%9f%e5%88%97invalidation-queue" class="anchor">🔗&lt;/a>&lt;/h4>&lt;p>为了解决核心在忙碌时无法及时响应RFO请求的问题，现代CPU引入了“失效队列”机制。收到的RFO请求被放入失效队列，并立即发送回ACK，待核心完成手头上的任务后，再处理失效队列中的请求。这种设计有效地缩短了等待时间，加速了数据同步过程。&lt;/p>
&lt;h3 id="mesi的潜在问题">MESI的潜在问题 &lt;a href="#mesi%e7%9a%84%e6%bd%9c%e5%9c%a8%e9%97%ae%e9%a2%98" class="anchor">🔗&lt;/a>&lt;/h3>&lt;h4 id="false-sharing">False Sharing &lt;a href="#false-sharing" class="anchor">🔗&lt;/a>&lt;/h4>&lt;p>由于CPU以64B的Cache Line为最小单位从内存中加载数据，可能会出现这样的问题：&lt;/p>
&lt;p>假设变量a和b位于同一个Cache Line中，当前CPU0和CPU1都将这个Cache Line加载到Cache，CPU0只修改变量a，CPU1只读取变量b。当CPU0修改a时，CPU1的Cache Line会变为Invalid状态，即使CPU1并没有修改b，这会导致CPU1从内存或其它核心重新加载Cache Line中的所有变量，影响性能。这就是False Sharing。&lt;/p>
&lt;p>解决False Sharing的常用方法是进行字节填充，在a和b之间填充无意义的变量，使一个变量单独占用一个Cache Line。&lt;/p>
&lt;h4 id="rmw操作">RMW操作 &lt;a href="#rmw%e6%93%8d%e4%bd%9c" class="anchor">🔗&lt;/a>&lt;/h4>&lt;p>在并发编程中，读-改-写（RMW）操作，如比较并交换（CAS）和原子加（ADD），需作为单一的原子操作执行以避免数据竞争。&lt;/p>
&lt;p>尽管MESI缓存一致性协议确保了处理器核心间缓存行状态的一致性，它并不解决操作的原子性问题。在RMW操作中，由于从读取到写回的时间窗口内可能发生其他处理器的干预修改，可能导致数据竞争和状态不一致。&lt;/p>
&lt;p>在为此，&lt;code>LOCK&lt;/code>指令被用来确保RMW操作的原子性，通过锁定操作涉及的缓存行，防止在操作完成前被其他处理器访问，从而有效地解决了数据竞争问题，保障了操作的安全性和数据的一致性。&lt;/p>
&lt;h4 id="写缓冲区store-buffer优化带来的潜在问题">写缓冲区（Store Buffer）优化带来的潜在问题 &lt;a href="#%e5%86%99%e7%bc%93%e5%86%b2%e5%8c%bastore-buffer%e4%bc%98%e5%8c%96%e5%b8%a6%e6%9d%a5%e7%9a%84%e6%bd%9c%e5%9c%a8%e9%97%ae%e9%a2%98" class="anchor">🔗&lt;/a>&lt;/h4>&lt;p>写缓冲区带来的最主要的问题是与其他核心的数据一致性问题。由于写操作被延迟执行，其他核心可能在这段时间内读取到了旧的数据值，从而导致数据不一致的问题。此外，写缓冲区可能导致内存顺序的问题，即编写的程序逻辑与实际执行逻辑不符。&lt;/p>
&lt;h4 id="失效队列invalidation-queue带来的潜在问题">失效队列（Invalidation Queue）带来的潜在问题 &lt;a href="#%e5%a4%b1%e6%95%88%e9%98%9f%e5%88%97invalidation-queue%e5%b8%a6%e6%9d%a5%e7%9a%84%e6%bd%9c%e5%9c%a8%e9%97%ae%e9%a2%98" class="anchor">🔗&lt;/a>&lt;/h4>&lt;p>失效队列提高了响应速度，但它也可能引入新的问题。失效队列允许CPU核心在确认接收到失效请求后，延迟处理这些请求。这种延迟可能导致数据在不同核心间的一致性问题，即一个核心可能会在短时间内继续使用已经失效的数据，而这段时间内其他核心已经修改了这部分数据。&lt;/p>
&lt;h2 id="参考链接">参考链接 &lt;a href="#%e5%8f%82%e8%80%83%e9%93%be%e6%8e%a5" class="anchor">🔗&lt;/a>&lt;/h2>&lt;ul>
&lt;li>&lt;a href="https://zh.wikipedia.org/wiki/MESI%E5%8D%8F%E8%AE%AE">MESI协议&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/LeoYang90/Golang-Internal-Notes/blob/master/Go%20%E5%86%85%E5%AD%98%E4%B8%80%E8%87%B4%E6%80%A7%E6%A8%A1%E5%9E%8B.md#go-%E5%86%85%E5%AD%98%E4%B8%80%E8%87%B4%E6%80%A7%E6%A8%A1%E5%9E%8B">Go 内存一致性模型&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://juejin.cn/post/7158395475362578462">12 张图看懂 CPU 缓存一致性与 MESI 协议，真的一致吗？&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://wudaijun.com/2019/04/cache-coherence-and-memory-consistency/">Cache一致性和内存一致性&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://blog.chongsheng.art/post/golang/cpu-cache-memory-barrier/">CPU缓存架构到内存屏障&lt;/a>&lt;/li>
&lt;/ul>
&lt;div class="alert alert-info" role="alert">本文大（划掉）部分内容由ChatGPT4生成&lt;/div></description></item><item><title>内存屏障初探</title><link>https://wizmann.top/posts/read-paper-barrier/</link><pubDate>Thu, 08 May 2014 19:05:26 +0000</pubDate><guid>https://wizmann.top/posts/read-paper-barrier/</guid><description>&lt;h2 id="原文地址">原文地址 &lt;a href="#%e5%8e%9f%e6%96%87%e5%9c%b0%e5%9d%80" class="anchor">🔗&lt;/a>&lt;/h2>&lt;p>&lt;a href="http://ridiculousfish.com/blog/posts/barrier.html">Barrier February 17th, 2007&lt;/a>&lt;/p>
&lt;h2 id="前言多核时代的挑战">前言：多核时代的挑战 &lt;a href="#%e5%89%8d%e8%a8%80%e5%a4%9a%e6%a0%b8%e6%97%b6%e4%bb%a3%e7%9a%84%e6%8c%91%e6%88%98" class="anchor">🔗&lt;/a>&lt;/h2>&lt;p>尽管80核心的浮点运算巨兽仍然遥不可及，多核处理器的时代已经到来。多核处理器的概念并非新鲜事物，在Power Macintosh 9500中就已经采用了多核处理器技术。现在，让我们深入理解多核处理器的内在机制。&lt;/p>
&lt;h2 id="线程技术探讨">线程技术探讨 &lt;a href="#%e7%ba%bf%e7%a8%8b%e6%8a%80%e6%9c%af%e6%8e%a2%e8%ae%a8" class="anchor">🔗&lt;/a>&lt;/h2>&lt;h3 id="名词解释">名词解释 &lt;a href="#%e5%90%8d%e8%af%8d%e8%a7%a3%e9%87%8a" class="anchor">🔗&lt;/a>&lt;/h3>&lt;h4 id="线程">线程 &lt;a href="#%e7%ba%bf%e7%a8%8b" class="anchor">🔗&lt;/a>&lt;/h4>&lt;p>线程是一种拥有共享地址空间的、能被抢占式调度的执行上下文。&lt;/p>
&lt;h4 id="多线程">多线程 &lt;a href="#%e5%a4%9a%e7%ba%bf%e7%a8%8b" class="anchor">🔗&lt;/a>&lt;/h4>&lt;p>多线程是一种用于简化控制流、绕过阻塞系统调用的方法，并不专门用于实现程序的并行化。&lt;/p>
&lt;h4 id="并发多线程">并发多线程 &lt;a href="#%e5%b9%b6%e5%8f%91%e5%a4%9a%e7%ba%bf%e7%a8%8b" class="anchor">🔗&lt;/a>&lt;/h4>&lt;p>物理上并行执行的线程，旨在通过利用多核处理器优化系统性能。&lt;/p>
&lt;h3 id="并发多线程的挑战">“并发多线程”的挑战 &lt;a href="#%e5%b9%b6%e5%8f%91%e5%a4%9a%e7%ba%bf%e7%a8%8b%e7%9a%84%e6%8c%91%e6%88%98" class="anchor">🔗&lt;/a>&lt;/h3>&lt;p>尽管并发多线程被广泛讨论，其挑战并非源自自然原因，而是我们自己的设计选择所造成的。主要问题在于，针对单线程程序的过度优化在多线程环境中不再适用。&lt;/p>
&lt;p>具体来说，由于CPU的执行速度远超内存响应速度，我们开始对内存内容进行“预测”，从而避免CPU等待内存检查。这里的“预测”实际上是CPU和编译器对内存状态做出的越来越激进的假设。&lt;/p>
&lt;h2 id="示例分析">示例分析 &lt;a href="#%e7%a4%ba%e4%be%8b%e5%88%86%e6%9e%90" class="anchor">🔗&lt;/a>&lt;/h2>&lt;h3 id="写线程示例">写线程示例 &lt;a href="#%e5%86%99%e7%ba%bf%e7%a8%8b%e7%a4%ba%e4%be%8b" class="anchor">🔗&lt;/a>&lt;/h3>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 初始时 variable1 = variable2 = 0;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">while&lt;/span> (&lt;span style="color:#ae81ff">1&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> variable1&lt;span style="color:#f92672">++&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> variable2&lt;span style="color:#f92672">++&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="读线程示例">读线程示例 &lt;a href="#%e8%af%bb%e7%ba%bf%e7%a8%8b%e7%a4%ba%e4%be%8b" class="anchor">🔗&lt;/a>&lt;/h3>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">while&lt;/span> (&lt;span style="color:#ae81ff">1&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> local2 &lt;span style="color:#f92672">=&lt;/span> variable2;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> local1 &lt;span style="color:#f92672">=&lt;/span> variable1;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (local2 &lt;span style="color:#f92672">&amp;gt;&lt;/span> local1) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">&amp;#34;Error!&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>正常逻辑下，local2 应当始终小于或等于 local1，因为 variable1 总是在 variable2 之后增加。&lt;/p>
&lt;p>然而，现实是否如此？&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;cstdio&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;ctime&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;pthread.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;sys/time.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;unistd.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">using&lt;/span> &lt;span style="color:#66d9ef">namespace&lt;/span> std;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">unsigned&lt;/span> variable1 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">unsigned&lt;/span> variable2 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#define ITERATIONS 200000000
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">writer&lt;/span>(&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#f92672">*&lt;/span>unused) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> (;;) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> variable1 &lt;span style="color:#f92672">=&lt;/span> variable1 &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> variable2 &lt;span style="color:#f92672">=&lt;/span> variable2 &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> NULL;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">reader&lt;/span>(&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#f92672">*&lt;/span>unused) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">timeval&lt;/span> start, end;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> gettimeofday(&lt;span style="color:#f92672">&amp;amp;&lt;/span>start, NULL);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">unsigned&lt;/span> i, failureCount &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> (i&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>; i &lt;span style="color:#f92672">&amp;lt;&lt;/span> ITERATIONS; i&lt;span style="color:#f92672">++&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">unsigned&lt;/span> v2 &lt;span style="color:#f92672">=&lt;/span> variable2;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">unsigned&lt;/span> v1 &lt;span style="color:#f92672">=&lt;/span> variable1;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (v2 &lt;span style="color:#f92672">&amp;gt;&lt;/span> v1) failureCount&lt;span style="color:#f92672">++&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> gettimeofday(&lt;span style="color:#f92672">&amp;amp;&lt;/span>end, NULL);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">double&lt;/span> seconds &lt;span style="color:#f92672">=&lt;/span> end.tv_sec &lt;span style="color:#f92672">+&lt;/span> end.tv_usec &lt;span style="color:#f92672">/&lt;/span> &lt;span style="color:#ae81ff">1000000.&lt;/span> &lt;span style="color:#f92672">-&lt;/span> start.tv_sec &lt;span style="color:#f92672">-&lt;/span> start.tv_usec &lt;span style="color:#f92672">/&lt;/span> &lt;span style="color:#ae81ff">1000000.&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> printf(&lt;span style="color:#e6db74">&amp;#34;%u failure%s (%2.1f percent of the time) in %2.1f seconds&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> failureCount, failureCount &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#f92672">?&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span> &lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;s&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#ae81ff">100.&lt;/span> &lt;span style="color:#f92672">*&lt;/span> failureCount) &lt;span style="color:#f92672">/&lt;/span> ITERATIONS, seconds);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> exit(&lt;span style="color:#ae81ff">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> NULL;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>(&lt;span style="color:#66d9ef">void&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pthread_t thread1, thread2;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pthread_create(&lt;span style="color:#f92672">&amp;amp;&lt;/span>thread1, NULL, writer, NULL);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pthread_create(&lt;span style="color:#f92672">&amp;amp;&lt;/span>thread2, NULL, reader, NULL);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> (;;) sleep(&lt;span style="color:#ae81ff">1000000&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>输出结果：&lt;code>0 failures (0.0 percent of the time) in 1.2 seconds&lt;/code>&lt;/p>
&lt;h3 id="貌似是正确的">貌似是正确的？ &lt;a href="#%e8%b2%8c%e4%bc%bc%e6%98%af%e6%ad%a3%e7%a1%ae%e7%9a%84" class="anchor">🔗&lt;/a>&lt;/h3>&lt;p>程序运行的正如我们预期的那样，那么我们可以确信程序是一定正确的吗？&lt;/p>
&lt;p>不能。&lt;/p>
&lt;p>因为程序中的两个线程如果在同一个CPU上被调度，我们永远都会得到正确的结果。&lt;/p>
&lt;h3 id="线程与不同的cpu进行绑定">线程与不同的CPU进行绑定 &lt;a href="#%e7%ba%bf%e7%a8%8b%e4%b8%8e%e4%b8%8d%e5%90%8c%e7%9a%84cpu%e8%bf%9b%e8%a1%8c%e7%bb%91%e5%ae%9a" class="anchor">🔗&lt;/a>&lt;/h3>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">writer&lt;/span>(&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#f92672">*&lt;/span>unused) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cpu_set_t cpuset;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> CPU_ZERO(&lt;span style="color:#f92672">&amp;amp;&lt;/span>cpuset);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> CPU_SET(&lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#f92672">&amp;amp;&lt;/span>cpuset);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sched_setaffinity(&lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#66d9ef">sizeof&lt;/span>(cpuset), &lt;span style="color:#f92672">&amp;amp;&lt;/span>cpuset);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">reader&lt;/span>(&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#f92672">*&lt;/span>unused) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cpu_set_t cpuset;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> CPU_ZERO(&lt;span style="color:#f92672">&amp;amp;&lt;/span>cpuset);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> CPU_SET(&lt;span style="color:#ae81ff">2&lt;/span>, &lt;span style="color:#f92672">&amp;amp;&lt;/span>cpuset);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sched_setaffinity(&lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#66d9ef">sizeof&lt;/span>(cpuset), &lt;span style="color:#f92672">&amp;amp;&lt;/span>cpuset);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// p.s. 我机器是i5双核四线程，所以绑在了CPU0和CPU2上
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>结果：&lt;code>0 failures (0.0 percent of the time) in 1.4 seconds&lt;/code>&lt;/p>
&lt;h3 id="似乎仍然是准确的">似乎仍然是准确的 &lt;a href="#%e4%bc%bc%e4%b9%8e%e4%bb%8d%e7%84%b6%e6%98%af%e5%87%86%e7%a1%ae%e7%9a%84" class="anchor">🔗&lt;/a>&lt;/h3>&lt;p>尽管如此，我们考虑到CPU对变量的操作其实是作用在寄存器上，而variable1和variable2紧密相邻，这可能导致它们位于缓存的同一行。因此，它们有可能会同时被写入缓存并一起写回内存。&lt;/p>
&lt;p>为了观察不同的效果，我们尝试将这两个变量分别放置在堆和栈上。&lt;/p>
&lt;pre tabindex="0">&lt;code>0 failures (0.0 percent of the time) in 1.2 seconds
0 failures (0.0 percent of the time) in 1.2 seconds
2000000000 failures (100.0 percent of the time) in 1.2 seconds
&lt;/code>&lt;/pre>&lt;p>&lt;strong>太感人了！&lt;/strong>&lt;/p>
&lt;h3 id="我们的敌人--编译器">我们的敌人 —— 编译器 &lt;a href="#%e6%88%91%e4%bb%ac%e7%9a%84%e6%95%8c%e4%ba%ba--%e7%bc%96%e8%af%91%e5%99%a8" class="anchor">🔗&lt;/a>&lt;/h3>&lt;blockquote>
&lt;p>Multithreading bugs are very delicate.&lt;/p>&lt;/blockquote>
&lt;p>并行多线程的错误总是那么的奇妙，也许你的程序运行了几天安然无恙，但是在某一天某一时突然出现了难以复现的精妙bug。&lt;/p>
&lt;p>如果多个线程调度在同一个CPU核心上，Bug会被掩盖。 &lt;br>
如果多个变量在CPU同一行Cache上，Bug会被掩盖。 &lt;br>
如果你人品足够好的话，Bug同样会被掩盖。&lt;/p>
&lt;p>但是，如果我们排除了以上的情况后，问题就浮现出来了。&lt;/p>
&lt;p>我们来看一看reader的反汇编代码：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>(gdb) disas reader
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Dump of assembler code &lt;span style="color:#66d9ef">for&lt;/span> function reader(&lt;span style="color:#66d9ef">void&lt;/span>&lt;span style="color:#f92672">*&lt;/span>)&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">0x0000000000400950&lt;/span> &lt;span style="color:#f92672">&amp;lt;+&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#f92672">&amp;gt;:&lt;/span> push &lt;span style="color:#f92672">%&lt;/span>rbx
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">0x0000000000400951&lt;/span> &lt;span style="color:#f92672">&amp;lt;+&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#f92672">&amp;gt;:&lt;/span> xor &lt;span style="color:#f92672">%&lt;/span>eax,&lt;span style="color:#f92672">%&lt;/span>eax
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">0x0000000000400953&lt;/span> &lt;span style="color:#f92672">&amp;lt;+&lt;/span>&lt;span style="color:#ae81ff">3&lt;/span>&lt;span style="color:#f92672">&amp;gt;:&lt;/span> mov &lt;span style="color:#960050;background-color:#1e0010">$&lt;/span>&lt;span style="color:#ae81ff">0x10&lt;/span>,&lt;span style="color:#f92672">%&lt;/span>ecx
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">0x0000000000400958&lt;/span> &lt;span style="color:#f92672">&amp;lt;+&lt;/span>&lt;span style="color:#ae81ff">8&lt;/span>&lt;span style="color:#f92672">&amp;gt;:&lt;/span> mov &lt;span style="color:#960050;background-color:#1e0010">$&lt;/span>&lt;span style="color:#ae81ff">0x80&lt;/span>,&lt;span style="color:#f92672">%&lt;/span>esi
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">0x000000000040095d&lt;/span> &lt;span style="color:#f92672">&amp;lt;+&lt;/span>&lt;span style="color:#ae81ff">13&lt;/span>&lt;span style="color:#f92672">&amp;gt;:&lt;/span> xor &lt;span style="color:#f92672">%&lt;/span>ebx,&lt;span style="color:#f92672">%&lt;/span>ebx
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">0x000000000040095f&lt;/span> &lt;span style="color:#f92672">&amp;lt;+&lt;/span>&lt;span style="color:#ae81ff">15&lt;/span>&lt;span style="color:#f92672">&amp;gt;:&lt;/span> sub &lt;span style="color:#960050;background-color:#1e0010">$&lt;/span>&lt;span style="color:#ae81ff">0xa0&lt;/span>,&lt;span style="color:#f92672">%&lt;/span>rsp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">0x0000000000400966&lt;/span> &lt;span style="color:#f92672">&amp;lt;+&lt;/span>&lt;span style="color:#ae81ff">22&lt;/span>&lt;span style="color:#f92672">&amp;gt;:&lt;/span> mov &lt;span style="color:#f92672">%&lt;/span>rsp,&lt;span style="color:#f92672">%&lt;/span>rdi
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">0x0000000000400969&lt;/span> &lt;span style="color:#f92672">&amp;lt;+&lt;/span>&lt;span style="color:#ae81ff">25&lt;/span>&lt;span style="color:#f92672">&amp;gt;:&lt;/span> mov &lt;span style="color:#f92672">%&lt;/span>rsp,&lt;span style="color:#f92672">%&lt;/span>rdx
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">0x000000000040096c&lt;/span> &lt;span style="color:#f92672">&amp;lt;+&lt;/span>&lt;span style="color:#ae81ff">28&lt;/span>&lt;span style="color:#f92672">&amp;gt;:&lt;/span> rep stos &lt;span style="color:#f92672">%&lt;/span>rax,&lt;span style="color:#f92672">%&lt;/span>es:(&lt;span style="color:#f92672">%&lt;/span>rdi)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">0x000000000040096f&lt;/span> &lt;span style="color:#f92672">&amp;lt;+&lt;/span>&lt;span style="color:#ae81ff">31&lt;/span>&lt;span style="color:#f92672">&amp;gt;:&lt;/span> xor &lt;span style="color:#f92672">%&lt;/span>edi,&lt;span style="color:#f92672">%&lt;/span>edi
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">0x0000000000400971&lt;/span> &lt;span style="color:#f92672">&amp;lt;+&lt;/span>&lt;span style="color:#ae81ff">33&lt;/span>&lt;span style="color:#f92672">&amp;gt;:&lt;/span> movq &lt;span style="color:#960050;background-color:#1e0010">$&lt;/span>&lt;span style="color:#ae81ff">0x4&lt;/span>,(&lt;span style="color:#f92672">%&lt;/span>rsp)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">0x0000000000400979&lt;/span> &lt;span style="color:#f92672">&amp;lt;+&lt;/span>&lt;span style="color:#ae81ff">41&lt;/span>&lt;span style="color:#f92672">&amp;gt;:&lt;/span> callq &lt;span style="color:#ae81ff">0x400790&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span>sched_setaffinity&lt;span style="color:#960050;background-color:#1e0010">@&lt;/span>plt&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">0x000000000040097e&lt;/span> &lt;span style="color:#f92672">&amp;lt;+&lt;/span>&lt;span style="color:#ae81ff">46&lt;/span>&lt;span style="color:#f92672">&amp;gt;:&lt;/span> lea &lt;span style="color:#ae81ff">0x80&lt;/span>(&lt;span style="color:#f92672">%&lt;/span>rsp),&lt;span style="color:#f92672">%&lt;/span>rdi
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">0x0000000000400986&lt;/span> &lt;span style="color:#f92672">&amp;lt;+&lt;/span>&lt;span style="color:#ae81ff">54&lt;/span>&lt;span style="color:#f92672">&amp;gt;:&lt;/span> xor &lt;span style="color:#f92672">%&lt;/span>esi,&lt;span style="color:#f92672">%&lt;/span>esi
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">0x0000000000400988&lt;/span> &lt;span style="color:#f92672">&amp;lt;+&lt;/span>&lt;span style="color:#ae81ff">56&lt;/span>&lt;span style="color:#f92672">&amp;gt;:&lt;/span> callq &lt;span style="color:#ae81ff">0x400710&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span>gettimeofday&lt;span style="color:#960050;background-color:#1e0010">@&lt;/span>plt&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">0x000000000040098d&lt;/span> &lt;span style="color:#f92672">&amp;lt;+&lt;/span>&lt;span style="color:#ae81ff">61&lt;/span>&lt;span style="color:#f92672">&amp;gt;:&lt;/span> mov &lt;span style="color:#ae81ff">0x2006e4&lt;/span>(&lt;span style="color:#f92672">%&lt;/span>rip),&lt;span style="color:#f92672">%&lt;/span>rax &lt;span style="color:#960050;background-color:#1e0010">#&lt;/span> &lt;span style="color:#ae81ff">0x601078&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span>variable2_p&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">0x0000000000400994&lt;/span> &lt;span style="color:#f92672">&amp;lt;+&lt;/span>&lt;span style="color:#ae81ff">68&lt;/span>&lt;span style="color:#f92672">&amp;gt;:&lt;/span> mov &lt;span style="color:#ae81ff">0x2006e6&lt;/span>(&lt;span style="color:#f92672">%&lt;/span>rip),&lt;span style="color:#f92672">%&lt;/span>edx &lt;span style="color:#960050;background-color:#1e0010">#&lt;/span> &lt;span style="color:#ae81ff">0x601080&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span>variable1&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">0x000000000040099a&lt;/span> &lt;span style="color:#f92672">&amp;lt;+&lt;/span>&lt;span style="color:#ae81ff">74&lt;/span>&lt;span style="color:#f92672">&amp;gt;:&lt;/span> mov (&lt;span style="color:#f92672">%&lt;/span>rax),&lt;span style="color:#f92672">%&lt;/span>ecx
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">0x000000000040099c&lt;/span> &lt;span style="color:#f92672">&amp;lt;+&lt;/span>&lt;span style="color:#ae81ff">76&lt;/span>&lt;span style="color:#f92672">&amp;gt;:&lt;/span> mov &lt;span style="color:#960050;background-color:#1e0010">$&lt;/span>&lt;span style="color:#ae81ff">0x77359400&lt;/span>,&lt;span style="color:#f92672">%&lt;/span>eax
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">0x00000000004009a1&lt;/span> &lt;span style="color:#f92672">&amp;lt;+&lt;/span>&lt;span style="color:#ae81ff">81&lt;/span>&lt;span style="color:#f92672">&amp;gt;:&lt;/span> nopl &lt;span style="color:#ae81ff">0x0&lt;/span>(&lt;span style="color:#f92672">%&lt;/span>rax)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">0x00000000004009a8&lt;/span> &lt;span style="color:#f92672">&amp;lt;+&lt;/span>&lt;span style="color:#ae81ff">88&lt;/span>&lt;span style="color:#f92672">&amp;gt;:&lt;/span> cmp &lt;span style="color:#f92672">%&lt;/span>ecx,&lt;span style="color:#f92672">%&lt;/span>edx
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">0x00000000004009aa&lt;/span> &lt;span style="color:#f92672">&amp;lt;+&lt;/span>&lt;span style="color:#ae81ff">90&lt;/span>&lt;span style="color:#f92672">&amp;gt;:&lt;/span> adc &lt;span style="color:#960050;background-color:#1e0010">$&lt;/span>&lt;span style="color:#ae81ff">0x0&lt;/span>,&lt;span style="color:#f92672">%&lt;/span>ebx
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">0x00000000004009ad&lt;/span> &lt;span style="color:#f92672">&amp;lt;+&lt;/span>&lt;span style="color:#ae81ff">93&lt;/span>&lt;span style="color:#f92672">&amp;gt;:&lt;/span> sub &lt;span style="color:#960050;background-color:#1e0010">$&lt;/span>&lt;span style="color:#ae81ff">0x1&lt;/span>,&lt;span style="color:#f92672">%&lt;/span>eax
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">0x00000000004009b0&lt;/span> &lt;span style="color:#f92672">&amp;lt;+&lt;/span>&lt;span style="color:#ae81ff">96&lt;/span>&lt;span style="color:#f92672">&amp;gt;:&lt;/span> jne &lt;span style="color:#ae81ff">0x4009a8&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span>reader(&lt;span style="color:#66d9ef">void&lt;/span>&lt;span style="color:#f92672">*&lt;/span>)&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">88&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">0x00000000004009b2&lt;/span> &lt;span style="color:#f92672">&amp;lt;+&lt;/span>&lt;span style="color:#ae81ff">98&lt;/span>&lt;span style="color:#f92672">&amp;gt;:&lt;/span> lea &lt;span style="color:#ae81ff">0x90&lt;/span>(&lt;span style="color:#f92672">%&lt;/span>rsp),&lt;span style="color:#f92672">%&lt;/span>rdi
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">0x00000000004009ba&lt;/span> &lt;span style="color:#f92672">&amp;lt;+&lt;/span>&lt;span style="color:#ae81ff">106&lt;/span>&lt;span style="color:#f92672">&amp;gt;:&lt;/span> xor &lt;span style="color:#f92672">%&lt;/span>esi,&lt;span style="color:#f92672">%&lt;/span>esi
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">0x00000000004009bc&lt;/span> &lt;span style="color:#f92672">&amp;lt;+&lt;/span>&lt;span style="color:#ae81ff">108&lt;/span>&lt;span style="color:#f92672">&amp;gt;:&lt;/span> callq &lt;span style="color:#ae81ff">0x400710&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span>gettimeofday&lt;span style="color:#960050;background-color:#1e0010">@&lt;/span>plt&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">0x00000000004009c1&lt;/span> &lt;span style="color:#f92672">&amp;lt;+&lt;/span>&lt;span style="color:#ae81ff">113&lt;/span>&lt;span style="color:#f92672">&amp;gt;:&lt;/span> cvtsi2sdq &lt;span style="color:#ae81ff">0x98&lt;/span>(&lt;span style="color:#f92672">%&lt;/span>rsp),&lt;span style="color:#f92672">%&lt;/span>xmm0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">0x00000000004009cb&lt;/span> &lt;span style="color:#f92672">&amp;lt;+&lt;/span>&lt;span style="color:#ae81ff">123&lt;/span>&lt;span style="color:#f92672">&amp;gt;:&lt;/span> cvtsi2sdq &lt;span style="color:#ae81ff">0x90&lt;/span>(&lt;span style="color:#f92672">%&lt;/span>rsp),&lt;span style="color:#f92672">%&lt;/span>xmm1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">0x00000000004009d5&lt;/span> &lt;span style="color:#f92672">&amp;lt;+&lt;/span>&lt;span style="color:#ae81ff">133&lt;/span>&lt;span style="color:#f92672">&amp;gt;:&lt;/span> movsd &lt;span style="color:#ae81ff">0x1a3&lt;/span>(&lt;span style="color:#f92672">%&lt;/span>rip),&lt;span style="color:#f92672">%&lt;/span>xmm3 &lt;span style="color:#960050;background-color:#1e0010">#&lt;/span> &lt;span style="color:#ae81ff">0x400b80&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">0x00000000004009dd&lt;/span> &lt;span style="color:#f92672">&amp;lt;+&lt;/span>&lt;span style="color:#ae81ff">141&lt;/span>&lt;span style="color:#f92672">&amp;gt;:&lt;/span> mov &lt;span style="color:#f92672">%&lt;/span>ebx,&lt;span style="color:#f92672">%&lt;/span>eax
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">0x00000000004009df&lt;/span> &lt;span style="color:#f92672">&amp;lt;+&lt;/span>&lt;span style="color:#ae81ff">143&lt;/span>&lt;span style="color:#f92672">&amp;gt;:&lt;/span> cvtsi2sdq &lt;span style="color:#ae81ff">0x88&lt;/span>(&lt;span style="color:#f92672">%&lt;/span>rsp),&lt;span style="color:#f92672">%&lt;/span>xmm2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">0x00000000004009e9&lt;/span> &lt;span style="color:#f92672">&amp;lt;+&lt;/span>&lt;span style="color:#ae81ff">153&lt;/span>&lt;span style="color:#f92672">&amp;gt;:&lt;/span> cmp &lt;span style="color:#960050;background-color:#1e0010">$&lt;/span>&lt;span style="color:#ae81ff">0x1&lt;/span>,&lt;span style="color:#f92672">%&lt;/span>ebx
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">0x00000000004009ec&lt;/span> &lt;span style="color:#f92672">&amp;lt;+&lt;/span>&lt;span style="color:#ae81ff">156&lt;/span>&lt;span style="color:#f92672">&amp;gt;:&lt;/span> mov &lt;span style="color:#960050;background-color:#1e0010">$&lt;/span>&lt;span style="color:#ae81ff">0x400b3d&lt;/span>,&lt;span style="color:#f92672">%&lt;/span>ecx
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">0x00000000004009f1&lt;/span> &lt;span style="color:#f92672">&amp;lt;+&lt;/span>&lt;span style="color:#ae81ff">161&lt;/span>&lt;span style="color:#f92672">&amp;gt;:&lt;/span> mov &lt;span style="color:#960050;background-color:#1e0010">$&lt;/span>&lt;span style="color:#ae81ff">0x1&lt;/span>,&lt;span style="color:#f92672">%&lt;/span>edi
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">0x00000000004009f6&lt;/span> &lt;span style="color:#f92672">&amp;lt;+&lt;/span>&lt;span style="color:#ae81ff">166&lt;/span>&lt;span style="color:#f92672">&amp;gt;:&lt;/span> divsd &lt;span style="color:#f92672">%&lt;/span>xmm3,&lt;span style="color:#f92672">%&lt;/span>xmm0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">0x00000000004009fa&lt;/span> &lt;span style="color:#f92672">&amp;lt;+&lt;/span>&lt;span style="color:#ae81ff">170&lt;/span>&lt;span style="color:#f92672">&amp;gt;:&lt;/span> mov &lt;span style="color:#f92672">%&lt;/span>ebx,&lt;span style="color:#f92672">%&lt;/span>edx
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">0x00000000004009fc&lt;/span> &lt;span style="color:#f92672">&amp;lt;+&lt;/span>&lt;span style="color:#ae81ff">172&lt;/span>&lt;span style="color:#f92672">&amp;gt;:&lt;/span> mov &lt;span style="color:#960050;background-color:#1e0010">$&lt;/span>&lt;span style="color:#ae81ff">0x400b40&lt;/span>,&lt;span style="color:#f92672">%&lt;/span>esi
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">0x0000000000400a01&lt;/span> &lt;span style="color:#f92672">&amp;lt;+&lt;/span>&lt;span style="color:#ae81ff">177&lt;/span>&lt;span style="color:#f92672">&amp;gt;:&lt;/span> divsd &lt;span style="color:#f92672">%&lt;/span>xmm3,&lt;span style="color:#f92672">%&lt;/span>xmm2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">0x0000000000400a05&lt;/span> &lt;span style="color:#f92672">&amp;lt;+&lt;/span>&lt;span style="color:#ae81ff">181&lt;/span>&lt;span style="color:#f92672">&amp;gt;:&lt;/span> addsd &lt;span style="color:#f92672">%&lt;/span>xmm0,&lt;span style="color:#f92672">%&lt;/span>xmm1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">0x0000000000400a09&lt;/span> &lt;span style="color:#f92672">&amp;lt;+&lt;/span>&lt;span style="color:#ae81ff">185&lt;/span>&lt;span style="color:#f92672">&amp;gt;:&lt;/span> cvtsi2sdq &lt;span style="color:#ae81ff">0x80&lt;/span>(&lt;span style="color:#f92672">%&lt;/span>rsp),&lt;span style="color:#f92672">%&lt;/span>xmm0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">0x0000000000400a13&lt;/span> &lt;span style="color:#f92672">&amp;lt;+&lt;/span>&lt;span style="color:#ae81ff">195&lt;/span>&lt;span style="color:#f92672">&amp;gt;:&lt;/span> subsd &lt;span style="color:#f92672">%&lt;/span>xmm0,&lt;span style="color:#f92672">%&lt;/span>xmm1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">0x0000000000400a17&lt;/span> &lt;span style="color:#f92672">&amp;lt;+&lt;/span>&lt;span style="color:#ae81ff">199&lt;/span>&lt;span style="color:#f92672">&amp;gt;:&lt;/span> cvtsi2sd &lt;span style="color:#f92672">%&lt;/span>rax,&lt;span style="color:#f92672">%&lt;/span>xmm0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">0x0000000000400a1c&lt;/span> &lt;span style="color:#f92672">&amp;lt;+&lt;/span>&lt;span style="color:#ae81ff">204&lt;/span>&lt;span style="color:#f92672">&amp;gt;:&lt;/span> mov &lt;span style="color:#960050;background-color:#1e0010">$&lt;/span>&lt;span style="color:#ae81ff">0x400b3c&lt;/span>,&lt;span style="color:#f92672">%&lt;/span>eax
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">0x0000000000400a21&lt;/span> &lt;span style="color:#f92672">&amp;lt;+&lt;/span>&lt;span style="color:#ae81ff">209&lt;/span>&lt;span style="color:#f92672">&amp;gt;:&lt;/span> cmovne &lt;span style="color:#f92672">%&lt;/span>rax,&lt;span style="color:#f92672">%&lt;/span>rcx
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">0x0000000000400a25&lt;/span> &lt;span style="color:#f92672">&amp;lt;+&lt;/span>&lt;span style="color:#ae81ff">213&lt;/span>&lt;span style="color:#f92672">&amp;gt;:&lt;/span> mov &lt;span style="color:#960050;background-color:#1e0010">$&lt;/span>&lt;span style="color:#ae81ff">0x2&lt;/span>,&lt;span style="color:#f92672">%&lt;/span>eax
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">0x0000000000400a2a&lt;/span> &lt;span style="color:#f92672">&amp;lt;+&lt;/span>&lt;span style="color:#ae81ff">218&lt;/span>&lt;span style="color:#f92672">&amp;gt;:&lt;/span> mulsd &lt;span style="color:#ae81ff">0x156&lt;/span>(&lt;span style="color:#f92672">%&lt;/span>rip),&lt;span style="color:#f92672">%&lt;/span>xmm0 &lt;span style="color:#960050;background-color:#1e0010">#&lt;/span> &lt;span style="color:#ae81ff">0x400b88&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">0x0000000000400a32&lt;/span> &lt;span style="color:#f92672">&amp;lt;+&lt;/span>&lt;span style="color:#ae81ff">226&lt;/span>&lt;span style="color:#f92672">&amp;gt;:&lt;/span> subsd &lt;span style="color:#f92672">%&lt;/span>xmm2,&lt;span style="color:#f92672">%&lt;/span>xmm1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">0x0000000000400a36&lt;/span> &lt;span style="color:#f92672">&amp;lt;+&lt;/span>&lt;span style="color:#ae81ff">230&lt;/span>&lt;span style="color:#f92672">&amp;gt;:&lt;/span> divsd &lt;span style="color:#ae81ff">0x152&lt;/span>(&lt;span style="color:#f92672">%&lt;/span>rip),&lt;span style="color:#f92672">%&lt;/span>xmm0 &lt;span style="color:#960050;background-color:#1e0010">#&lt;/span> &lt;span style="color:#ae81ff">0x400b90&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">0x0000000000400a3e&lt;/span> &lt;span style="color:#f92672">&amp;lt;+&lt;/span>&lt;span style="color:#ae81ff">238&lt;/span>&lt;span style="color:#f92672">&amp;gt;:&lt;/span> callq &lt;span style="color:#ae81ff">0x400700&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span>__printf_chk&lt;span style="color:#960050;background-color:#1e0010">@&lt;/span>plt&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">0x0000000000400a43&lt;/span> &lt;span style="color:#f92672">&amp;lt;+&lt;/span>&lt;span style="color:#ae81ff">243&lt;/span>&lt;span style="color:#f92672">&amp;gt;:&lt;/span> xor &lt;span style="color:#f92672">%&lt;/span>edi,&lt;span style="color:#f92672">%&lt;/span>edi
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">0x0000000000400a45&lt;/span> &lt;span style="color:#f92672">&amp;lt;+&lt;/span>&lt;span style="color:#ae81ff">245&lt;/span>&lt;span style="color:#f92672">&amp;gt;:&lt;/span> callq &lt;span style="color:#ae81ff">0x4006f0&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span>exit&lt;span style="color:#960050;background-color:#1e0010">@&lt;/span>plt&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>简而言之，关键在以下几句：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">0x000000000040098d&lt;/span> &lt;span style="color:#f92672">&amp;lt;+&lt;/span>&lt;span style="color:#ae81ff">61&lt;/span>&lt;span style="color:#f92672">&amp;gt;:&lt;/span> mov &lt;span style="color:#ae81ff">0x2006e4&lt;/span>(&lt;span style="color:#f92672">%&lt;/span>rip),&lt;span style="color:#f92672">%&lt;/span>rax &lt;span style="color:#960050;background-color:#1e0010">#&lt;/span> &lt;span style="color:#ae81ff">0x601078&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span>variable2_p&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">0x0000000000400994&lt;/span> &lt;span style="color:#f92672">&amp;lt;+&lt;/span>&lt;span style="color:#ae81ff">68&lt;/span>&lt;span style="color:#f92672">&amp;gt;:&lt;/span> mov &lt;span style="color:#ae81ff">0x2006e6&lt;/span>(&lt;span style="color:#f92672">%&lt;/span>rip),&lt;span style="color:#f92672">%&lt;/span>edx &lt;span style="color:#960050;background-color:#1e0010">#&lt;/span> &lt;span style="color:#ae81ff">0x601080&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span>variable1&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">0x000000000040099a&lt;/span> &lt;span style="color:#f92672">&amp;lt;+&lt;/span>&lt;span style="color:#ae81ff">74&lt;/span>&lt;span style="color:#f92672">&amp;gt;:&lt;/span> mov (&lt;span style="color:#f92672">%&lt;/span>rax),&lt;span style="color:#f92672">%&lt;/span>ecx
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">0x000000000040099c&lt;/span> &lt;span style="color:#f92672">&amp;lt;+&lt;/span>&lt;span style="color:#ae81ff">76&lt;/span>&lt;span style="color:#f92672">&amp;gt;:&lt;/span> mov &lt;span style="color:#960050;background-color:#1e0010">$&lt;/span>&lt;span style="color:#ae81ff">0x77359400&lt;/span>,&lt;span style="color:#f92672">%&lt;/span>eax
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">0x00000000004009a1&lt;/span> &lt;span style="color:#f92672">&amp;lt;+&lt;/span>&lt;span style="color:#ae81ff">81&lt;/span>&lt;span style="color:#f92672">&amp;gt;:&lt;/span> nopl &lt;span style="color:#ae81ff">0x0&lt;/span>(&lt;span style="color:#f92672">%&lt;/span>rax)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">0x00000000004009a8&lt;/span> &lt;span style="color:#f92672">&amp;lt;+&lt;/span>&lt;span style="color:#ae81ff">88&lt;/span>&lt;span style="color:#f92672">&amp;gt;:&lt;/span> cmp &lt;span style="color:#f92672">%&lt;/span>ecx,&lt;span style="color:#f92672">%&lt;/span>edx
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">0x00000000004009aa&lt;/span> &lt;span style="color:#f92672">&amp;lt;+&lt;/span>&lt;span style="color:#ae81ff">90&lt;/span>&lt;span style="color:#f92672">&amp;gt;:&lt;/span> adc &lt;span style="color:#960050;background-color:#1e0010">$&lt;/span>&lt;span style="color:#ae81ff">0x0&lt;/span>,&lt;span style="color:#f92672">%&lt;/span>ebx
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">0x00000000004009ad&lt;/span> &lt;span style="color:#f92672">&amp;lt;+&lt;/span>&lt;span style="color:#ae81ff">93&lt;/span>&lt;span style="color:#f92672">&amp;gt;:&lt;/span> sub &lt;span style="color:#960050;background-color:#1e0010">$&lt;/span>&lt;span style="color:#ae81ff">0x1&lt;/span>,&lt;span style="color:#f92672">%&lt;/span>eax
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">0x00000000004009b0&lt;/span> &lt;span style="color:#f92672">&amp;lt;+&lt;/span>&lt;span style="color:#ae81ff">96&lt;/span>&lt;span style="color:#f92672">&amp;gt;:&lt;/span> jne &lt;span style="color:#ae81ff">0x4009a8&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span>reader(&lt;span style="color:#66d9ef">void&lt;/span>&lt;span style="color:#f92672">*&lt;/span>)&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">88&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>我们可以看出，循环体在+88～+96行，而对variable1与variable2的取值都放在了循环以外。&lt;/p>
&lt;blockquote>
&lt;p>注：&lt;br>
adc是带进位加法，adc $0x0, %ebx =&amp;gt; %ebx = $0x0 + %ebx + CF &lt;br>
cmp的结果正是放在CF（大于表示为溢出），ZF（相等表示为0），PF（小于表示为-1,则低8位全为1,故有偶数个1）&lt;/p>&lt;/blockquote>
&lt;p>正是这个“小意外”，导致了我们的结果要不是100%正确，要不是100%错误。&lt;/p>
&lt;h4 id="使用volitile">使用volitile（？） &lt;a href="#%e4%bd%bf%e7%94%a8volitile" class="anchor">🔗&lt;/a>&lt;/h4>&lt;p>让我们修改一下代码：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">volatile&lt;/span> &lt;span style="color:#66d9ef">unsigned&lt;/span> variable1 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">volatile&lt;/span> &lt;span style="color:#66d9ef">unsigned&lt;/span> &lt;span style="color:#f92672">*&lt;/span>variable2_p &lt;span style="color:#f92672">=&lt;/span> NULL;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#define ITERATIONS 500000000LL &lt;/span>&lt;span style="color:#75715e">// 调小一下数据规模，因为volatile太慢了_(:з」∠)_
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>我得出的来的结果是：&lt;/p>
&lt;pre tabindex="0">&lt;code>0 failures (0.0 percent of the time) in 9.6 seconds
&lt;/code>&lt;/pre>&lt;p>而作者得出的结果是：
（时间上的差异不计，因为我们的数据规模不一样，我实验的次数要多一些。&lt;/p>
&lt;pre tabindex="0">&lt;code>fish ) ./a.out
12462711 failures (24.9 percent of the time) in 3.7 seconds
&lt;/code>&lt;/pre>&lt;p>从作者的结果来看，看起来效果好了很多，虽然慢了30多倍，但是结果并不是全对全错了。&lt;/p>
&lt;p>而从我的结果来看，volatile看似神丹妙药，解决了所有的问题。(both g++ and clang++)&lt;/p>
&lt;p>&lt;strong>这是为什么呢?&lt;/strong>&lt;/p>
&lt;p>其原因在于体系结构的差异。volatile只能保证如下两点：&lt;/p>
&lt;ul>
&lt;li>volatile变量的访问不会优化成寄存器访问，而是每次都去访问“内存”（这个引号一会再解释）&lt;/li>
&lt;li>volatile变量间的访问顺序不会被编译器乱序&lt;/li>
&lt;/ul>
&lt;p>而其他的一切，volatile和编译器都不会给出任何保证。&lt;/p>
&lt;p>例如，不同的CPU都有其内部的私有Cache，CPU的内存访问，如果命中了Cache，则不会真正的访问内存。但由于其私有Cache对于其它的CPU是不可见的，使用volatile就埋下的Bug的种子。&lt;/p>
&lt;p>虽然在我们的实验中，程序运行的很好，没有出现Bug。但是，一是由于多线程的Bug都是subtle和delicate的，我不能保证在一个需要7x24工作的服务器程序中，它不会出现任何Bug；二是至少我们的代码是** not portable **的，如果有一天，我们从x86-64平台切换到了&lt;code>PowerPC&lt;/code>？或是&lt;code>IA64&lt;/code>？我们不能保证在这些体系结构上，编译器和CPU能为我们提供同样的保障。&lt;/p>
&lt;p>于是有人高声疾呼： volatile不能用来做为多线程的同步机制！&lt;/p>
&lt;blockquote>
&lt;p>补充于20240317：在一台老旧的安卓手机上重复了实验，volatile确实无法提供相关的保障&lt;/p>&lt;/blockquote>
&lt;pre tabindex="0">&lt;code>~/tmp $ clang++ -O2 a.cc &amp;amp;&amp;amp; ./a.out
99880586 failures (49.9 percent of the time) in 3.0 seconds
&lt;/code>&lt;/pre>&lt;h4 id="小心cpu的行为">小心CPU的行为 &lt;a href="#%e5%b0%8f%e5%bf%83cpu%e7%9a%84%e8%a1%8c%e4%b8%ba" class="anchor">🔗&lt;/a>&lt;/h4>&lt;p>在先前的实验中，尽管程序的表现与预期一致，但我们无法确保CPU将始终按顺序执行代码。实际上，CPU可能会对操作顺序进行优化，例如，将var1++和var2++的执行顺序调换，这在当前主流的CPU中是常见的做法。&lt;/p>
&lt;p>值得注意的是，由于乱序执行会导致功耗增加，某些处理器如ARM和Intel Atom已经取消了这一机制。然而，我们无法预知未来代码可能会在哪种硬件架构上运行，例如ARM集群，这需要我们保持警惕。&lt;/p>
&lt;h4 id="避免使用锁">避免使用锁 &lt;a href="#%e9%81%bf%e5%85%8d%e4%bd%bf%e7%94%a8%e9%94%81" class="anchor">🔗&lt;/a>&lt;/h4>&lt;p>通常情况下，通过引入互斥锁（mutex）似乎能够解决并发问题。然而，根据作者的测试，引入互斥锁可能会导致程序速度降低至原来的1/130，而自旋锁（spinlock）也可能使得速度降低至原来的1/4。&lt;/p>
&lt;p>因此，我们应该暂缓，仔细考虑作者接下来的建议。&lt;/p>
&lt;h3 id="内存屏障的应用">内存屏障的应用 &lt;a href="#%e5%86%85%e5%ad%98%e5%b1%8f%e9%9a%9c%e7%9a%84%e5%ba%94%e7%94%a8" class="anchor">🔗&lt;/a>&lt;/h3>&lt;p>在多CPU环境中，处理器往往独立运行，不会协调彼此的操作。&lt;/p>
&lt;p>目前，我们面临两个并不理想的解决方案：一是将所有线程限制在单个CPU上运行，二是通过引入重量级锁来同步操作。这些方法都不尽人意，且效率低下。&lt;/p>
&lt;p>实际上，我们需要做的是，通过内存屏障技术，暂时阻止编译器或CPU对程序中的数据读写操作进行重排序。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">for&lt;/span> (;;) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> variable1 &lt;span style="color:#f92672">=&lt;/span> variable1 &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> barrier();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">*&lt;/span>variable2 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">*&lt;/span>variable2 &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这样我们保证了，在var1++必然早于var2++。var2++后面也可以加一道barrier，只不过在我们的场景下，提供这种保证是不必须的。&lt;/p>
&lt;p>作者又做了一次试验。&lt;/p>
&lt;pre tabindex="0">&lt;code>fish ) ./a.out
260 failures (0.0 percent of the time) in 0.9 seconds
&lt;/code>&lt;/pre>&lt;p>这次且错误减少了许多。&lt;/p>
&lt;p>我们再把读线程写加上memory barrier.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">for&lt;/span> (i&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>; i &lt;span style="color:#f92672">&amp;lt;&lt;/span> ITERATIONS; i&lt;span style="color:#f92672">++&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">unsigned&lt;/span> v2 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">*&lt;/span>variable2;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> barrier();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">unsigned&lt;/span> v1 &lt;span style="color:#f92672">=&lt;/span> variable1;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (v2 &lt;span style="color:#f92672">&amp;gt;&lt;/span> v1) failureCount&lt;span style="color:#f92672">++&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>看看结果：&lt;/p>
&lt;pre tabindex="0">&lt;code>fish ) ./a.out
0 failures (0.0 percent of the time) in 4.2 seconds
&lt;/code>&lt;/pre>&lt;p>程序表现出了正确的结果。&lt;/p>
&lt;p>我们可以看出，如果你对线程A的读写顺序做出要求，必然的，你也要对线程B的顺序做要求，以此类推，线程C，线程D……&lt;/p>
&lt;p>所以，&lt;strong>Memory barriers always come in pairs, or triplets or more.&lt;/strong>&lt;/p>
&lt;p>同样的，线程锁也是这样的，自己锁自己总不是一种愉快的体验（笑&lt;/p>
&lt;h3 id="cpu的乱序执行">CPU的乱序执行 &lt;a href="#cpu%e7%9a%84%e4%b9%b1%e5%ba%8f%e6%89%a7%e8%a1%8c" class="anchor">🔗&lt;/a>&lt;/h3>&lt;p>我们可以看到PowerPC有三种内存屏障，而DEC Alpha平台有更多。这意味着，CPU使用更激进的策略来重排指令，而强制限制其重排的代价是非常高的。&lt;/p>
&lt;p>而x86平台则非常守序，作者猜测其原因是由于早期x86的指令技术并非完善，而在那时内存与CPU的速度不像现在这样悬殊，所以x86使用了&lt;code>strongly ordered memory&lt;/code>而非像上面几款CPU一样的采用过多的指令重排序。如今，由于x86背上了向前兼容性的包袱，看似我们的&amp;quot;好日子&amp;quot;一直不会结束。&lt;/p>
&lt;p>x86-64，做为x86的64位升级版，同样没有实现&lt;code>weakly ordered&lt;/code>，或者说，保留了实现&lt;code>weakly ordered&lt;/code>的权利。而&lt;code>IA64&lt;/code>平台，如&lt;code>Itanium&lt;/code>，则实现了&lt;code>weakly ordered&lt;/code>。&lt;/p>
&lt;p>作者猜测x86_64之所以保守，是为了与IA64平台对抗。x86_64的对于x86良好的兼容性可以让程序员多活几年，所以x86_64在市场的表现更好。&lt;/p>
&lt;p>作者还表示，而苹果放弃IA64平台转投x86-64多少有一些可惜，因为苹果并没有移植性问题，PowerPC已经逐渐衰落，为什么不试试IA64呢。&lt;/p>
&lt;p>实际上，根据Wikipedia，现在支持IA64的操作系统非常少，只有WinNT Family，Red Hat Linux，Debian/Gentoo/Suse以及其它。而从Windows Server 2008 R2之后，Microsoft也表示不再支持Itanium。所以从现在看来，IA64平台相对x86/x64来说，是失败的。&lt;/p>
&lt;h3 id="双重检查锁">双重检查锁 &lt;a href="#%e5%8f%8c%e9%87%8d%e6%a3%80%e6%9f%a5%e9%94%81" class="anchor">🔗&lt;/a>&lt;/h3>&lt;p>让我们看一下如下的Obj-C代码&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-objc" data-lang="objc">&lt;span style="display:flex;">&lt;span>+ &lt;span style="color:#a6e22e">getSharedObject&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">id&lt;/span> sharedObject;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#f92672">!&lt;/span> sharedObject) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> LOCK;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#f92672">!&lt;/span> sharedObject) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sharedObject &lt;span style="color:#f92672">=&lt;/span> [[self alloc] init];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> UNLOCK;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> sharedObject;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这是非常经典的一种DCLP(Double Checked Lock Pattern)的实现。&lt;/p>
&lt;p>这个看起来不错，但是你已经知道这并不靠谱了。当我们初始化我们的共享单例，先要再修改类内的指针，使其指向一块声明好的内存，再初始化一个sharedObject的instance。&lt;/p>
&lt;p>不过，你是知道的，CPU和编译器会把一切都搞砸，它们会以任意的顺序执行我们的命令，同时处理器之间互相不通气，于是就会出现如下的情况：&lt;/p>
&lt;p>线程A为指针声明了一段空间，但是还没来及初始化这个instance，线程A就被挂起了。&lt;/p>
&lt;p>之后线程B接管一切，发现指针有值，结果因为访问了野指针导致程序挂掉。&lt;/p>
&lt;p>不过根据上面的文章，你们应该知道怎么处理这个问题了 —— 试试内存屏障！&lt;/p>
&lt;p>p.s. 如果大家对obj-c不熟悉的话，可以看我另外一篇文章。那篇文章是关于Scott Meyers大神写的一篇论文，专门用来讨论DCLP问题的。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-objc" data-lang="objc">&lt;span style="display:flex;">&lt;span>+ &lt;span style="color:#a6e22e">getSharedObject&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">id&lt;/span> sharedObject;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#f92672">!&lt;/span> sharedObject) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> LOCK;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#f92672">!&lt;/span> sharedObject) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">id&lt;/span> temp &lt;span style="color:#f92672">=&lt;/span> [[self alloc] init];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> OSMemoryBarrier();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sharedObject &lt;span style="color:#f92672">=&lt;/span> temp;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> UNLOCK;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> OSMemoryBarrier();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> sharedObject;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>而在《C++ and the Perils of Double-Checked Locking》一文中，Scott Meyers和Andrei Alexandrescu给出的解决方案如下。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>Singleton&lt;span style="color:#f92672">*&lt;/span> Singleton&lt;span style="color:#f92672">::&lt;/span>instance () {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Singleton&lt;span style="color:#f92672">*&lt;/span> tmp &lt;span style="color:#f92672">=&lt;/span> pInstance;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// insert memory barrier
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// clear the cache to flush ``pInstance``
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// prevents &amp;#34;downwards migration&amp;#34; of Singleton’s construction (by another thread);
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> (tmp &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Lock lock;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tmp &lt;span style="color:#f92672">=&lt;/span> pInstance;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (tmp &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tmp &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> Singleton;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// insert memory barrier
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// prevent optimistic that eliminate the temporary variable ``tmp``
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// prevents &amp;#34;upwards migration&amp;#34; of pInstance’s initialization
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> pInstance &lt;span style="color:#f92672">=&lt;/span> tmp;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> tmp;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>两种解决方案的memory barrier插入的位置不同。但是都不能说是错的。因为一个是传static instance，一个是传pointer。&lt;/p>
&lt;p>其实还有更“暴力”的方法。&lt;/p>
&lt;p>直接来一把大锁，哐当把整个函数锁起来，并且在每一个线程内保留一个&lt;strong>本线程专属&lt;/strong>指向单例的指针（做cache）。这样N个线程只需要调用这个函数N次，线程竞争也相对少很多。并且根据Linux下的futex技术，无竞争下的锁相对节省了不少资源。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>Singleton&lt;span style="color:#f92672">*&lt;/span> Singleton&lt;span style="color:#f92672">::&lt;/span>instance() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Lock lock;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span>(pInstance &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pInstance &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> Singleton;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> pInstance;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="我们真的需要这么做吗">我们真的需要这么做吗 &lt;a href="#%e6%88%91%e4%bb%ac%e7%9c%9f%e7%9a%84%e9%9c%80%e8%a6%81%e8%bf%99%e4%b9%88%e5%81%9a%e5%90%97" class="anchor">🔗&lt;/a>&lt;/h3>&lt;p>上面的obj-c代码中，保证双重检查锁正确的，其实是第二个内存屏障。但是，在那里，我们需要的其实是一个&amp;quot;data dependency barrier&amp;quot;。&lt;/p>
&lt;p>Linux内核中给出很多经过精心优化的内存屏障，我们在这里可以使用。不过，要在使用的时候写好注释，一是为了未来的验证，二是为了记录自己当时的思路。&lt;/p>
&lt;p>毕竟多线程的操作要小心再小心，我们需要充足的理由，更多的小心来应对。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-obj-c" data-lang="obj-c">&lt;span style="display:flex;">&lt;span>+ &lt;span style="color:#a6e22e">getSharedObject&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">id&lt;/span> sharedObject;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#f92672">!&lt;/span> sharedObject) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> LOCK;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#f92672">!&lt;/span> sharedObject) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">id&lt;/span> temp &lt;span style="color:#f92672">=&lt;/span> [[self alloc] init];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> OSMemoryBarrier();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sharedObject &lt;span style="color:#f92672">=&lt;/span> temp;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> UNLOCK;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">/* data dependency memory barrier here */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> sharedObject;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="一切都结束了吗">一切都结束了吗？ &lt;a href="#%e4%b8%80%e5%88%87%e9%83%bd%e7%bb%93%e6%9d%9f%e4%ba%86%e5%90%97" class="anchor">🔗&lt;/a>&lt;/h3>&lt;p>是的。不过让我们总结一下吧。&lt;/p>
&lt;p>&lt;img src="https://github.com/Wizmann/assets/raw/master/wizmann-tk-pic/barrier_tank.png" alt="Mutex Tank">&lt;/p>
&lt;ul>
&lt;li>处理器和编译器并不能充分保证代码执行的顺序，它们会把你的代码到处移动。所以&lt;strong>Be warned and wary!&lt;/strong>&lt;/li>
&lt;li>多线程的错误是非常subtle和delicate的，所以我们很难设计测试用例&lt;/li>
&lt;li>因此，别指责QA了，他们也不是故意的。RD要对自己的代码负责&lt;/li>
&lt;li>锁很安全，但是也很重&lt;/li>
&lt;li>内存屏障是一种更快的，不阻塞的，不会死锁的一种锁的替代物。它们总要花费更多的心思，并且也不是到处可用的银弹。但是它确实很快，有更好的伸缩性。&lt;/li>
&lt;li>内存屏障往往是成对出现的。了解第二个内存屏障要出现在哪里，有助于你理解你的代码，即使你所使用的体系结构不需要第二个内存屏障。&lt;/li>
&lt;/ul>
&lt;h3 id="扩展阅读">扩展阅读 &lt;a href="#%e6%89%a9%e5%b1%95%e9%98%85%e8%af%bb" class="anchor">🔗&lt;/a>&lt;/h3>&lt;p>&lt;a href="https://www.kernel.org/doc/Documentation/memory-barriers.txt">LINUX KERNEL MEMORY BARRIERS&lt;/a>&lt;/p>
&lt;p>&lt;a href="http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.17.8112">Memory Consistency and Event Ordering in Scalable Shared-Memory Multiprocessors&lt;/a>&lt;/p></description></item></channel></rss>