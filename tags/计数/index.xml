<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>计数 on Maerlyn's Rainbow</title><link>https://wizmann.top/tags/%E8%AE%A1%E6%95%B0/</link><description>Recent content in 计数 on Maerlyn's Rainbow</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Sun, 14 Oct 2018 00:00:00 +0000</lastBuildDate><atom:link href="https://wizmann.top/tags/%E8%AE%A1%E6%95%B0/index.xml" rel="self" type="application/rss+xml"/><item><title>容斥原理以及一些题目</title><link>https://wizmann.top/posts/inclusive-exclusive-principle/</link><pubDate>Sun, 14 Oct 2018 00:00:00 +0000</pubDate><guid>https://wizmann.top/posts/inclusive-exclusive-principle/</guid><description>&lt;h2 id="什么是容斥原理">什么是容斥原理 &lt;a href="#%e4%bb%80%e4%b9%88%e6%98%af%e5%ae%b9%e6%96%a5%e5%8e%9f%e7%90%86" class="anchor">🔗&lt;/a>&lt;/h2>&lt;p>容斥原理是一种计数手段。例如在下图中，我们想&lt;strong>不重复、不遗漏&lt;/strong>的求出包含在ABC三个集合中所包含的元素的个数，应该使用怎么样的方法呢？&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/Wizmann/assets/master/blog/181007-Inclusion-exclusion-principle/500px-Inclusion-exclusion.svg.png" alt="image">&lt;/p>
&lt;p>&lt;img src="https://github.com/Wizmann/assets/raw/master/blog/181007-Inclusion-exclusion-principle/formula.PNG" alt="formula">&lt;/p>
&lt;p>这个问题对于我们来说并不陌生，当然也并不困难。直观的方法是把所有的元素计数，再把重复的元素排除出去。这种计数的方法，有“容”有“斥”，我们讲其称做“容斥原理”。&lt;/p>
&lt;h2 id="容斥原理的应用">容斥原理的应用 &lt;a href="#%e5%ae%b9%e6%96%a5%e5%8e%9f%e7%90%86%e7%9a%84%e5%ba%94%e7%94%a8" class="anchor">🔗&lt;/a>&lt;/h2>&lt;p>小规模的计数问题自然难不倒我们，我们甚至可以使用&lt;code>visit[]&lt;/code>数组来记录某元素是否出现。但是当问题的规模增大时，使用数组记录这种方式需要使用更多的内存，在很多情况下，这是我们不能接受的。&lt;/p>
&lt;h3 id="考虑一个问题">考虑一个问题 &lt;a href="#%e8%80%83%e8%99%91%e4%b8%80%e4%b8%aa%e9%97%ae%e9%a2%98" class="anchor">🔗&lt;/a>&lt;/h3>&lt;blockquote>
&lt;p>问题：统计在1~N中的，能被2或3整除的数。(1 &amp;lt;= N &amp;lt;= 1e9)&lt;/p>&lt;/blockquote>
&lt;p>我们先把这个问题拆成两部分来看：&lt;/p>
&lt;ol>
&lt;li>N以内的，能被2整除的数&lt;/li>
&lt;li>N以内的，能被3整除的数&lt;/li>
&lt;/ol>
&lt;p>这两个问题都非常简单，我们可以直接使用除法进行求解，其结果分别为&lt;code>N/2&lt;/code>和&lt;code>N/3&lt;/code>。&lt;/p>
&lt;p>与此同时，我们不能忽略同时能被2和3整除的数。这里我们先求得2和3的最小公倍数6，然后应用容斥原理，将重复计数的，能同时被2和3整除的数减去，即得到最后的结果。&lt;/p>
&lt;h3 id="一个更复杂的问题-hdu-2204eddy的爱好">一个更复杂的问题 （HDU-2204，Eddy的爱好） &lt;a href="#%e4%b8%80%e4%b8%aa%e6%9b%b4%e5%a4%8d%e6%9d%82%e7%9a%84%e9%97%ae%e9%a2%98-hdu-2204eddy%e7%9a%84%e7%88%b1%e5%a5%bd" class="anchor">🔗&lt;/a>&lt;/h3>&lt;blockquote>
&lt;p>给你一个正整数N，确定在1到N之间有多少个可以表示成M^K（K&amp;gt;1)的数。 (1 &amp;lt;= N &amp;lt;=1e18)&lt;/p>&lt;/blockquote>
&lt;p>这里我们先考虑K=2和3时的情况。对于正整数N，我们有&lt;code>pow(K, 1.0/2)&lt;/code>个数可以表示为&lt;code>2^K&lt;/code>；有&lt;code>pow(K, 1.0/3)&lt;/code>个数可以表示为&lt;code>3^K&lt;/code>。这个原理非常简单，这里不做展开。&lt;/p>
&lt;p>但是，对于N=64来说，既可以表示为&lt;code>4^3&lt;/code>，又可以表示为&lt;code>8^2&lt;/code>。那么在上面计数的时候一定出现了重复计数的情况。所以根据容斥原理，我们将所有6的乘方全部排除。&lt;/p>
&lt;p>那么对于N=4096的情况，它可以表示为&lt;code>2^12&lt;/code>。那么在计数中我们是否需要考虑12的乘方呢？答案是否定的，因为12的乘方一定是6的乘方，这种情况我们已经处理过了，所以不需要再次处理。推而广之，若K可以分解质因数为&lt;code>a^k1 + b^k2 + c^k3&lt;/code>，当且仅当&lt;code>k1 == k2 == k3 == 1&lt;/code>时，我们才进行计数。&lt;/p>
&lt;p>现在我们考虑更普遍的情况，对于任意K，我们先对其进行质因数分解。根据容斥原理，当其质因数的个数为奇数时，我们对其进行计数；为偶数时，我们从计数中排除这种重复情况。&lt;/p>
&lt;h2 id="更多的例题">更多的例题 &lt;a href="#%e6%9b%b4%e5%a4%9a%e7%9a%84%e4%be%8b%e9%a2%98" class="anchor">🔗&lt;/a>&lt;/h2>&lt;h3 id="计数不能被集合里的数整除的数hdu---1796">计数：不能被集合里的数整除的数（HDU - 1796） &lt;a href="#%e8%ae%a1%e6%95%b0%e4%b8%8d%e8%83%bd%e8%a2%ab%e9%9b%86%e5%90%88%e9%87%8c%e7%9a%84%e6%95%b0%e6%95%b4%e9%99%a4%e7%9a%84%e6%95%b0hdu---1796" class="anchor">🔗&lt;/a>&lt;/h3>&lt;blockquote>
&lt;p>给定一个正整数集合，求在1~N中，有多少个数不能被集合中的数整除。&lt;/p>&lt;/blockquote>
&lt;p>这道题是第一个例子的扩展。我们枚举集合的子集合，并求出子集合的最小公倍数，使用容斥原理进行计数即可。&lt;/p>
&lt;h3 id="计数集合中至少有一对数的最大公约数为1的集合数poj---1091">计数：集合中至少有一对数的最大公约数为1的集合数（POJ - 1091） &lt;a href="#%e8%ae%a1%e6%95%b0%e9%9b%86%e5%90%88%e4%b8%ad%e8%87%b3%e5%b0%91%e6%9c%89%e4%b8%80%e5%af%b9%e6%95%b0%e7%9a%84%e6%9c%80%e5%a4%a7%e5%85%ac%e7%ba%a6%e6%95%b0%e4%b8%ba1%e7%9a%84%e9%9b%86%e5%90%88%e6%95%b0poj---1091" class="anchor">🔗&lt;/a>&lt;/h3>&lt;blockquote>
&lt;p>求大小为N+1的集合A[N + 1]，对于任意A[i]有 A[i] &amp;lt;= M，且A[N + 1]一定包含整数M，集合内的数可以重复。问有多少数这样的集合，使得集合中至少有一对数的最大公约数为1。&lt;/p>&lt;/blockquote>
&lt;p>这道题的关键在于每一个集合都必须包含M。我们可以反向求解，“至少有一对的最大公约数为1”的否命题为“所有的数对的最大公约数均不为1”。这里枚举所有的最大公约数的值，并且使用容斥原理排除重复记数。&lt;/p>
&lt;h3 id="计数平面上斜率不同的点hdu---2841">计数：平面上斜率不同的点（HDU - 2841） &lt;a href="#%e8%ae%a1%e6%95%b0%e5%b9%b3%e9%9d%a2%e4%b8%8a%e6%96%9c%e7%8e%87%e4%b8%8d%e5%90%8c%e7%9a%84%e7%82%b9hdu---2841" class="anchor">🔗&lt;/a>&lt;/h3>&lt;blockquote>
&lt;p>给定整数N、M。求一共有多少种不同的k=n/m，使得 1 &amp;lt;= n &amp;lt;= N，1 &amp;lt;= m &amp;lt;= M。&lt;/p>&lt;/blockquote>
&lt;p>因为k=n/m，所以在n和m的取值不互质时，我们可以将其进行约分，就会产生可能的计数重复。所以本题可以转化为求“一共有多少对互质的n、m”。我们可以枚举m来求n，就又可以转化为“对于给定的m，有多少个n与其互质”。此时可以对m进行分解质因数，使用容斥原理进行统计。&lt;/p>
&lt;h3 id="容斥原理--dp-leetcode---920-number-of-music-playlists">容斥原理 + DP （Leetcode - 920. Number of Music Playlists） &lt;a href="#%e5%ae%b9%e6%96%a5%e5%8e%9f%e7%90%86--dp-leetcode---920-number-of-music-playlists" class="anchor">🔗&lt;/a>&lt;/h3>&lt;blockquote>
&lt;p>给定N种不同的元素，让你生成一个长度为L的列表，问有多少种不同的列表组合满足：&lt;/p>&lt;/blockquote>
&lt;ol>
&lt;li>所有的元素至少出现一次&lt;/li>
&lt;li>相同的元素之间至少距离K&lt;/li>
&lt;/ol>
&lt;p>本题的难度在于“所有的元素至少出现一次”，如果无脑DP的话，我们需要使用一维的DP来记录元素出现的情况。不过我们可以忽略这个条件，直接求意为“长度为L的列表，有多少个组合满足相同元素之间至少距离K”。这个问题我们可以使用O(N)的DP来解决。&lt;/p>
&lt;p>此时的问题是我们求出来的结果可能不满足“所有的元素至少出现一次”，也就是说我们的列表里可能有不足N个元素。此时我们使用容斥原理，减去列表中不足N个元素的情况。&lt;/p>
&lt;h2 id="如果我们来出题">如果我们来出题&amp;hellip; &lt;a href="#%e5%a6%82%e6%9e%9c%e6%88%91%e4%bb%ac%e6%9d%a5%e5%87%ba%e9%a2%98" class="anchor">🔗&lt;/a>&lt;/h2>&lt;p>对于容斥原理，如果我们站在出题人的角度，可以将其应用在如下几类“求并集的大小”的（伪）数论问题上：求能被集合中的数整数的数、求能表示为集合中的数的乘方的数、求与给定的数互质的数等。也可以用来配合DP求组合数。&lt;/p>
&lt;p>但无论包装成什么样子的题目，如果它的核心是一个计数问题，并且涉及到“求并集的大小”，我们就可以尝试使用容斥原理来求解。&lt;/p>
&lt;h2 id="参考链接">参考链接 &lt;a href="#%e5%8f%82%e8%80%83%e9%93%be%e6%8e%a5" class="anchor">🔗&lt;/a>&lt;/h2>&lt;ul>
&lt;li>&lt;a href="https://zh.wikipedia.org/wiki/%E6%8E%92%E5%AE%B9%E5%8E%9F%E7%90%86">容斥原理 - Wikipedia&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://vjudge.net/contest/253352#overview">ACM老年队容斥原理&lt;/a>&lt;/li>
&lt;/ul></description></item></channel></rss>