<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Asm on Maerlyn's Rainbow</title><link>https://wizmann.top/tags/asm/</link><description>Recent content in Asm on Maerlyn's Rainbow</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Thu, 08 May 2014 19:05:26 +0000</lastBuildDate><atom:link href="https://wizmann.top/tags/asm/index.xml" rel="self" type="application/rss+xml"/><item><title>内存屏障初探</title><link>https://wizmann.top/posts/read-paper-barrier/</link><pubDate>Thu, 08 May 2014 19:05:26 +0000</pubDate><guid>https://wizmann.top/posts/read-paper-barrier/</guid><description>&lt;h2 id="原文地址">原文地址 &lt;a href="#%e5%8e%9f%e6%96%87%e5%9c%b0%e5%9d%80" class="anchor">🔗&lt;/a>&lt;/h2>&lt;p>&lt;a href="http://ridiculousfish.com/blog/posts/barrier.html">Barrier February 17th, 2007&lt;/a>&lt;/p>
&lt;h2 id="前言多核时代的挑战">前言：多核时代的挑战 &lt;a href="#%e5%89%8d%e8%a8%80%e5%a4%9a%e6%a0%b8%e6%97%b6%e4%bb%a3%e7%9a%84%e6%8c%91%e6%88%98" class="anchor">🔗&lt;/a>&lt;/h2>&lt;p>尽管80核心的浮点运算巨兽仍然遥不可及，多核处理器的时代已经到来。多核处理器的概念并非新鲜事物，在Power Macintosh 9500中就已经采用了多核处理器技术。现在，让我们深入理解多核处理器的内在机制。&lt;/p>
&lt;h2 id="线程技术探讨">线程技术探讨 &lt;a href="#%e7%ba%bf%e7%a8%8b%e6%8a%80%e6%9c%af%e6%8e%a2%e8%ae%a8" class="anchor">🔗&lt;/a>&lt;/h2>&lt;h3 id="名词解释">名词解释 &lt;a href="#%e5%90%8d%e8%af%8d%e8%a7%a3%e9%87%8a" class="anchor">🔗&lt;/a>&lt;/h3>&lt;h4 id="线程">线程 &lt;a href="#%e7%ba%bf%e7%a8%8b" class="anchor">🔗&lt;/a>&lt;/h4>&lt;p>线程是一种拥有共享地址空间的、能被抢占式调度的执行上下文。&lt;/p>
&lt;h4 id="多线程">多线程 &lt;a href="#%e5%a4%9a%e7%ba%bf%e7%a8%8b" class="anchor">🔗&lt;/a>&lt;/h4>&lt;p>多线程是一种用于简化控制流、绕过阻塞系统调用的方法，并不专门用于实现程序的并行化。&lt;/p>
&lt;h4 id="并发多线程">并发多线程 &lt;a href="#%e5%b9%b6%e5%8f%91%e5%a4%9a%e7%ba%bf%e7%a8%8b" class="anchor">🔗&lt;/a>&lt;/h4>&lt;p>物理上并行执行的线程，旨在通过利用多核处理器优化系统性能。&lt;/p>
&lt;h3 id="并发多线程的挑战">“并发多线程”的挑战 &lt;a href="#%e5%b9%b6%e5%8f%91%e5%a4%9a%e7%ba%bf%e7%a8%8b%e7%9a%84%e6%8c%91%e6%88%98" class="anchor">🔗&lt;/a>&lt;/h3>&lt;p>尽管并发多线程被广泛讨论，其挑战并非源自自然原因，而是我们自己的设计选择所造成的。主要问题在于，针对单线程程序的过度优化在多线程环境中不再适用。&lt;/p>
&lt;p>具体来说，由于CPU的执行速度远超内存响应速度，我们开始对内存内容进行“预测”，从而避免CPU等待内存检查。这里的“预测”实际上是CPU和编译器对内存状态做出的越来越激进的假设。&lt;/p>
&lt;h2 id="示例分析">示例分析 &lt;a href="#%e7%a4%ba%e4%be%8b%e5%88%86%e6%9e%90" class="anchor">🔗&lt;/a>&lt;/h2>&lt;h3 id="写线程示例">写线程示例 &lt;a href="#%e5%86%99%e7%ba%bf%e7%a8%8b%e7%a4%ba%e4%be%8b" class="anchor">🔗&lt;/a>&lt;/h3>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 初始时 variable1 = variable2 = 0;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">while&lt;/span> (&lt;span style="color:#ae81ff">1&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> variable1&lt;span style="color:#f92672">++&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> variable2&lt;span style="color:#f92672">++&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="读线程示例">读线程示例 &lt;a href="#%e8%af%bb%e7%ba%bf%e7%a8%8b%e7%a4%ba%e4%be%8b" class="anchor">🔗&lt;/a>&lt;/h3>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">while&lt;/span> (&lt;span style="color:#ae81ff">1&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> local2 &lt;span style="color:#f92672">=&lt;/span> variable2;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> local1 &lt;span style="color:#f92672">=&lt;/span> variable1;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (local2 &lt;span style="color:#f92672">&amp;gt;&lt;/span> local1) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">&amp;#34;Error!&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>正常逻辑下，local2 应当始终小于或等于 local1，因为 variable1 总是在 variable2 之后增加。&lt;/p>
&lt;p>然而，现实是否如此？&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;cstdio&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;ctime&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;pthread.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;sys/time.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;unistd.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">using&lt;/span> &lt;span style="color:#66d9ef">namespace&lt;/span> std;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">unsigned&lt;/span> variable1 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">unsigned&lt;/span> variable2 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#define ITERATIONS 200000000
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">writer&lt;/span>(&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#f92672">*&lt;/span>unused) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> (;;) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> variable1 &lt;span style="color:#f92672">=&lt;/span> variable1 &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> variable2 &lt;span style="color:#f92672">=&lt;/span> variable2 &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> NULL;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">reader&lt;/span>(&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#f92672">*&lt;/span>unused) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">timeval&lt;/span> start, end;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> gettimeofday(&lt;span style="color:#f92672">&amp;amp;&lt;/span>start, NULL);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">unsigned&lt;/span> i, failureCount &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> (i&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>; i &lt;span style="color:#f92672">&amp;lt;&lt;/span> ITERATIONS; i&lt;span style="color:#f92672">++&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">unsigned&lt;/span> v2 &lt;span style="color:#f92672">=&lt;/span> variable2;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">unsigned&lt;/span> v1 &lt;span style="color:#f92672">=&lt;/span> variable1;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (v2 &lt;span style="color:#f92672">&amp;gt;&lt;/span> v1) failureCount&lt;span style="color:#f92672">++&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> gettimeofday(&lt;span style="color:#f92672">&amp;amp;&lt;/span>end, NULL);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">double&lt;/span> seconds &lt;span style="color:#f92672">=&lt;/span> end.tv_sec &lt;span style="color:#f92672">+&lt;/span> end.tv_usec &lt;span style="color:#f92672">/&lt;/span> &lt;span style="color:#ae81ff">1000000.&lt;/span> &lt;span style="color:#f92672">-&lt;/span> start.tv_sec &lt;span style="color:#f92672">-&lt;/span> start.tv_usec &lt;span style="color:#f92672">/&lt;/span> &lt;span style="color:#ae81ff">1000000.&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> printf(&lt;span style="color:#e6db74">&amp;#34;%u failure%s (%2.1f percent of the time) in %2.1f seconds&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> failureCount, failureCount &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#f92672">?&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span> &lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;s&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#ae81ff">100.&lt;/span> &lt;span style="color:#f92672">*&lt;/span> failureCount) &lt;span style="color:#f92672">/&lt;/span> ITERATIONS, seconds);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> exit(&lt;span style="color:#ae81ff">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> NULL;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>(&lt;span style="color:#66d9ef">void&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pthread_t thread1, thread2;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pthread_create(&lt;span style="color:#f92672">&amp;amp;&lt;/span>thread1, NULL, writer, NULL);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pthread_create(&lt;span style="color:#f92672">&amp;amp;&lt;/span>thread2, NULL, reader, NULL);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> (;;) sleep(&lt;span style="color:#ae81ff">1000000&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>输出结果：&lt;code>0 failures (0.0 percent of the time) in 1.2 seconds&lt;/code>&lt;/p>
&lt;h3 id="貌似是正确的">貌似是正确的？ &lt;a href="#%e8%b2%8c%e4%bc%bc%e6%98%af%e6%ad%a3%e7%a1%ae%e7%9a%84" class="anchor">🔗&lt;/a>&lt;/h3>&lt;p>程序运行的正如我们预期的那样，那么我们可以确信程序是一定正确的吗？&lt;/p>
&lt;p>不能。&lt;/p>
&lt;p>因为程序中的两个线程如果在同一个CPU上被调度，我们永远都会得到正确的结果。&lt;/p>
&lt;h3 id="线程与不同的cpu进行绑定">线程与不同的CPU进行绑定 &lt;a href="#%e7%ba%bf%e7%a8%8b%e4%b8%8e%e4%b8%8d%e5%90%8c%e7%9a%84cpu%e8%bf%9b%e8%a1%8c%e7%bb%91%e5%ae%9a" class="anchor">🔗&lt;/a>&lt;/h3>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">writer&lt;/span>(&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#f92672">*&lt;/span>unused) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cpu_set_t cpuset;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> CPU_ZERO(&lt;span style="color:#f92672">&amp;amp;&lt;/span>cpuset);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> CPU_SET(&lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#f92672">&amp;amp;&lt;/span>cpuset);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sched_setaffinity(&lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#66d9ef">sizeof&lt;/span>(cpuset), &lt;span style="color:#f92672">&amp;amp;&lt;/span>cpuset);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">reader&lt;/span>(&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#f92672">*&lt;/span>unused) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cpu_set_t cpuset;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> CPU_ZERO(&lt;span style="color:#f92672">&amp;amp;&lt;/span>cpuset);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> CPU_SET(&lt;span style="color:#ae81ff">2&lt;/span>, &lt;span style="color:#f92672">&amp;amp;&lt;/span>cpuset);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sched_setaffinity(&lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#66d9ef">sizeof&lt;/span>(cpuset), &lt;span style="color:#f92672">&amp;amp;&lt;/span>cpuset);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// p.s. 我机器是i5双核四线程，所以绑在了CPU0和CPU2上
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>结果：&lt;code>0 failures (0.0 percent of the time) in 1.4 seconds&lt;/code>&lt;/p>
&lt;h3 id="似乎仍然是准确的">似乎仍然是准确的 &lt;a href="#%e4%bc%bc%e4%b9%8e%e4%bb%8d%e7%84%b6%e6%98%af%e5%87%86%e7%a1%ae%e7%9a%84" class="anchor">🔗&lt;/a>&lt;/h3>&lt;p>尽管如此，我们考虑到CPU对变量的操作其实是作用在寄存器上，而variable1和variable2紧密相邻，这可能导致它们位于缓存的同一行。因此，它们有可能会同时被写入缓存并一起写回内存。&lt;/p>
&lt;p>为了观察不同的效果，我们尝试将这两个变量分别放置在堆和栈上。&lt;/p>
&lt;pre tabindex="0">&lt;code>0 failures (0.0 percent of the time) in 1.2 seconds
0 failures (0.0 percent of the time) in 1.2 seconds
2000000000 failures (100.0 percent of the time) in 1.2 seconds
&lt;/code>&lt;/pre>&lt;p>&lt;strong>太感人了！&lt;/strong>&lt;/p>
&lt;h3 id="我们的敌人--编译器">我们的敌人 —— 编译器 &lt;a href="#%e6%88%91%e4%bb%ac%e7%9a%84%e6%95%8c%e4%ba%ba--%e7%bc%96%e8%af%91%e5%99%a8" class="anchor">🔗&lt;/a>&lt;/h3>&lt;blockquote>
&lt;p>Multithreading bugs are very delicate.&lt;/p>&lt;/blockquote>
&lt;p>并行多线程的错误总是那么的奇妙，也许你的程序运行了几天安然无恙，但是在某一天某一时突然出现了难以复现的精妙bug。&lt;/p>
&lt;p>如果多个线程调度在同一个CPU核心上，Bug会被掩盖。 &lt;br>
如果多个变量在CPU同一行Cache上，Bug会被掩盖。 &lt;br>
如果你人品足够好的话，Bug同样会被掩盖。&lt;/p>
&lt;p>但是，如果我们排除了以上的情况后，问题就浮现出来了。&lt;/p>
&lt;p>我们来看一看reader的反汇编代码：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>(gdb) disas reader
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Dump of assembler code &lt;span style="color:#66d9ef">for&lt;/span> function reader(&lt;span style="color:#66d9ef">void&lt;/span>&lt;span style="color:#f92672">*&lt;/span>)&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">0x0000000000400950&lt;/span> &lt;span style="color:#f92672">&amp;lt;+&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#f92672">&amp;gt;:&lt;/span> push &lt;span style="color:#f92672">%&lt;/span>rbx
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">0x0000000000400951&lt;/span> &lt;span style="color:#f92672">&amp;lt;+&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#f92672">&amp;gt;:&lt;/span> xor &lt;span style="color:#f92672">%&lt;/span>eax,&lt;span style="color:#f92672">%&lt;/span>eax
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">0x0000000000400953&lt;/span> &lt;span style="color:#f92672">&amp;lt;+&lt;/span>&lt;span style="color:#ae81ff">3&lt;/span>&lt;span style="color:#f92672">&amp;gt;:&lt;/span> mov &lt;span style="color:#960050;background-color:#1e0010">$&lt;/span>&lt;span style="color:#ae81ff">0x10&lt;/span>,&lt;span style="color:#f92672">%&lt;/span>ecx
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">0x0000000000400958&lt;/span> &lt;span style="color:#f92672">&amp;lt;+&lt;/span>&lt;span style="color:#ae81ff">8&lt;/span>&lt;span style="color:#f92672">&amp;gt;:&lt;/span> mov &lt;span style="color:#960050;background-color:#1e0010">$&lt;/span>&lt;span style="color:#ae81ff">0x80&lt;/span>,&lt;span style="color:#f92672">%&lt;/span>esi
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">0x000000000040095d&lt;/span> &lt;span style="color:#f92672">&amp;lt;+&lt;/span>&lt;span style="color:#ae81ff">13&lt;/span>&lt;span style="color:#f92672">&amp;gt;:&lt;/span> xor &lt;span style="color:#f92672">%&lt;/span>ebx,&lt;span style="color:#f92672">%&lt;/span>ebx
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">0x000000000040095f&lt;/span> &lt;span style="color:#f92672">&amp;lt;+&lt;/span>&lt;span style="color:#ae81ff">15&lt;/span>&lt;span style="color:#f92672">&amp;gt;:&lt;/span> sub &lt;span style="color:#960050;background-color:#1e0010">$&lt;/span>&lt;span style="color:#ae81ff">0xa0&lt;/span>,&lt;span style="color:#f92672">%&lt;/span>rsp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">0x0000000000400966&lt;/span> &lt;span style="color:#f92672">&amp;lt;+&lt;/span>&lt;span style="color:#ae81ff">22&lt;/span>&lt;span style="color:#f92672">&amp;gt;:&lt;/span> mov &lt;span style="color:#f92672">%&lt;/span>rsp,&lt;span style="color:#f92672">%&lt;/span>rdi
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">0x0000000000400969&lt;/span> &lt;span style="color:#f92672">&amp;lt;+&lt;/span>&lt;span style="color:#ae81ff">25&lt;/span>&lt;span style="color:#f92672">&amp;gt;:&lt;/span> mov &lt;span style="color:#f92672">%&lt;/span>rsp,&lt;span style="color:#f92672">%&lt;/span>rdx
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">0x000000000040096c&lt;/span> &lt;span style="color:#f92672">&amp;lt;+&lt;/span>&lt;span style="color:#ae81ff">28&lt;/span>&lt;span style="color:#f92672">&amp;gt;:&lt;/span> rep stos &lt;span style="color:#f92672">%&lt;/span>rax,&lt;span style="color:#f92672">%&lt;/span>es:(&lt;span style="color:#f92672">%&lt;/span>rdi)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">0x000000000040096f&lt;/span> &lt;span style="color:#f92672">&amp;lt;+&lt;/span>&lt;span style="color:#ae81ff">31&lt;/span>&lt;span style="color:#f92672">&amp;gt;:&lt;/span> xor &lt;span style="color:#f92672">%&lt;/span>edi,&lt;span style="color:#f92672">%&lt;/span>edi
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">0x0000000000400971&lt;/span> &lt;span style="color:#f92672">&amp;lt;+&lt;/span>&lt;span style="color:#ae81ff">33&lt;/span>&lt;span style="color:#f92672">&amp;gt;:&lt;/span> movq &lt;span style="color:#960050;background-color:#1e0010">$&lt;/span>&lt;span style="color:#ae81ff">0x4&lt;/span>,(&lt;span style="color:#f92672">%&lt;/span>rsp)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">0x0000000000400979&lt;/span> &lt;span style="color:#f92672">&amp;lt;+&lt;/span>&lt;span style="color:#ae81ff">41&lt;/span>&lt;span style="color:#f92672">&amp;gt;:&lt;/span> callq &lt;span style="color:#ae81ff">0x400790&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span>sched_setaffinity&lt;span style="color:#960050;background-color:#1e0010">@&lt;/span>plt&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">0x000000000040097e&lt;/span> &lt;span style="color:#f92672">&amp;lt;+&lt;/span>&lt;span style="color:#ae81ff">46&lt;/span>&lt;span style="color:#f92672">&amp;gt;:&lt;/span> lea &lt;span style="color:#ae81ff">0x80&lt;/span>(&lt;span style="color:#f92672">%&lt;/span>rsp),&lt;span style="color:#f92672">%&lt;/span>rdi
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">0x0000000000400986&lt;/span> &lt;span style="color:#f92672">&amp;lt;+&lt;/span>&lt;span style="color:#ae81ff">54&lt;/span>&lt;span style="color:#f92672">&amp;gt;:&lt;/span> xor &lt;span style="color:#f92672">%&lt;/span>esi,&lt;span style="color:#f92672">%&lt;/span>esi
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">0x0000000000400988&lt;/span> &lt;span style="color:#f92672">&amp;lt;+&lt;/span>&lt;span style="color:#ae81ff">56&lt;/span>&lt;span style="color:#f92672">&amp;gt;:&lt;/span> callq &lt;span style="color:#ae81ff">0x400710&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span>gettimeofday&lt;span style="color:#960050;background-color:#1e0010">@&lt;/span>plt&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">0x000000000040098d&lt;/span> &lt;span style="color:#f92672">&amp;lt;+&lt;/span>&lt;span style="color:#ae81ff">61&lt;/span>&lt;span style="color:#f92672">&amp;gt;:&lt;/span> mov &lt;span style="color:#ae81ff">0x2006e4&lt;/span>(&lt;span style="color:#f92672">%&lt;/span>rip),&lt;span style="color:#f92672">%&lt;/span>rax &lt;span style="color:#960050;background-color:#1e0010">#&lt;/span> &lt;span style="color:#ae81ff">0x601078&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span>variable2_p&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">0x0000000000400994&lt;/span> &lt;span style="color:#f92672">&amp;lt;+&lt;/span>&lt;span style="color:#ae81ff">68&lt;/span>&lt;span style="color:#f92672">&amp;gt;:&lt;/span> mov &lt;span style="color:#ae81ff">0x2006e6&lt;/span>(&lt;span style="color:#f92672">%&lt;/span>rip),&lt;span style="color:#f92672">%&lt;/span>edx &lt;span style="color:#960050;background-color:#1e0010">#&lt;/span> &lt;span style="color:#ae81ff">0x601080&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span>variable1&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">0x000000000040099a&lt;/span> &lt;span style="color:#f92672">&amp;lt;+&lt;/span>&lt;span style="color:#ae81ff">74&lt;/span>&lt;span style="color:#f92672">&amp;gt;:&lt;/span> mov (&lt;span style="color:#f92672">%&lt;/span>rax),&lt;span style="color:#f92672">%&lt;/span>ecx
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">0x000000000040099c&lt;/span> &lt;span style="color:#f92672">&amp;lt;+&lt;/span>&lt;span style="color:#ae81ff">76&lt;/span>&lt;span style="color:#f92672">&amp;gt;:&lt;/span> mov &lt;span style="color:#960050;background-color:#1e0010">$&lt;/span>&lt;span style="color:#ae81ff">0x77359400&lt;/span>,&lt;span style="color:#f92672">%&lt;/span>eax
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">0x00000000004009a1&lt;/span> &lt;span style="color:#f92672">&amp;lt;+&lt;/span>&lt;span style="color:#ae81ff">81&lt;/span>&lt;span style="color:#f92672">&amp;gt;:&lt;/span> nopl &lt;span style="color:#ae81ff">0x0&lt;/span>(&lt;span style="color:#f92672">%&lt;/span>rax)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">0x00000000004009a8&lt;/span> &lt;span style="color:#f92672">&amp;lt;+&lt;/span>&lt;span style="color:#ae81ff">88&lt;/span>&lt;span style="color:#f92672">&amp;gt;:&lt;/span> cmp &lt;span style="color:#f92672">%&lt;/span>ecx,&lt;span style="color:#f92672">%&lt;/span>edx
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">0x00000000004009aa&lt;/span> &lt;span style="color:#f92672">&amp;lt;+&lt;/span>&lt;span style="color:#ae81ff">90&lt;/span>&lt;span style="color:#f92672">&amp;gt;:&lt;/span> adc &lt;span style="color:#960050;background-color:#1e0010">$&lt;/span>&lt;span style="color:#ae81ff">0x0&lt;/span>,&lt;span style="color:#f92672">%&lt;/span>ebx
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">0x00000000004009ad&lt;/span> &lt;span style="color:#f92672">&amp;lt;+&lt;/span>&lt;span style="color:#ae81ff">93&lt;/span>&lt;span style="color:#f92672">&amp;gt;:&lt;/span> sub &lt;span style="color:#960050;background-color:#1e0010">$&lt;/span>&lt;span style="color:#ae81ff">0x1&lt;/span>,&lt;span style="color:#f92672">%&lt;/span>eax
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">0x00000000004009b0&lt;/span> &lt;span style="color:#f92672">&amp;lt;+&lt;/span>&lt;span style="color:#ae81ff">96&lt;/span>&lt;span style="color:#f92672">&amp;gt;:&lt;/span> jne &lt;span style="color:#ae81ff">0x4009a8&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span>reader(&lt;span style="color:#66d9ef">void&lt;/span>&lt;span style="color:#f92672">*&lt;/span>)&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">88&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">0x00000000004009b2&lt;/span> &lt;span style="color:#f92672">&amp;lt;+&lt;/span>&lt;span style="color:#ae81ff">98&lt;/span>&lt;span style="color:#f92672">&amp;gt;:&lt;/span> lea &lt;span style="color:#ae81ff">0x90&lt;/span>(&lt;span style="color:#f92672">%&lt;/span>rsp),&lt;span style="color:#f92672">%&lt;/span>rdi
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">0x00000000004009ba&lt;/span> &lt;span style="color:#f92672">&amp;lt;+&lt;/span>&lt;span style="color:#ae81ff">106&lt;/span>&lt;span style="color:#f92672">&amp;gt;:&lt;/span> xor &lt;span style="color:#f92672">%&lt;/span>esi,&lt;span style="color:#f92672">%&lt;/span>esi
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">0x00000000004009bc&lt;/span> &lt;span style="color:#f92672">&amp;lt;+&lt;/span>&lt;span style="color:#ae81ff">108&lt;/span>&lt;span style="color:#f92672">&amp;gt;:&lt;/span> callq &lt;span style="color:#ae81ff">0x400710&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span>gettimeofday&lt;span style="color:#960050;background-color:#1e0010">@&lt;/span>plt&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">0x00000000004009c1&lt;/span> &lt;span style="color:#f92672">&amp;lt;+&lt;/span>&lt;span style="color:#ae81ff">113&lt;/span>&lt;span style="color:#f92672">&amp;gt;:&lt;/span> cvtsi2sdq &lt;span style="color:#ae81ff">0x98&lt;/span>(&lt;span style="color:#f92672">%&lt;/span>rsp),&lt;span style="color:#f92672">%&lt;/span>xmm0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">0x00000000004009cb&lt;/span> &lt;span style="color:#f92672">&amp;lt;+&lt;/span>&lt;span style="color:#ae81ff">123&lt;/span>&lt;span style="color:#f92672">&amp;gt;:&lt;/span> cvtsi2sdq &lt;span style="color:#ae81ff">0x90&lt;/span>(&lt;span style="color:#f92672">%&lt;/span>rsp),&lt;span style="color:#f92672">%&lt;/span>xmm1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">0x00000000004009d5&lt;/span> &lt;span style="color:#f92672">&amp;lt;+&lt;/span>&lt;span style="color:#ae81ff">133&lt;/span>&lt;span style="color:#f92672">&amp;gt;:&lt;/span> movsd &lt;span style="color:#ae81ff">0x1a3&lt;/span>(&lt;span style="color:#f92672">%&lt;/span>rip),&lt;span style="color:#f92672">%&lt;/span>xmm3 &lt;span style="color:#960050;background-color:#1e0010">#&lt;/span> &lt;span style="color:#ae81ff">0x400b80&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">0x00000000004009dd&lt;/span> &lt;span style="color:#f92672">&amp;lt;+&lt;/span>&lt;span style="color:#ae81ff">141&lt;/span>&lt;span style="color:#f92672">&amp;gt;:&lt;/span> mov &lt;span style="color:#f92672">%&lt;/span>ebx,&lt;span style="color:#f92672">%&lt;/span>eax
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">0x00000000004009df&lt;/span> &lt;span style="color:#f92672">&amp;lt;+&lt;/span>&lt;span style="color:#ae81ff">143&lt;/span>&lt;span style="color:#f92672">&amp;gt;:&lt;/span> cvtsi2sdq &lt;span style="color:#ae81ff">0x88&lt;/span>(&lt;span style="color:#f92672">%&lt;/span>rsp),&lt;span style="color:#f92672">%&lt;/span>xmm2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">0x00000000004009e9&lt;/span> &lt;span style="color:#f92672">&amp;lt;+&lt;/span>&lt;span style="color:#ae81ff">153&lt;/span>&lt;span style="color:#f92672">&amp;gt;:&lt;/span> cmp &lt;span style="color:#960050;background-color:#1e0010">$&lt;/span>&lt;span style="color:#ae81ff">0x1&lt;/span>,&lt;span style="color:#f92672">%&lt;/span>ebx
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">0x00000000004009ec&lt;/span> &lt;span style="color:#f92672">&amp;lt;+&lt;/span>&lt;span style="color:#ae81ff">156&lt;/span>&lt;span style="color:#f92672">&amp;gt;:&lt;/span> mov &lt;span style="color:#960050;background-color:#1e0010">$&lt;/span>&lt;span style="color:#ae81ff">0x400b3d&lt;/span>,&lt;span style="color:#f92672">%&lt;/span>ecx
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">0x00000000004009f1&lt;/span> &lt;span style="color:#f92672">&amp;lt;+&lt;/span>&lt;span style="color:#ae81ff">161&lt;/span>&lt;span style="color:#f92672">&amp;gt;:&lt;/span> mov &lt;span style="color:#960050;background-color:#1e0010">$&lt;/span>&lt;span style="color:#ae81ff">0x1&lt;/span>,&lt;span style="color:#f92672">%&lt;/span>edi
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">0x00000000004009f6&lt;/span> &lt;span style="color:#f92672">&amp;lt;+&lt;/span>&lt;span style="color:#ae81ff">166&lt;/span>&lt;span style="color:#f92672">&amp;gt;:&lt;/span> divsd &lt;span style="color:#f92672">%&lt;/span>xmm3,&lt;span style="color:#f92672">%&lt;/span>xmm0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">0x00000000004009fa&lt;/span> &lt;span style="color:#f92672">&amp;lt;+&lt;/span>&lt;span style="color:#ae81ff">170&lt;/span>&lt;span style="color:#f92672">&amp;gt;:&lt;/span> mov &lt;span style="color:#f92672">%&lt;/span>ebx,&lt;span style="color:#f92672">%&lt;/span>edx
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">0x00000000004009fc&lt;/span> &lt;span style="color:#f92672">&amp;lt;+&lt;/span>&lt;span style="color:#ae81ff">172&lt;/span>&lt;span style="color:#f92672">&amp;gt;:&lt;/span> mov &lt;span style="color:#960050;background-color:#1e0010">$&lt;/span>&lt;span style="color:#ae81ff">0x400b40&lt;/span>,&lt;span style="color:#f92672">%&lt;/span>esi
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">0x0000000000400a01&lt;/span> &lt;span style="color:#f92672">&amp;lt;+&lt;/span>&lt;span style="color:#ae81ff">177&lt;/span>&lt;span style="color:#f92672">&amp;gt;:&lt;/span> divsd &lt;span style="color:#f92672">%&lt;/span>xmm3,&lt;span style="color:#f92672">%&lt;/span>xmm2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">0x0000000000400a05&lt;/span> &lt;span style="color:#f92672">&amp;lt;+&lt;/span>&lt;span style="color:#ae81ff">181&lt;/span>&lt;span style="color:#f92672">&amp;gt;:&lt;/span> addsd &lt;span style="color:#f92672">%&lt;/span>xmm0,&lt;span style="color:#f92672">%&lt;/span>xmm1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">0x0000000000400a09&lt;/span> &lt;span style="color:#f92672">&amp;lt;+&lt;/span>&lt;span style="color:#ae81ff">185&lt;/span>&lt;span style="color:#f92672">&amp;gt;:&lt;/span> cvtsi2sdq &lt;span style="color:#ae81ff">0x80&lt;/span>(&lt;span style="color:#f92672">%&lt;/span>rsp),&lt;span style="color:#f92672">%&lt;/span>xmm0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">0x0000000000400a13&lt;/span> &lt;span style="color:#f92672">&amp;lt;+&lt;/span>&lt;span style="color:#ae81ff">195&lt;/span>&lt;span style="color:#f92672">&amp;gt;:&lt;/span> subsd &lt;span style="color:#f92672">%&lt;/span>xmm0,&lt;span style="color:#f92672">%&lt;/span>xmm1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">0x0000000000400a17&lt;/span> &lt;span style="color:#f92672">&amp;lt;+&lt;/span>&lt;span style="color:#ae81ff">199&lt;/span>&lt;span style="color:#f92672">&amp;gt;:&lt;/span> cvtsi2sd &lt;span style="color:#f92672">%&lt;/span>rax,&lt;span style="color:#f92672">%&lt;/span>xmm0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">0x0000000000400a1c&lt;/span> &lt;span style="color:#f92672">&amp;lt;+&lt;/span>&lt;span style="color:#ae81ff">204&lt;/span>&lt;span style="color:#f92672">&amp;gt;:&lt;/span> mov &lt;span style="color:#960050;background-color:#1e0010">$&lt;/span>&lt;span style="color:#ae81ff">0x400b3c&lt;/span>,&lt;span style="color:#f92672">%&lt;/span>eax
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">0x0000000000400a21&lt;/span> &lt;span style="color:#f92672">&amp;lt;+&lt;/span>&lt;span style="color:#ae81ff">209&lt;/span>&lt;span style="color:#f92672">&amp;gt;:&lt;/span> cmovne &lt;span style="color:#f92672">%&lt;/span>rax,&lt;span style="color:#f92672">%&lt;/span>rcx
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">0x0000000000400a25&lt;/span> &lt;span style="color:#f92672">&amp;lt;+&lt;/span>&lt;span style="color:#ae81ff">213&lt;/span>&lt;span style="color:#f92672">&amp;gt;:&lt;/span> mov &lt;span style="color:#960050;background-color:#1e0010">$&lt;/span>&lt;span style="color:#ae81ff">0x2&lt;/span>,&lt;span style="color:#f92672">%&lt;/span>eax
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">0x0000000000400a2a&lt;/span> &lt;span style="color:#f92672">&amp;lt;+&lt;/span>&lt;span style="color:#ae81ff">218&lt;/span>&lt;span style="color:#f92672">&amp;gt;:&lt;/span> mulsd &lt;span style="color:#ae81ff">0x156&lt;/span>(&lt;span style="color:#f92672">%&lt;/span>rip),&lt;span style="color:#f92672">%&lt;/span>xmm0 &lt;span style="color:#960050;background-color:#1e0010">#&lt;/span> &lt;span style="color:#ae81ff">0x400b88&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">0x0000000000400a32&lt;/span> &lt;span style="color:#f92672">&amp;lt;+&lt;/span>&lt;span style="color:#ae81ff">226&lt;/span>&lt;span style="color:#f92672">&amp;gt;:&lt;/span> subsd &lt;span style="color:#f92672">%&lt;/span>xmm2,&lt;span style="color:#f92672">%&lt;/span>xmm1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">0x0000000000400a36&lt;/span> &lt;span style="color:#f92672">&amp;lt;+&lt;/span>&lt;span style="color:#ae81ff">230&lt;/span>&lt;span style="color:#f92672">&amp;gt;:&lt;/span> divsd &lt;span style="color:#ae81ff">0x152&lt;/span>(&lt;span style="color:#f92672">%&lt;/span>rip),&lt;span style="color:#f92672">%&lt;/span>xmm0 &lt;span style="color:#960050;background-color:#1e0010">#&lt;/span> &lt;span style="color:#ae81ff">0x400b90&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">0x0000000000400a3e&lt;/span> &lt;span style="color:#f92672">&amp;lt;+&lt;/span>&lt;span style="color:#ae81ff">238&lt;/span>&lt;span style="color:#f92672">&amp;gt;:&lt;/span> callq &lt;span style="color:#ae81ff">0x400700&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span>__printf_chk&lt;span style="color:#960050;background-color:#1e0010">@&lt;/span>plt&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">0x0000000000400a43&lt;/span> &lt;span style="color:#f92672">&amp;lt;+&lt;/span>&lt;span style="color:#ae81ff">243&lt;/span>&lt;span style="color:#f92672">&amp;gt;:&lt;/span> xor &lt;span style="color:#f92672">%&lt;/span>edi,&lt;span style="color:#f92672">%&lt;/span>edi
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">0x0000000000400a45&lt;/span> &lt;span style="color:#f92672">&amp;lt;+&lt;/span>&lt;span style="color:#ae81ff">245&lt;/span>&lt;span style="color:#f92672">&amp;gt;:&lt;/span> callq &lt;span style="color:#ae81ff">0x4006f0&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span>exit&lt;span style="color:#960050;background-color:#1e0010">@&lt;/span>plt&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>简而言之，关键在以下几句：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">0x000000000040098d&lt;/span> &lt;span style="color:#f92672">&amp;lt;+&lt;/span>&lt;span style="color:#ae81ff">61&lt;/span>&lt;span style="color:#f92672">&amp;gt;:&lt;/span> mov &lt;span style="color:#ae81ff">0x2006e4&lt;/span>(&lt;span style="color:#f92672">%&lt;/span>rip),&lt;span style="color:#f92672">%&lt;/span>rax &lt;span style="color:#960050;background-color:#1e0010">#&lt;/span> &lt;span style="color:#ae81ff">0x601078&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span>variable2_p&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">0x0000000000400994&lt;/span> &lt;span style="color:#f92672">&amp;lt;+&lt;/span>&lt;span style="color:#ae81ff">68&lt;/span>&lt;span style="color:#f92672">&amp;gt;:&lt;/span> mov &lt;span style="color:#ae81ff">0x2006e6&lt;/span>(&lt;span style="color:#f92672">%&lt;/span>rip),&lt;span style="color:#f92672">%&lt;/span>edx &lt;span style="color:#960050;background-color:#1e0010">#&lt;/span> &lt;span style="color:#ae81ff">0x601080&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span>variable1&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">0x000000000040099a&lt;/span> &lt;span style="color:#f92672">&amp;lt;+&lt;/span>&lt;span style="color:#ae81ff">74&lt;/span>&lt;span style="color:#f92672">&amp;gt;:&lt;/span> mov (&lt;span style="color:#f92672">%&lt;/span>rax),&lt;span style="color:#f92672">%&lt;/span>ecx
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">0x000000000040099c&lt;/span> &lt;span style="color:#f92672">&amp;lt;+&lt;/span>&lt;span style="color:#ae81ff">76&lt;/span>&lt;span style="color:#f92672">&amp;gt;:&lt;/span> mov &lt;span style="color:#960050;background-color:#1e0010">$&lt;/span>&lt;span style="color:#ae81ff">0x77359400&lt;/span>,&lt;span style="color:#f92672">%&lt;/span>eax
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">0x00000000004009a1&lt;/span> &lt;span style="color:#f92672">&amp;lt;+&lt;/span>&lt;span style="color:#ae81ff">81&lt;/span>&lt;span style="color:#f92672">&amp;gt;:&lt;/span> nopl &lt;span style="color:#ae81ff">0x0&lt;/span>(&lt;span style="color:#f92672">%&lt;/span>rax)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">0x00000000004009a8&lt;/span> &lt;span style="color:#f92672">&amp;lt;+&lt;/span>&lt;span style="color:#ae81ff">88&lt;/span>&lt;span style="color:#f92672">&amp;gt;:&lt;/span> cmp &lt;span style="color:#f92672">%&lt;/span>ecx,&lt;span style="color:#f92672">%&lt;/span>edx
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">0x00000000004009aa&lt;/span> &lt;span style="color:#f92672">&amp;lt;+&lt;/span>&lt;span style="color:#ae81ff">90&lt;/span>&lt;span style="color:#f92672">&amp;gt;:&lt;/span> adc &lt;span style="color:#960050;background-color:#1e0010">$&lt;/span>&lt;span style="color:#ae81ff">0x0&lt;/span>,&lt;span style="color:#f92672">%&lt;/span>ebx
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">0x00000000004009ad&lt;/span> &lt;span style="color:#f92672">&amp;lt;+&lt;/span>&lt;span style="color:#ae81ff">93&lt;/span>&lt;span style="color:#f92672">&amp;gt;:&lt;/span> sub &lt;span style="color:#960050;background-color:#1e0010">$&lt;/span>&lt;span style="color:#ae81ff">0x1&lt;/span>,&lt;span style="color:#f92672">%&lt;/span>eax
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">0x00000000004009b0&lt;/span> &lt;span style="color:#f92672">&amp;lt;+&lt;/span>&lt;span style="color:#ae81ff">96&lt;/span>&lt;span style="color:#f92672">&amp;gt;:&lt;/span> jne &lt;span style="color:#ae81ff">0x4009a8&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span>reader(&lt;span style="color:#66d9ef">void&lt;/span>&lt;span style="color:#f92672">*&lt;/span>)&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">88&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>我们可以看出，循环体在+88～+96行，而对variable1与variable2的取值都放在了循环以外。&lt;/p>
&lt;blockquote>
&lt;p>注：&lt;br>
adc是带进位加法，adc $0x0, %ebx =&amp;gt; %ebx = $0x0 + %ebx + CF &lt;br>
cmp的结果正是放在CF（大于表示为溢出），ZF（相等表示为0），PF（小于表示为-1,则低8位全为1,故有偶数个1）&lt;/p>&lt;/blockquote>
&lt;p>正是这个“小意外”，导致了我们的结果要不是100%正确，要不是100%错误。&lt;/p>
&lt;h4 id="使用volitile">使用volitile（？） &lt;a href="#%e4%bd%bf%e7%94%a8volitile" class="anchor">🔗&lt;/a>&lt;/h4>&lt;p>让我们修改一下代码：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">volatile&lt;/span> &lt;span style="color:#66d9ef">unsigned&lt;/span> variable1 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">volatile&lt;/span> &lt;span style="color:#66d9ef">unsigned&lt;/span> &lt;span style="color:#f92672">*&lt;/span>variable2_p &lt;span style="color:#f92672">=&lt;/span> NULL;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#define ITERATIONS 500000000LL &lt;/span>&lt;span style="color:#75715e">// 调小一下数据规模，因为volatile太慢了_(:з」∠)_
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>我得出的来的结果是：&lt;/p>
&lt;pre tabindex="0">&lt;code>0 failures (0.0 percent of the time) in 9.6 seconds
&lt;/code>&lt;/pre>&lt;p>而作者得出的结果是：
（时间上的差异不计，因为我们的数据规模不一样，我实验的次数要多一些。&lt;/p>
&lt;pre tabindex="0">&lt;code>fish ) ./a.out
12462711 failures (24.9 percent of the time) in 3.7 seconds
&lt;/code>&lt;/pre>&lt;p>从作者的结果来看，看起来效果好了很多，虽然慢了30多倍，但是结果并不是全对全错了。&lt;/p>
&lt;p>而从我的结果来看，volatile看似神丹妙药，解决了所有的问题。(both g++ and clang++)&lt;/p>
&lt;p>&lt;strong>这是为什么呢?&lt;/strong>&lt;/p>
&lt;p>其原因在于体系结构的差异。volatile只能保证如下两点：&lt;/p>
&lt;ul>
&lt;li>volatile变量的访问不会优化成寄存器访问，而是每次都去访问“内存”（这个引号一会再解释）&lt;/li>
&lt;li>volatile变量间的访问顺序不会被编译器乱序&lt;/li>
&lt;/ul>
&lt;p>而其他的一切，volatile和编译器都不会给出任何保证。&lt;/p>
&lt;p>例如，不同的CPU都有其内部的私有Cache，CPU的内存访问，如果命中了Cache，则不会真正的访问内存。但由于其私有Cache对于其它的CPU是不可见的，使用volatile就埋下的Bug的种子。&lt;/p>
&lt;p>虽然在我们的实验中，程序运行的很好，没有出现Bug。但是，一是由于多线程的Bug都是subtle和delicate的，我不能保证在一个需要7x24工作的服务器程序中，它不会出现任何Bug；二是至少我们的代码是** not portable **的，如果有一天，我们从x86-64平台切换到了&lt;code>PowerPC&lt;/code>？或是&lt;code>IA64&lt;/code>？我们不能保证在这些体系结构上，编译器和CPU能为我们提供同样的保障。&lt;/p>
&lt;p>于是有人高声疾呼： volatile不能用来做为多线程的同步机制！&lt;/p>
&lt;blockquote>
&lt;p>补充于20240317：在一台老旧的安卓手机上重复了实验，volatile确实无法提供相关的保障&lt;/p>&lt;/blockquote>
&lt;pre tabindex="0">&lt;code>~/tmp $ clang++ -O2 a.cc &amp;amp;&amp;amp; ./a.out
99880586 failures (49.9 percent of the time) in 3.0 seconds
&lt;/code>&lt;/pre>&lt;h4 id="小心cpu的行为">小心CPU的行为 &lt;a href="#%e5%b0%8f%e5%bf%83cpu%e7%9a%84%e8%a1%8c%e4%b8%ba" class="anchor">🔗&lt;/a>&lt;/h4>&lt;p>在先前的实验中，尽管程序的表现与预期一致，但我们无法确保CPU将始终按顺序执行代码。实际上，CPU可能会对操作顺序进行优化，例如，将var1++和var2++的执行顺序调换，这在当前主流的CPU中是常见的做法。&lt;/p>
&lt;p>值得注意的是，由于乱序执行会导致功耗增加，某些处理器如ARM和Intel Atom已经取消了这一机制。然而，我们无法预知未来代码可能会在哪种硬件架构上运行，例如ARM集群，这需要我们保持警惕。&lt;/p>
&lt;h4 id="避免使用锁">避免使用锁 &lt;a href="#%e9%81%bf%e5%85%8d%e4%bd%bf%e7%94%a8%e9%94%81" class="anchor">🔗&lt;/a>&lt;/h4>&lt;p>通常情况下，通过引入互斥锁（mutex）似乎能够解决并发问题。然而，根据作者的测试，引入互斥锁可能会导致程序速度降低至原来的1/130，而自旋锁（spinlock）也可能使得速度降低至原来的1/4。&lt;/p>
&lt;p>因此，我们应该暂缓，仔细考虑作者接下来的建议。&lt;/p>
&lt;h3 id="内存屏障的应用">内存屏障的应用 &lt;a href="#%e5%86%85%e5%ad%98%e5%b1%8f%e9%9a%9c%e7%9a%84%e5%ba%94%e7%94%a8" class="anchor">🔗&lt;/a>&lt;/h3>&lt;p>在多CPU环境中，处理器往往独立运行，不会协调彼此的操作。&lt;/p>
&lt;p>目前，我们面临两个并不理想的解决方案：一是将所有线程限制在单个CPU上运行，二是通过引入重量级锁来同步操作。这些方法都不尽人意，且效率低下。&lt;/p>
&lt;p>实际上，我们需要做的是，通过内存屏障技术，暂时阻止编译器或CPU对程序中的数据读写操作进行重排序。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">for&lt;/span> (;;) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> variable1 &lt;span style="color:#f92672">=&lt;/span> variable1 &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> barrier();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">*&lt;/span>variable2 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">*&lt;/span>variable2 &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这样我们保证了，在var1++必然早于var2++。var2++后面也可以加一道barrier，只不过在我们的场景下，提供这种保证是不必须的。&lt;/p>
&lt;p>作者又做了一次试验。&lt;/p>
&lt;pre tabindex="0">&lt;code>fish ) ./a.out
260 failures (0.0 percent of the time) in 0.9 seconds
&lt;/code>&lt;/pre>&lt;p>这次且错误减少了许多。&lt;/p>
&lt;p>我们再把读线程写加上memory barrier.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">for&lt;/span> (i&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>; i &lt;span style="color:#f92672">&amp;lt;&lt;/span> ITERATIONS; i&lt;span style="color:#f92672">++&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">unsigned&lt;/span> v2 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">*&lt;/span>variable2;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> barrier();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">unsigned&lt;/span> v1 &lt;span style="color:#f92672">=&lt;/span> variable1;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (v2 &lt;span style="color:#f92672">&amp;gt;&lt;/span> v1) failureCount&lt;span style="color:#f92672">++&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>看看结果：&lt;/p>
&lt;pre tabindex="0">&lt;code>fish ) ./a.out
0 failures (0.0 percent of the time) in 4.2 seconds
&lt;/code>&lt;/pre>&lt;p>程序表现出了正确的结果。&lt;/p>
&lt;p>我们可以看出，如果你对线程A的读写顺序做出要求，必然的，你也要对线程B的顺序做要求，以此类推，线程C，线程D……&lt;/p>
&lt;p>所以，&lt;strong>Memory barriers always come in pairs, or triplets or more.&lt;/strong>&lt;/p>
&lt;p>同样的，线程锁也是这样的，自己锁自己总不是一种愉快的体验（笑&lt;/p>
&lt;h3 id="cpu的乱序执行">CPU的乱序执行 &lt;a href="#cpu%e7%9a%84%e4%b9%b1%e5%ba%8f%e6%89%a7%e8%a1%8c" class="anchor">🔗&lt;/a>&lt;/h3>&lt;p>我们可以看到PowerPC有三种内存屏障，而DEC Alpha平台有更多。这意味着，CPU使用更激进的策略来重排指令，而强制限制其重排的代价是非常高的。&lt;/p>
&lt;p>而x86平台则非常守序，作者猜测其原因是由于早期x86的指令技术并非完善，而在那时内存与CPU的速度不像现在这样悬殊，所以x86使用了&lt;code>strongly ordered memory&lt;/code>而非像上面几款CPU一样的采用过多的指令重排序。如今，由于x86背上了向前兼容性的包袱，看似我们的&amp;quot;好日子&amp;quot;一直不会结束。&lt;/p>
&lt;p>x86-64，做为x86的64位升级版，同样没有实现&lt;code>weakly ordered&lt;/code>，或者说，保留了实现&lt;code>weakly ordered&lt;/code>的权利。而&lt;code>IA64&lt;/code>平台，如&lt;code>Itanium&lt;/code>，则实现了&lt;code>weakly ordered&lt;/code>。&lt;/p>
&lt;p>作者猜测x86_64之所以保守，是为了与IA64平台对抗。x86_64的对于x86良好的兼容性可以让程序员多活几年，所以x86_64在市场的表现更好。&lt;/p>
&lt;p>作者还表示，而苹果放弃IA64平台转投x86-64多少有一些可惜，因为苹果并没有移植性问题，PowerPC已经逐渐衰落，为什么不试试IA64呢。&lt;/p>
&lt;p>实际上，根据Wikipedia，现在支持IA64的操作系统非常少，只有WinNT Family，Red Hat Linux，Debian/Gentoo/Suse以及其它。而从Windows Server 2008 R2之后，Microsoft也表示不再支持Itanium。所以从现在看来，IA64平台相对x86/x64来说，是失败的。&lt;/p>
&lt;h3 id="双重检查锁">双重检查锁 &lt;a href="#%e5%8f%8c%e9%87%8d%e6%a3%80%e6%9f%a5%e9%94%81" class="anchor">🔗&lt;/a>&lt;/h3>&lt;p>让我们看一下如下的Obj-C代码&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-objc" data-lang="objc">&lt;span style="display:flex;">&lt;span>+ &lt;span style="color:#a6e22e">getSharedObject&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">id&lt;/span> sharedObject;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#f92672">!&lt;/span> sharedObject) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> LOCK;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#f92672">!&lt;/span> sharedObject) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sharedObject &lt;span style="color:#f92672">=&lt;/span> [[self alloc] init];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> UNLOCK;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> sharedObject;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这是非常经典的一种DCLP(Double Checked Lock Pattern)的实现。&lt;/p>
&lt;p>这个看起来不错，但是你已经知道这并不靠谱了。当我们初始化我们的共享单例，先要再修改类内的指针，使其指向一块声明好的内存，再初始化一个sharedObject的instance。&lt;/p>
&lt;p>不过，你是知道的，CPU和编译器会把一切都搞砸，它们会以任意的顺序执行我们的命令，同时处理器之间互相不通气，于是就会出现如下的情况：&lt;/p>
&lt;p>线程A为指针声明了一段空间，但是还没来及初始化这个instance，线程A就被挂起了。&lt;/p>
&lt;p>之后线程B接管一切，发现指针有值，结果因为访问了野指针导致程序挂掉。&lt;/p>
&lt;p>不过根据上面的文章，你们应该知道怎么处理这个问题了 —— 试试内存屏障！&lt;/p>
&lt;p>p.s. 如果大家对obj-c不熟悉的话，可以看我另外一篇文章。那篇文章是关于Scott Meyers大神写的一篇论文，专门用来讨论DCLP问题的。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-objc" data-lang="objc">&lt;span style="display:flex;">&lt;span>+ &lt;span style="color:#a6e22e">getSharedObject&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">id&lt;/span> sharedObject;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#f92672">!&lt;/span> sharedObject) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> LOCK;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#f92672">!&lt;/span> sharedObject) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">id&lt;/span> temp &lt;span style="color:#f92672">=&lt;/span> [[self alloc] init];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> OSMemoryBarrier();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sharedObject &lt;span style="color:#f92672">=&lt;/span> temp;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> UNLOCK;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> OSMemoryBarrier();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> sharedObject;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>而在《C++ and the Perils of Double-Checked Locking》一文中，Scott Meyers和Andrei Alexandrescu给出的解决方案如下。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>Singleton&lt;span style="color:#f92672">*&lt;/span> Singleton&lt;span style="color:#f92672">::&lt;/span>instance () {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Singleton&lt;span style="color:#f92672">*&lt;/span> tmp &lt;span style="color:#f92672">=&lt;/span> pInstance;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// insert memory barrier
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// clear the cache to flush ``pInstance``
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// prevents &amp;#34;downwards migration&amp;#34; of Singleton’s construction (by another thread);
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> (tmp &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Lock lock;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tmp &lt;span style="color:#f92672">=&lt;/span> pInstance;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (tmp &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tmp &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> Singleton;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// insert memory barrier
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// prevent optimistic that eliminate the temporary variable ``tmp``
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// prevents &amp;#34;upwards migration&amp;#34; of pInstance’s initialization
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> pInstance &lt;span style="color:#f92672">=&lt;/span> tmp;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> tmp;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>两种解决方案的memory barrier插入的位置不同。但是都不能说是错的。因为一个是传static instance，一个是传pointer。&lt;/p>
&lt;p>其实还有更“暴力”的方法。&lt;/p>
&lt;p>直接来一把大锁，哐当把整个函数锁起来，并且在每一个线程内保留一个&lt;strong>本线程专属&lt;/strong>指向单例的指针（做cache）。这样N个线程只需要调用这个函数N次，线程竞争也相对少很多。并且根据Linux下的futex技术，无竞争下的锁相对节省了不少资源。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>Singleton&lt;span style="color:#f92672">*&lt;/span> Singleton&lt;span style="color:#f92672">::&lt;/span>instance() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Lock lock;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span>(pInstance &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pInstance &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> Singleton;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> pInstance;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="我们真的需要这么做吗">我们真的需要这么做吗 &lt;a href="#%e6%88%91%e4%bb%ac%e7%9c%9f%e7%9a%84%e9%9c%80%e8%a6%81%e8%bf%99%e4%b9%88%e5%81%9a%e5%90%97" class="anchor">🔗&lt;/a>&lt;/h3>&lt;p>上面的obj-c代码中，保证双重检查锁正确的，其实是第二个内存屏障。但是，在那里，我们需要的其实是一个&amp;quot;data dependency barrier&amp;quot;。&lt;/p>
&lt;p>Linux内核中给出很多经过精心优化的内存屏障，我们在这里可以使用。不过，要在使用的时候写好注释，一是为了未来的验证，二是为了记录自己当时的思路。&lt;/p>
&lt;p>毕竟多线程的操作要小心再小心，我们需要充足的理由，更多的小心来应对。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-obj-c" data-lang="obj-c">&lt;span style="display:flex;">&lt;span>+ &lt;span style="color:#a6e22e">getSharedObject&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">id&lt;/span> sharedObject;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#f92672">!&lt;/span> sharedObject) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> LOCK;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#f92672">!&lt;/span> sharedObject) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">id&lt;/span> temp &lt;span style="color:#f92672">=&lt;/span> [[self alloc] init];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> OSMemoryBarrier();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sharedObject &lt;span style="color:#f92672">=&lt;/span> temp;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> UNLOCK;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">/* data dependency memory barrier here */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> sharedObject;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="一切都结束了吗">一切都结束了吗？ &lt;a href="#%e4%b8%80%e5%88%87%e9%83%bd%e7%bb%93%e6%9d%9f%e4%ba%86%e5%90%97" class="anchor">🔗&lt;/a>&lt;/h3>&lt;p>是的。不过让我们总结一下吧。&lt;/p>
&lt;p>&lt;img src="https://github.com/Wizmann/assets/raw/master/wizmann-tk-pic/barrier_tank.png" alt="Mutex Tank">&lt;/p>
&lt;ul>
&lt;li>处理器和编译器并不能充分保证代码执行的顺序，它们会把你的代码到处移动。所以&lt;strong>Be warned and wary!&lt;/strong>&lt;/li>
&lt;li>多线程的错误是非常subtle和delicate的，所以我们很难设计测试用例&lt;/li>
&lt;li>因此，别指责QA了，他们也不是故意的。RD要对自己的代码负责&lt;/li>
&lt;li>锁很安全，但是也很重&lt;/li>
&lt;li>内存屏障是一种更快的，不阻塞的，不会死锁的一种锁的替代物。它们总要花费更多的心思，并且也不是到处可用的银弹。但是它确实很快，有更好的伸缩性。&lt;/li>
&lt;li>内存屏障往往是成对出现的。了解第二个内存屏障要出现在哪里，有助于你理解你的代码，即使你所使用的体系结构不需要第二个内存屏障。&lt;/li>
&lt;/ul>
&lt;h3 id="扩展阅读">扩展阅读 &lt;a href="#%e6%89%a9%e5%b1%95%e9%98%85%e8%af%bb" class="anchor">🔗&lt;/a>&lt;/h3>&lt;p>&lt;a href="https://www.kernel.org/doc/Documentation/memory-barriers.txt">LINUX KERNEL MEMORY BARRIERS&lt;/a>&lt;/p>
&lt;p>&lt;a href="http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.17.8112">Memory Consistency and Event Ordering in Scalable Shared-Memory Multiprocessors&lt;/a>&lt;/p></description></item></channel></rss>