<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Protobuf on Maerlyn's Rainbow</title><link>https://wizmann.top/tags/protobuf/</link><description>Recent content in Protobuf on Maerlyn's Rainbow</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Mon, 17 Nov 2014 00:25:42 +0000</lastBuildDate><atom:link href="https://wizmann.top/tags/protobuf/index.xml" rel="self" type="application/rss+xml"/><item><title>类型-长度-值（TLV）协议</title><link>https://wizmann.top/posts/tlv-protocol/</link><pubDate>Mon, 17 Nov 2014 00:25:42 +0000</pubDate><guid>https://wizmann.top/posts/tlv-protocol/</guid><description>&lt;p>在数据通信协议中，可选的信息或字段通常使用type-length-value（a.k.a TLV）元素来进行编码。&lt;/p>
&lt;ul>
&lt;li>Type - 类型&lt;/li>
&lt;/ul>
&lt;p>用来标示字段类型的值，通常是一个二进制值或简单的字母&lt;/p>
&lt;ul>
&lt;li>Length - 长度&lt;/li>
&lt;/ul>
&lt;p>字段长度，单位通常为Byte&lt;/p>
&lt;ul>
&lt;li>Value - 值&lt;/li>
&lt;/ul>
&lt;p>一个变长的比特数组用来存储这个字段的值&lt;/p>
&lt;h2 id="优势">优势 &lt;a href="#%e4%bc%98%e5%8a%bf" class="anchor">🔗&lt;/a>&lt;/h2>&lt;ul>
&lt;li>TLV序列方便遍历查找&lt;/li>
&lt;li>新的字段可以无痛的加入现有的协议中。解析的时候，对于未知的字段，可以轻松的跳过。这点与XML类似&lt;/li>
&lt;li>TLV元素的顺序可以是随意的&lt;/li>
&lt;li>TLV元素通常使用二进制存储，可以使解析速度加快并且使数据更小&lt;/li>
&lt;li>TLV可以与XML数据相互转换，易于人类阅读&lt;/li>
&lt;/ul>
&lt;h2 id="例子">例子 &lt;a href="#%e4%be%8b%e5%ad%90" class="anchor">🔗&lt;/a>&lt;/h2>&lt;p>在这里，我们以protobuf的可选和变长字段为例。&lt;/p>
&lt;h3 id="field_number--wire_type">field_number ++ wire_type &lt;a href="#field_number--wire_type" class="anchor">🔗&lt;/a>&lt;/h3>&lt;p>每一个protobuf的字段在传输时，都会加上&lt;code>field_number&lt;/code>和&lt;code>wire_type&lt;/code>这两个值，这两个值组成这个字段的key。&lt;/p>
&lt;pre tabindex="0">&lt;code>key = (field_number &amp;lt;&amp;lt; 3) | wire_type
&lt;/code>&lt;/pre>&lt;p>&lt;code>field_number&lt;/code>标明了字段的编号，方便协议向前向后的兼容。而&lt;code>wire_type&lt;/code>标明字段的类型，方便解析程序使用相应的方法来进行反序列化。&lt;/p>
&lt;h3 id="varint-变长整型">Varint 变长整型 &lt;a href="#varint-%e5%8f%98%e9%95%bf%e6%95%b4%e5%9e%8b" class="anchor">🔗&lt;/a>&lt;/h3>&lt;p>对于一个变长整型字段，protobuf中使用Type(0)来标示，而长度并没有显式的标出。&lt;/p>
&lt;p>Varint的值使用如下编码方法：&lt;/p>
&lt;ul>
&lt;li>Varint使用分段存储方法，每个Byte为一段&lt;/li>
&lt;li>Varint每段的第一个字节是标示位，如果这一位是1，则下一个Byte也是这个数的一部分，如果这一位是0，则在这个Byte是这个Varint的最后一个Byte&lt;/li>
&lt;/ul>
&lt;h3 id="string-变长字符串">String 变长字符串 &lt;a href="#string-%e5%8f%98%e9%95%bf%e5%ad%97%e7%ac%a6%e4%b8%b2" class="anchor">🔗&lt;/a>&lt;/h3>&lt;p>字符串被标示为Type(2)，长度使用Varint类型显式标出。&lt;/p>
&lt;p>一个string在protobuf中被编码为：&lt;/p>
&lt;pre tabindex="0">&lt;code>encoded_string = key ++ length ++ string
&lt;/code>&lt;/pre>&lt;h2 id="其它方法">其它方法 &lt;a href="#%e5%85%b6%e5%ae%83%e6%96%b9%e6%b3%95" class="anchor">🔗&lt;/a>&lt;/h2>&lt;p>TLV同样也可以表示tag-length value，例如HTTP、FTP、POP3等协议都是使用这种基于可读文本的&amp;quot;Field: Value&amp;quot;协议。这样设计的原因大概是由于在“上古时代”，互联网速度远小于CPU处理的速率（现在更应该是&lt;strong>远远小于&lt;/strong>，CPU已经爆了IO一条街了），设计一些更可读的协议对人类来说确实比较方便。&lt;/p>
&lt;p>而TCP/IP核心协议都使用的定长不可变的协议，这样可以使编码、解析速率达到最快。&lt;/p>
&lt;p>对于XML和json这种奇行种，我们就不说了吧 :)&lt;/p>
&lt;h2 id="参考链接">参考链接 &lt;a href="#%e5%8f%82%e8%80%83%e9%93%be%e6%8e%a5" class="anchor">🔗&lt;/a>&lt;/h2>&lt;ul>
&lt;li>&lt;a href="http://en.wikipedia.org/wiki/Type-length-value">Type-length-value&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://www.cnblogs.com/shitouer/archive/2013/04/12/google-protocol-buffers-encoding.html">Google Protocol Buffers 编码(Encoding)&lt;/a>&lt;/li>
&lt;/ul></description></item></channel></rss>