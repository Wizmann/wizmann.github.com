<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Phxrpc on Maerlyn's Rainbow</title><link>https://wizmann.top/tags/phxrpc/</link><description>Recent content in Phxrpc on Maerlyn's Rainbow</description><generator>Hugo</generator><language>zh-CN</language><lastBuildDate>Sun, 23 Oct 2016 15:50:44 +0000</lastBuildDate><atom:link href="https://wizmann.top/tags/phxrpc/index.xml" rel="self" type="application/rss+xml"/><item><title>总结 - phxrpc代码阅读(8)</title><link>https://wizmann.top/posts/phxrpc-8/</link><pubDate>Sun, 23 Oct 2016 15:50:44 +0000</pubDate><guid>https://wizmann.top/posts/phxrpc-8/</guid><description>&lt;h2 id="写在前面">写在前面&lt;/h2>
&lt;p>这应该是phxrpc代码阅读系列正文的最后一篇。通过阅读代码，发现了自己在知识上的若干不足。&lt;/p>
&lt;p>临渊羡鱼，不如退而结网。接下来可能会在网络编程方面再下一点工夫。请大家期待下一个系列吧。&lt;/p></description></item><item><title>RPC - phxrpc代码阅读(7)</title><link>https://wizmann.top/posts/phxrpc-7/</link><pubDate>Sat, 22 Oct 2016 23:03:36 +0000</pubDate><guid>https://wizmann.top/posts/phxrpc-7/</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>看了这么久代码，终于我们要接近phxrpc的核心部分了。&lt;/p>
&lt;p>但是出人意料的是，rpc部分并没有过多的概念和magic trick。而且因为ucontext已经被封装好了，所以在rpc里的操作，可以完全按照同步的写法来搞，开发者们不需要切换同步异步的思维模式，就可以在底层的封装之上，做自己想做的事了。&lt;/p></description></item><item><title>非阻塞TCP流和HttpClient - phxrpc代码阅读(6)</title><link>https://wizmann.top/posts/phxrpc-6/</link><pubDate>Wed, 19 Oct 2016 00:03:12 +0000</pubDate><guid>https://wizmann.top/posts/phxrpc-6/</guid><description>&lt;h2 id="写在前面">写在前面&lt;/h2>
&lt;p>其实这点东西有点鸡肋。因为TCP流在前面已经讲过，难点在于“流”和“流缓冲区”部分。而HttpClient只是TCP流的一个应用，代码不多，且重点在于HTTP协议的调教上面。&lt;/p></description></item><item><title>使用epoll驱动ucontext - phxrpc代码阅读(5)</title><link>https://wizmann.top/posts/phxrpc-5/</link><pubDate>Mon, 17 Oct 2016 01:28:40 +0000</pubDate><guid>https://wizmann.top/posts/phxrpc-5/</guid><description>&lt;h2 id="用pipe叫醒你--epollnotifier">用pipe叫醒你 — EpollNotifier&lt;/h2>
&lt;p>&lt;code>class EpollNotifier&lt;/code>类型封装了一个使用pipe传递信号的Notifier类。&lt;/p>
&lt;p>&lt;code>Run()&lt;/code>函数（其实我觉得叫Register或Activate会更好）首先声明了两个单向的pipe：&lt;code>pipe_fds_&lt;/code>，从&lt;a href="http://man7.org/linux/man-pages/man2fpipe.2.html">文档&lt;/a>中我们可以知道&lt;code>pipe_fds_[0]&lt;/code>是读管道，而&lt;code>pipe_fds_[1]&lt;/code>是写管道。这里有一丁点反直觉，就是pipe拿了两个fd，但是仍旧是单工的。&lt;/p></description></item><item><title>ucontext - phxrpc代码阅读(4)</title><link>https://wizmann.top/posts/phxrpc-4/</link><pubDate>Thu, 13 Oct 2016 23:45:24 +0000</pubDate><guid>https://wizmann.top/posts/phxrpc-4/</guid><description>&lt;h2 id="写在前面">写在前面&lt;/h2>
&lt;p>国庆假期过半，phxrpc的代码阅读大概要小小告一段落啦。因为这两天还要读工作相关的代码，以及最后几天还有一次短途旅行。&lt;/p>
&lt;p>所以非阻塞TCP流可能要留到下一篇了，这一篇只涉及非阻塞TCP流使用到的ucontext协程库，及其使用的一些框架代码。&lt;/p></description></item><item><title>阻塞TCP流 - phxrpc代码阅读(3)</title><link>https://wizmann.top/posts/phxrpc-3/</link><pubDate>Mon, 03 Oct 2016 22:22:14 +0000</pubDate><guid>https://wizmann.top/posts/phxrpc-3/</guid><description>&lt;h2 id="写在前面">写在前面&lt;/h2>
&lt;p>phxrpc的流（&lt;code>stream&lt;/code>和&lt;code>streambuf&lt;/code>）与网络访问其实是耦合在一起的，所以本文可以结合着第一篇笔记一起来看。虽然我非常想吐槽这种强耦合性的设计，但是我决定还是好好理解phxrpc的设计之后。。。攒一波大的：）&lt;/p></description></item><item><title>定时器以及其它 - phxrpc阅读笔记(2)</title><link>https://wizmann.top/posts/phxrpc-2/</link><pubDate>Thu, 29 Sep 2016 01:28:09 +0000</pubDate><guid>https://wizmann.top/posts/phxrpc-2/</guid><description>&lt;h2 id="写在前面">写在前面&lt;/h2>
&lt;p>phxrpc使用了协程(ucontext)和IO复用技术(epoll)来实现网络通信。定时器在其中起到了非常重要的作用。下面我们就来分析一下phxrpc的&lt;code>timer.[h|cpp]&lt;/code>中的代码。&lt;/p></description></item><item><title>自定义你的stream buffer - phxrpc阅读笔记(1)</title><link>https://wizmann.top/posts/phxrpc-1/</link><pubDate>Wed, 28 Sep 2016 22:35:55 +0000</pubDate><guid>https://wizmann.top/posts/phxrpc-1/</guid><description>&lt;h2 id="写在前面">写在前面&lt;/h2>
&lt;p>&lt;a href="https://github.com/tencent-wechat/phxrpc">phxrpc&lt;/a>是微信团队开源的一个轻量级RPC框架。&lt;/p>
&lt;p>我对RPC这些东西了解不多，看到phxrpc的代码相对简单，而且还在初步开发阶段（在本文写作时，版本号是0.8）。所以想读一读，提高一下姿势水平。&lt;/p></description></item></channel></rss>