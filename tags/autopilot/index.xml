<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Autopilot on Maerlyn's Rainbow</title><link>https://wizmann.top/tags/autopilot/</link><description>Recent content in Autopilot on Maerlyn's Rainbow</description><generator>Hugo -- 0.146.0</generator><language>zh-CN</language><lastBuildDate>Fri, 22 Dec 2023 23:32:00 +0000</lastBuildDate><atom:link href="https://wizmann.top/tags/autopilot/index.xml" rel="self" type="application/rss+xml"/><item><title>[TL;DR] 论文阅读：Autopilot - 自动化数据中心管理</title><link>https://wizmann.top/posts/tl-dr-autopilot-automatic-data-center-management/</link><pubDate>Fri, 22 Dec 2023 23:32:00 +0000</pubDate><guid>https://wizmann.top/posts/tl-dr-autopilot-automatic-data-center-management/</guid><description>&lt;ul>
&lt;li>
&lt;h2 id="tldr">TL;DR&lt;/h2>
&lt;ul>
&lt;li>Autopilot是微软用来自动化运营大规模网络服务的基础架构&lt;/li>
&lt;li>其设计核心是Device Manager，一个基于Paxos的强一致性分布式状态机，用来保存整个系统的“实际真相”（ground truth），并且根据整个系统的状态确定下一步的行动&lt;/li>
&lt;li>其它子模块通过与Device Manager通信，在“最终一致性”模型下获取系统信息并执行命令，确保更新可能不是即时的，但最终会在系统中传播&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;h2 id="概述">概述：&lt;/h2>
&lt;ul>
&lt;li>微软运营大规模网络服务，需要可靠的数据中心自动管理​​&lt;/li>
&lt;li>为了降低数据中心的运营和资本支出而设计​​&lt;/li>
&lt;li>负责自动化软件配置和部署、系统监控，以及执行修复操作来处理软件和硬件的故障&lt;/li>
&lt;li>微观的策略则交由各个应用程序来确定。例如，确定哪些计算机应运行哪些软件，或者精确地定义和检测需要修复的故障&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;h2 id="设计原则">设计原则：&lt;/h2>
&lt;ul>
&lt;li>基于大规模“商品级计算机系统”的经济性和不可靠性，Autopilot采用容错和简化设计​​&lt;/li>
&lt;li>容错设计：非拜占庭式故障模型，解决数据中心的控制环境问题
&lt;ul>
&lt;li>“非拜占庭式故障模型”假设系统中的错误不是恶意或欺诈性的。在这种模型中，系统的故障被认为是由于一些常规原因，如硬件故障、软件缺陷或网络问题&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>简化设计：
&lt;ul>
&lt;li>强调简单性和容错性&lt;/li>
&lt;li>在构建大型的可靠、可维护系统时，常常选择简单设计而非更高效或看似更优雅但更复杂的解决案。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;h2 id="系统概览">系统概览：&lt;/h2>
&lt;ul>
&lt;li>Autopilot分为多个组件
&lt;ul>
&lt;li>&lt;img alt="image.png" loading="lazy" src="https://github.com/Wizmann/assets/blob/master/wizmann-pic/image_1703238379499_0.png?raw=true">&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>平衡弱一致性和强一致性之间的抉择
&lt;ul>
&lt;li>弱一致性：增强可用性&lt;/li>
&lt;li>强一致性：简化设计&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Device Manager - 状态和逻辑管理
&lt;ul>
&lt;li>所有关于系统应处于的“实际真相”（ground truth）状态以及更新这一状态的逻辑，都保存在一个称为 Device Manager 的强一致性状态机中，通常分布在5至10台计算机上&lt;/li>
&lt;li>使用 Paxos 算法实现副本间的一致性，同时通过批处理更新以平衡延迟和吞吐量&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Device Manager与“卫星服务”
&lt;ul>
&lt;li>“卫星服务”在发现 Device Manager 状态需要时，惰性地向自身或其客户端的同步信息&lt;/li>
&lt;li>如果“卫星服务”发现集群中的故障或不一致，它不会尝试纠正，而是将问题报告给 Device Manager
&lt;ul>
&lt;li>Autopilot会综合这些信息做出下一步决定&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>当 Device Manager 更新其状态时，会通知“卫星服务”。“卫星服务”也会通过心跳信息尝试拉取最新的状态。简化设计的同时，并且保证最终一致性/正确性。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;h2 id="底层服务">底层服务：&lt;/h2>
&lt;ul>
&lt;li>使用稳定的Windows Server操作系统镜像，包含Autopilot配置文件和服务​​&lt;/li>
&lt;li>配置服务（Provisioning）包括DHCP和网络引导，不断扫描网络中新接入的计算机​​
&lt;ul>
&lt;li>通过Device Manager提供的信息来决定需要运行的操作系统及二进制程序&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>应用部署
&lt;ul>
&lt;li>定义不同机器类型，存储不同配置文件和应用二进制文件​​&lt;/li>
&lt;li>部署新代码时，以Scale unit为单位更新/回滚各机器类型的配置​​&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;h2 id="自动修复服务">自动修复服务&lt;/h2>
&lt;ul>
&lt;li>使用最小化的故障检测和恢复模型，以节点或交换机为单位，不处理特定进程的错误
&lt;ul>
&lt;li>只包括Reboot / ReImage / Replace 三种操作&lt;/li>
&lt;li>Autopilot无需对错误归因，也不需要相关的错误处理逻辑&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>用看门狗进行故障报告​​，检测特定的属性，并上报给Device Manager&lt;/li>
&lt;li>Device Manager作为一个集中式程序，控制机器的自动修复，并且控制同时进行修复机器的数量&lt;/li>
&lt;li>&lt;img alt="image.png" loading="lazy" src="https://github.com/Wizmann/assets/blob/master/wizmann-pic/image_1703254394216_0.png?raw=true">&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;h2 id="监控服务">监控服务：&lt;/h2>
&lt;ul>
&lt;li>记录性能计数器和日志，收集服务形成分布式集合和聚合树​​&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;h2 id="案例研究---indexserving">案例研究 - IndexServing：&lt;/h2>
&lt;ul>
&lt;li>介绍Windows Live Search如何与Autopilot交互，保持高可用性​​&lt;/li>
&lt;li>对于需要高可用性和低延迟的面向客户服务的应用程序，需要在基础的 Autopilot 组件之上增加定制的容错层
&lt;ul>
&lt;li>使用Load balancer和定制的监控服务来探测失效的或者慢速的节点，并且将结论上报到Autopilot&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;h2 id="经验与教训">经验与教训：&lt;/h2>
&lt;ul>
&lt;li>对于关键的配置文件，进行checksum检查是必须的
&lt;ul>
&lt;li>避免人工失误（例如部署因Debug而临时修改的配置）或者其它意外问题&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>网络是不可靠的
&lt;ul>
&lt;li>TCP/IP的checksum非常弱，所以需要应用层面的额外检查&lt;/li>
&lt;li>网络硬件经常翻转数据流中的bit位，导致大量的重试或者未被网络层检测到的数据错误&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>一些节点偶尔会运行的异常慢，但是并不会停止工作。这种问题与“失败停止错误”一样需要被及时检测到&lt;/li>
&lt;li>节流与负荷削减对于自动化系统非常重要
&lt;ul>
&lt;li>失效检测模块需要有效的区分节点失效与节点过载的区别&lt;/li>
&lt;li>简单的移除节点可能会导致级联式的失效，进而使整个系统失效&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://www.semanticscholar.org/paper/Autopilot%3A-automatic-data-center-management-Isard/a531d33efc600a8770316db71dc06a7599f9547a">论文&lt;/a>&lt;/li>
&lt;/ul>
&lt;div class="alert alert-info" role="alert">本文大（划掉）部分内容由ChatGPT4生成&lt;/div></description></item></channel></rss>