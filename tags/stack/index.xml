<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Stack on Maerlyn's Rainbow</title><link>https://wizmann.top/tags/stack/</link><description>Recent content in Stack on Maerlyn's Rainbow</description><generator>Hugo</generator><language>zh-CN</language><lastBuildDate>Tue, 20 May 2014 13:23:03 +0000</lastBuildDate><atom:link href="https://wizmann.top/tags/stack/index.xml" rel="self" type="application/rss+xml"/><item><title>How to implement a queue with stack(s)?</title><link>https://wizmann.top/posts/implement-queue-with-stacks/</link><pubDate>Tue, 20 May 2014 13:23:03 +0000</pubDate><guid>https://wizmann.top/posts/implement-queue-with-stacks/</guid><description>&lt;p>This problem is from the book &lt;a href="http://book.douban.com/subject/19952400/">&lt;em>Algorithms, 4th Edition&lt;/em>&lt;/a>.&lt;/p>
&lt;blockquote>
&lt;p>Queue with three stacks. Implement a queue with three stacks so that each queue operation takes a constant (worst-case) number of stack operations.&lt;/p>
&lt;p>Warning : high degree of difficulty.&lt;/p>&lt;/blockquote>
&lt;p>When I search the Internet to find a solution, I find varieties of this problem, such as &amp;ldquo;implement a queue with ONE stack&amp;rdquo;, &amp;ldquo;implement a queue with TWO stack&amp;rdquo;, etc.&lt;/p>
&lt;p>It is fun, indeed. I spent the whole morning to finding the solution of these problems. So, let&amp;rsquo;s rock.&lt;/p></description></item><item><title>alloca vs placement new</title><link>https://wizmann.top/posts/alloca-vs-placement-new/</link><pubDate>Mon, 07 Apr 2014 21:08:59 +0000</pubDate><guid>https://wizmann.top/posts/alloca-vs-placement-new/</guid><description>&lt;h2 id="what">WHAT?!&lt;/h2>
&lt;p>For most time, we use &lt;code>malloc&lt;/code> or &lt;code>new&lt;/code> for memory allocation, which will get it on &lt;em>heap&lt;/em>.&lt;/p>
&lt;p>However, access memory on &lt;em>heap&lt;/em> is not as effective as the memory on &lt;em>stack&lt;/em>, because the heap is &amp;ldquo;free-floating region of memory&amp;rdquo;. To the contrary, memory on &lt;em>stack&lt;/em> is managed by CPU automacitally and tightly. As a result, the further of the &lt;em>stack&lt;/em> compared to &lt;em>heap&lt;/em> is that we can have a faster read/write speed due to the fact that &lt;em>stack&lt;/em> memory is more likely to optimized by &lt;strong>CPU cache&lt;/strong>, in addition, it only uses a single instruction to allocate or deallocate &lt;em>stack&lt;/em> memory. Just like this.&lt;/p></description></item></channel></rss>