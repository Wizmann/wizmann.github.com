<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Python on Maerlyn's Rainbow</title><link>https://wizmann.top/tags/python/</link><description>Recent content in Python on Maerlyn's Rainbow</description><generator>Hugo</generator><language>zh-CN</language><lastBuildDate>Sun, 27 Jul 2014 14:23:10 +0000</lastBuildDate><atom:link href="https://wizmann.top/tags/python/index.xml" rel="self" type="application/rss+xml"/><item><title>简明Python魔法 - 2</title><link>https://wizmann.top/posts/python-magic-2/</link><pubDate>Sun, 27 Jul 2014 14:23:10 +0000</pubDate><guid>https://wizmann.top/posts/python-magic-2/</guid><description>&lt;h2 id="再说描述符---descriptor">再说描述符 - Descriptor&lt;/h2>
&lt;h3 id="最简单的描述符">最简单的描述符&lt;/h3>
&lt;p>覆写类的&lt;code>__get__&lt;/code>和&lt;code>__setter__&lt;/code>函数就可以实现一个简单的描述符。对某个类型实例的读写进行额外的控制。&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-pycon" data-lang="pycon">&amp;gt;&amp;gt;&amp;gt; import datetime
&amp;gt;&amp;gt;&amp;gt; class CurrentDate(object):
... def __get__(self, instance, owner):
... return datetime.date.today()
... def __set__(self, instance, value):
... raise NotImplementedError(&amp;#34;Can&amp;#39;t change the current date.&amp;#34;)
...
&amp;gt;&amp;gt;&amp;gt; class Example(object):
... date = CurrentDate()
...
&amp;gt;&amp;gt;&amp;gt; e = Example()
&amp;gt;&amp;gt;&amp;gt; e.date
datetime.date(2008, 11, 24)
&amp;gt;&amp;gt;&amp;gt; e.date = datetime.date.today()
Traceback (most recent call last):
 ...
NotImplementedError: Can&amp;#39;t change the current date.
&lt;/code>&lt;/pre>&lt;h3 id="类属性描述符">类属性描述符&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">MyClass&lt;/span> (object):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> __var &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">None&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">_set_var&lt;/span> (self, value):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> type (self)&lt;span style="color:#f92672">.&lt;/span>__var &lt;span style="color:#f92672">=&lt;/span> value
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">_get_var&lt;/span> (self):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> self&lt;span style="color:#f92672">.&lt;/span>__var
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> var &lt;span style="color:#f92672">=&lt;/span> property (_get_var, _set_var)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>a &lt;span style="color:#f92672">=&lt;/span> MyClass ()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>b &lt;span style="color:#f92672">=&lt;/span> MyClass ()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>a&lt;span style="color:#f92672">.&lt;/span>var &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;foo&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print b&lt;span style="color:#f92672">.&lt;/span>var
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>我们可以使用上面的方法，包装一个类属性描述符。对类属性进行操作。&lt;/p></description></item><item><title>简明Python魔法 - 1</title><link>https://wizmann.top/posts/python-magic-1/</link><pubDate>Sat, 26 Jul 2014 22:23:34 +0000</pubDate><guid>https://wizmann.top/posts/python-magic-1/</guid><description>&lt;h2 id="python中类的实现">Python中类的实现&lt;/h2>
&lt;p>在Python的Web框架Django中，Python类的构造特性实现了它大部分的核心功能。&lt;/p>
&lt;p>当Python解释器遇到类声明时，会创建一个新的namespace ，并执行其内的所有代码，并将变量注册到这个namespace中。&lt;/p></description></item><item><title>使用pip和virtuanenv</title><link>https://wizmann.top/posts/using-pip-and-virtualenv/</link><pubDate>Mon, 25 Nov 2013 00:00:00 +0000</pubDate><guid>https://wizmann.top/posts/using-pip-and-virtualenv/</guid><description>&lt;p>让我们从一个无聊的小段子开始。&lt;/p>
&lt;blockquote>
&lt;p>&amp;ldquo;What’s pip?&amp;rdquo;&lt;/p>&lt;/blockquote>
&lt;blockquote>
&lt;p>&amp;ldquo;A python package manager&amp;rdquo;&lt;/p>&lt;/blockquote>
&lt;blockquote>
&lt;p>&amp;ldquo;How do I install it?&amp;rdquo;&lt;/p>&lt;/blockquote>
&lt;blockquote>
&lt;p>&amp;ldquo;easy_install pip&amp;rdquo;&lt;/p>&lt;/blockquote>
&lt;blockquote>
&lt;p>&amp;ldquo;What’s easy_install?&amp;rdquo;&lt;/p>&lt;/blockquote>
&lt;blockquote>
&lt;p>&amp;ldquo;A python package manager&amp;rdquo;&lt;/p>&lt;/blockquote>
&lt;p>pip和easy_install都是python的包管理工具，类似于ruby的gem以及nodejs的npm。&lt;/p></description></item></channel></rss>