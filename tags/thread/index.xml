<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Thread on Maerlyn's Rainbow</title><link>https://wizmann.top/tags/thread/</link><description>Recent content in Thread on Maerlyn's Rainbow</description><generator>Hugo</generator><language>zh-CN</language><lastBuildDate>Mon, 18 Mar 2024 23:21:35 +0000</lastBuildDate><atom:link href="https://wizmann.top/tags/thread/index.xml" rel="self" type="application/rss+xml"/><item><title>CPU缓存一致性与内存一致性（第一部分-MESI协议）</title><link>https://wizmann.top/posts/cache-coherence-and-memory-order/</link><pubDate>Mon, 18 Mar 2024 23:21:35 +0000</pubDate><guid>https://wizmann.top/posts/cache-coherence-and-memory-order/</guid><description>&lt;p>在对称多处理系统（Symmetric Multiprocessing, SMP）中，一个变量（或内存位置）可以同时存在于多个CPU的缓存行中。为了提供完美的用户级抽象，任何对一个或多个变量的修改都应该被强制同步，以确保其它CPU的缓存得到更新。
然而，在实现上，由于CPU之间通常通过总线互联，它们不能同时对多个缓存进行写操作。&lt;/p></description></item><item><title>Parallel patterns in C#</title><link>https://wizmann.top/posts/parallel-in-csharp/</link><pubDate>Sun, 22 Jan 2017 22:52:28 +0000</pubDate><guid>https://wizmann.top/posts/parallel-in-csharp/</guid><description>&lt;h2 id="写在前面">写在前面&lt;/h2>
&lt;p>与C/C++所使用的，传统的基于线程的并行模式不同，C#实现了丰富的并发编程模型，其中以异步模型最为流行。&lt;/p>
&lt;p>本文中我们重点讨论C#在发展过程中出现的几种异步编程模型：&lt;/p></description></item><item><title>内存屏障初探</title><link>https://wizmann.top/posts/read-paper-barrier/</link><pubDate>Thu, 08 May 2014 19:05:26 +0000</pubDate><guid>https://wizmann.top/posts/read-paper-barrier/</guid><description>&lt;h2 id="原文地址">原文地址&lt;/h2>
&lt;p>&lt;a href="http://ridiculousfish.com/blog/posts/barrier.html" target="_blank" rel="noopener">Barrier February 17th, 2007&lt;/a>&lt;/p>
&lt;h2 id="前言多核时代的挑战">前言：多核时代的挑战&lt;/h2>
&lt;p>尽管80核心的浮点运算巨兽仍然遥不可及，多核处理器的时代已经到来。多核处理器的概念并非新鲜事物，在Power Macintosh 9500中就已经采用了多核处理器技术。现在，让我们深入理解多核处理器的内在机制。&lt;/p></description></item></channel></rss>